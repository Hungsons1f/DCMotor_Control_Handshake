
DCMotorFullset.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c0  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008980  08008980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d8  080089d8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e0  080089e0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080089e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000001c  08008a04  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08008a04  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b88  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cb4  00000000  00000000  00036bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  0003ac78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003000  00000000  00000000  0003bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001078f  00000000  00000000  0003efe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001054e1  00000000  00000000  0004f76f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005508  00000000  00000000  00154ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008968 	.word	0x08008968

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000020 	.word	0x20000020
 80001fc:	08008968 	.word	0x08008968

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	0000      	movs	r0, r0
	...

08000d90 <Calibrated_PID>:
volatile float u0 = 0;
volatile float u1 = 0;

/* Private function -----------------------------------------------*/
volatile int32_t Calibrated_PID (volatile int32_t *count)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	float synchrocount = (float)*count;//*Pregain;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da4:	edc7 7a05 	vstr	s15, [r7, #20]
	float synchroduty;
	synchroduty = PID(setpoint, synchrocount, kp, ki, kd);
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <Calibrated_PID+0x80>)
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <Calibrated_PID+0x84>)
 8000db0:	ed93 7a00 	vldr	s14, [r3]
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <Calibrated_PID+0x88>)
 8000db6:	edd3 6a00 	vldr	s13, [r3]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <Calibrated_PID+0x8c>)
 8000dbc:	ed93 6a00 	vldr	s12, [r3]
 8000dc0:	eeb0 2a46 	vmov.f32	s4, s12
 8000dc4:	eef0 1a66 	vmov.f32	s3, s13
 8000dc8:	eeb0 1a47 	vmov.f32	s2, s14
 8000dcc:	edd7 0a05 	vldr	s1, [r7, #20]
 8000dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd4:	f000 f824 	bl	8000e20 <PID>
 8000dd8:	ed87 0a04 	vstr	s0, [r7, #16]
	int32_t duty = (int32_t)(synchroduty*Postgain);
 8000ddc:	6938      	ldr	r0, [r7, #16]
 8000dde:	f7ff fb73 	bl	80004c8 <__aeabi_f2d>
 8000de2:	a309      	add	r3, pc, #36	; (adr r3, 8000e08 <Calibrated_PID+0x78>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f7ff fbc6 	bl	8000578 <__aeabi_dmul>
 8000dec:	4603      	mov	r3, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	4618      	mov	r0, r3
 8000df2:	4621      	mov	r1, r4
 8000df4:	f7ff fdd2 	bl	800099c <__aeabi_d2iz>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60fb      	str	r3, [r7, #12]
	return duty;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	bf00      	nop
 8000e08:	33333333 	.word	0x33333333
 8000e0c:	3fd33333 	.word	0x3fd33333
 8000e10:	2000005c 	.word	0x2000005c
 8000e14:	20000064 	.word	0x20000064
 8000e18:	20000068 	.word	0x20000068
 8000e1c:	2000006c 	.word	0x2000006c

08000e20 <PID>:

volatile float PID(float setpoint, float measure, float kp, float ki, float kd)
{
 8000e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e24:	b088      	sub	sp, #32
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e2c:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e30:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e34:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e38:	ed87 2a01 	vstr	s4, [r7, #4]
	float temp = 0;
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
	e2 = e1;
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <PID+0x158>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a4d      	ldr	r2, [pc, #308]	; (8000f7c <PID+0x15c>)
 8000e48:	6013      	str	r3, [r2, #0]
	e1 = e0;
 8000e4a:	4b4d      	ldr	r3, [pc, #308]	; (8000f80 <PID+0x160>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a4a      	ldr	r2, [pc, #296]	; (8000f78 <PID+0x158>)
 8000e50:	6013      	str	r3, [r2, #0]
	e0 = setpoint - measure;
 8000e52:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <PID+0x160>)
 8000e60:	edc3 7a00 	vstr	s15, [r3]
	u1 = u0;
 8000e64:	4b47      	ldr	r3, [pc, #284]	; (8000f84 <PID+0x164>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <PID+0x168>)
 8000e6a:	6013      	str	r3, [r2, #0]
	u0 = (u1 + kp*(e0 - e1) + ki*time*(e0 + e1)/2.0 + kd*(e0 - 2*e1 + e2)/time);
 8000e6c:	4b44      	ldr	r3, [pc, #272]	; (8000f80 <PID+0x160>)
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <PID+0x158>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e84:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <PID+0x168>)
 8000e86:	edd3 7a00 	vldr	s15, [r3]
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	ee17 0a90 	vmov	r0, s15
 8000e92:	f7ff fb19 	bl	80004c8 <__aeabi_f2d>
 8000e96:	4604      	mov	r4, r0
 8000e98:	460d      	mov	r5, r1
 8000e9a:	68b8      	ldr	r0, [r7, #8]
 8000e9c:	f7ff fb14 	bl	80004c8 <__aeabi_f2d>
 8000ea0:	a333      	add	r3, pc, #204	; (adr r3, 8000f70 <PID+0x150>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fb67 	bl	8000578 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4690      	mov	r8, r2
 8000eb0:	4699      	mov	r9, r3
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <PID+0x160>)
 8000eb4:	ed93 7a00 	vldr	s14, [r3]
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <PID+0x158>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec2:	ee17 0a90 	vmov	r0, s15
 8000ec6:	f7ff faff 	bl	80004c8 <__aeabi_f2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4640      	mov	r0, r8
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	f7ff fb51 	bl	8000578 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee6:	f7ff fc71 	bl	80007cc <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f7ff f98b 	bl	800020c <__adddf3>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460c      	mov	r4, r1
 8000efa:	4625      	mov	r5, r4
 8000efc:	461c      	mov	r4, r3
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <PID+0x160>)
 8000f00:	ed93 7a00 	vldr	s14, [r3]
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <PID+0x158>)
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <PID+0x15c>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f24:	ee17 0a90 	vmov	r0, s15
 8000f28:	f7ff face 	bl	80004c8 <__aeabi_f2d>
 8000f2c:	a310      	add	r3, pc, #64	; (adr r3, 8000f70 <PID+0x150>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fc4b 	bl	80007cc <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff f965 	bl	800020c <__adddf3>
 8000f42:	4603      	mov	r3, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	4618      	mov	r0, r3
 8000f48:	4621      	mov	r1, r4
 8000f4a:	f7ff fd4f 	bl	80009ec <__aeabi_d2f>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <PID+0x164>)
 8000f52:	601a      	str	r2, [r3, #0]
	//if (u0 < -150 ) u0 = -150;
	//if (u0>150 ) u0 =150;
	temp = u0;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <PID+0x164>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61fb      	str	r3, [r7, #28]
	return temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	ee07 3a90 	vmov	s15, r3
}
 8000f60:	eeb0 0a67 	vmov.f32	s0, s15
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f6c:	f3af 8000 	nop.w
 8000f70:	47ae147b 	.word	0x47ae147b
 8000f74:	3f947ae1 	.word	0x3f947ae1
 8000f78:	2000003c 	.word	0x2000003c
 8000f7c:	20000040 	.word	0x20000040
 8000f80:	20000038 	.word	0x20000038
 8000f84:	20000044 	.word	0x20000044
 8000f88:	20000048 	.word	0x20000048

08000f8c <ClearPIDController>:

void ClearPIDController ()
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	e0 = 0;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <ClearPIDController+0x38>)
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
	e1 = 0;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <ClearPIDController+0x3c>)
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
	e2 = 0;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <ClearPIDController+0x40>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	u0 = 0;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <ClearPIDController+0x44>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	u1 = 0;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <ClearPIDController+0x48>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000038 	.word	0x20000038
 8000fc8:	2000003c 	.word	0x2000003c
 8000fcc:	20000040 	.word	0x20000040
 8000fd0:	20000044 	.word	0x20000044
 8000fd4:	20000048 	.word	0x20000048

08000fd8 <EncoderCount>:

/* Private variables ---------------------------------------------------------*/

/* Private function -----------------------------------------------*/
volatile int32_t EncoderCount (TIM_HandleTypeDef *timer)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	volatile int32_t count;
	count = __HAL_TIM_GET_COUNTER(timer);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(timer, 0);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <EncoderPosCount>:

volatile int32_t EncoderPosCount (TIM_HandleTypeDef *timer)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	volatile int32_t count;
	count = __HAL_TIM_GET_COUNTER(timer);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	60fb      	str	r3, [r7, #12]
	return count;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <ClearEncoderCount>:

void ClearEncoderCount (TIM_HandleTypeDef *timer)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(timer, 0);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <PWMGen2>:
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
		  }
}

void PWMGen2 (volatile int32_t *value, TIM_HandleTypeDef *timer, uint32_t timchannel, GPIO_TypeDef *gpioport, uint32_t gpiopin, GPIO_TypeDef *gpioport2, uint32_t gpiopin2)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	if (*value<0)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	da3f      	bge.n	80010ce <PWMGen2+0x96>
		  {
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_SET);
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	b29b      	uxth	r3, r3
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f002 f80e 	bl	8003078 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(gpioport2, gpiopin2, GPIO_PIN_RESET);
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	b29b      	uxth	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001066:	f002 f807 	bl	8003078 <HAL_GPIO_WritePin>
			  int32_t duty = - *value + PWMOffset;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 8001072:	613b      	str	r3, [r7, #16]
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <PWMGen2+0x4c>
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_RESET);
			  HAL_GPIO_WritePin(gpioport2, gpiopin2, GPIO_PIN_SET);
			  int32_t duty =  *value + PWMOffset;
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
		  }
}
 8001082:	e062      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d104      	bne.n	8001094 <PWMGen2+0x5c>
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001092:	e05a      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d104      	bne.n	80010a4 <PWMGen2+0x6c>
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010a2:	e052      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	d104      	bne.n	80010b4 <PWMGen2+0x7c>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010b2:	e04a      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b10      	cmp	r3, #16
 80010b8:	d104      	bne.n	80010c4 <PWMGen2+0x8c>
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	659a      	str	r2, [r3, #88]	; 0x58
}
 80010c2:	e042      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010cc:	e03d      	b.n	800114a <PWMGen2+0x112>
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_RESET);
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	f001 ffce 	bl	8003078 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(gpioport2, gpiopin2, GPIO_PIN_SET);
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010de:	b29b      	uxth	r3, r3
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010e6:	f001 ffc7 	bl	8003078 <HAL_GPIO_WritePin>
			  int32_t duty =  *value + PWMOffset;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	332d      	adds	r3, #45	; 0x2d
 80010f0:	617b      	str	r3, [r7, #20]
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <PWMGen2+0xca>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001100:	e023      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d104      	bne.n	8001112 <PWMGen2+0xda>
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001110:	e01b      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d104      	bne.n	8001122 <PWMGen2+0xea>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001120:	e013      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0c      	cmp	r3, #12
 8001126:	d104      	bne.n	8001132 <PWMGen2+0xfa>
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001130:	e00b      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b10      	cmp	r3, #16
 8001136:	d104      	bne.n	8001142 <PWMGen2+0x10a>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001140:	e003      	b.n	800114a <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <TransmitData>:
	HAL_UART_Transmit(&hlpuart1, &sum, 1, 1000);
	HAL_UART_Transmit(&hlpuart1, &etx, 1, 1000);
}

void TransmitData (float realtime, float measure, float pwm)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001162:	ed87 1a01 	vstr	s2, [r7, #4]
	uint8_t stx = STX16, etx = ETX, head = Data;
 8001166:	23fd      	movs	r3, #253	; 0xfd
 8001168:	74fb      	strb	r3, [r7, #19]
 800116a:	23ff      	movs	r3, #255	; 0xff
 800116c:	74bb      	strb	r3, [r7, #18]
 800116e:	2304      	movs	r3, #4
 8001170:	747b      	strb	r3, [r7, #17]
	uint8_t *temp;
	HAL_UART_Transmit(&hlpuart1, &stx, 1, 1000);
 8001172:	f107 0113 	add.w	r1, r7, #19
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	2201      	movs	r2, #1
 800117c:	4820      	ldr	r0, [pc, #128]	; (8001200 <TransmitData+0xac>)
 800117e:	f005 f81d 	bl	80061bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, &head, 1, 1000);
 8001182:	f107 0111 	add.w	r1, r7, #17
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	2201      	movs	r2, #1
 800118c:	481c      	ldr	r0, [pc, #112]	; (8001200 <TransmitData+0xac>)
 800118e:	f005 f815 	bl	80061bc <HAL_UART_Transmit>
	temp = Float2Char(realtime);
 8001192:	ed97 0a03 	vldr	s0, [r7, #12]
 8001196:	f000 f98d 	bl	80014b4 <Float2Char>
 800119a:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&hlpuart1, temp, 4, 1000);
 800119c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a0:	2204      	movs	r2, #4
 80011a2:	6979      	ldr	r1, [r7, #20]
 80011a4:	4816      	ldr	r0, [pc, #88]	; (8001200 <TransmitData+0xac>)
 80011a6:	f005 f809 	bl	80061bc <HAL_UART_Transmit>
	temp = Float2Char(measure);
 80011aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80011ae:	f000 f981 	bl	80014b4 <Float2Char>
 80011b2:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&hlpuart1, temp, 4, 1000);
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	2204      	movs	r2, #4
 80011ba:	6979      	ldr	r1, [r7, #20]
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <TransmitData+0xac>)
 80011be:	f004 fffd 	bl	80061bc <HAL_UART_Transmit>
	temp = Float2Char(pwm);
 80011c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80011c6:	f000 f975 	bl	80014b4 <Float2Char>
 80011ca:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&hlpuart1, temp, 4, 1000);
 80011cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d0:	2204      	movs	r2, #4
 80011d2:	6979      	ldr	r1, [r7, #20]
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <TransmitData+0xac>)
 80011d6:	f004 fff1 	bl	80061bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, &txindex, 1, 1000);
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	2201      	movs	r2, #1
 80011e0:	4908      	ldr	r1, [pc, #32]	; (8001204 <TransmitData+0xb0>)
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <TransmitData+0xac>)
 80011e4:	f004 ffea 	bl	80061bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, &etx, 1, 1000);
 80011e8:	f107 0112 	add.w	r1, r7, #18
 80011ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f0:	2201      	movs	r2, #1
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <TransmitData+0xac>)
 80011f4:	f004 ffe2 	bl	80061bc <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, temp, 4, 1000);
//	temp = Float2Char(pwm);
//	HAL_UART_Transmit(&huart1, temp, 4, 1000);
//	HAL_UART_Transmit(&huart1, &txindex, 1, 1000);
//	HAL_UART_Transmit(&huart1, &etx, 1, 1000);
}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200005d8 	.word	0x200005d8
 8001204:	2000004d 	.word	0x2000004d

08001208 <TransmitAndHandshake>:
 * @para measure: giá trị đo được hiện tại
 *
 * @return: Truyền thành công hay không
 */
uint8_t TransmitAndHandshake (float *buffer, float realtime, float measure, float pwm)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
 8001218:	ed87 1a00 	vstr	s2, [r7]
	if (txnak || !txack)
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <TransmitAndHandshake+0xa0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <TransmitAndHandshake+0x24>
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <TransmitAndHandshake+0xa4>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d114      	bne.n	8001256 <TransmitAndHandshake+0x4e>
	{
		TransmitData(*buffer, *(buffer+1), *(buffer + 2));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3304      	adds	r3, #4
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3308      	adds	r3, #8
 800123e:	edd3 6a00 	vldr	s13, [r3]
 8001242:	eeb0 1a66 	vmov.f32	s2, s13
 8001246:	eef0 0a47 	vmov.f32	s1, s14
 800124a:	eeb0 0a67 	vmov.f32	s0, s15
 800124e:	f7ff ff81 	bl	8001154 <TransmitData>
		return 0;
 8001252:	2300      	movs	r3, #0
 8001254:	e023      	b.n	800129e <TransmitAndHandshake+0x96>
	}
	else
	{
		txindex++;
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <TransmitAndHandshake+0xa8>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <TransmitAndHandshake+0xa8>)
 8001260:	701a      	strb	r2, [r3, #0]
		if (txindex > 100) txindex = 0;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <TransmitAndHandshake+0xa8>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d902      	bls.n	8001270 <TransmitAndHandshake+0x68>
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <TransmitAndHandshake+0xa8>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
		TransmitData(realtime, measure, pwm);
 8001270:	ed97 1a00 	vldr	s2, [r7]
 8001274:	edd7 0a01 	vldr	s1, [r7, #4]
 8001278:	ed97 0a02 	vldr	s0, [r7, #8]
 800127c:	f7ff ff6a 	bl	8001154 <TransmitData>
		*buffer = realtime;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	601a      	str	r2, [r3, #0]
		*(buffer+1) = measure;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3304      	adds	r3, #4
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
		*(buffer+2) = pwm;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3308      	adds	r3, #8
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	601a      	str	r2, [r3, #0]
		txack = 0;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <TransmitAndHandshake+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

//		__HAL_TIM_SET_COUNTER(&htim6, 0);
//		HAL_TIM_Base_Start_IT(&htim6);
		return 1;
 800129c:	2301      	movs	r3, #1
	}
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000004c 	.word	0x2000004c
 80012ac:	20000000 	.word	0x20000000
 80012b0:	2000004d 	.word	0x2000004d

080012b4 <ReceiveAndHandshake>:
	}
	return 0;
}

uint8_t ReceiveAndHandshake (uint8_t *buffer, uint8_t *instruction)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	if (*buffer != STX)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2bfe      	cmp	r3, #254	; 0xfe
 80012c4:	d002      	beq.n	80012cc <ReceiveAndHandshake+0x18>
	{
		rxnak = 1;
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <ReceiveAndHandshake+0xc8>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
	}

	if (*(buffer + 6) != ETX)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3306      	adds	r3, #6
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2bff      	cmp	r3, #255	; 0xff
 80012d4:	d002      	beq.n	80012dc <ReceiveAndHandshake+0x28>
	{
		rxnak = 1;
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <ReceiveAndHandshake+0xc8>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
	}

	if (!rxnak)
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <ReceiveAndHandshake+0xc8>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d11a      	bne.n	800131a <ReceiveAndHandshake+0x66>
	{
		for (uint8_t i = 0; i<= 4; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e00b      	b.n	8001302 <ReceiveAndHandshake+0x4e>
			*(instruction+i) = *(buffer+i+1);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	3301      	adds	r3, #1
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	441a      	add	r2, r3
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	6839      	ldr	r1, [r7, #0]
 80012f6:	440b      	add	r3, r1
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i<= 4; i++)
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	3301      	adds	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d9f0      	bls.n	80012ea <ReceiveAndHandshake+0x36>
		HAL_UART_Transmit(&hlpuart1, buffer, 7, 1000);
 8001308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130c:	2207      	movs	r2, #7
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	481b      	ldr	r0, [pc, #108]	; (8001380 <ReceiveAndHandshake+0xcc>)
 8001312:	f004 ff53 	bl	80061bc <HAL_UART_Transmit>
		return 1;
 8001316:	2301      	movs	r3, #1
 8001318:	e02b      	b.n	8001372 <ReceiveAndHandshake+0xbe>
	}
	else
	{
		uint8_t nak = Nak, stx = STX, etx = ETX;
 800131a:	23f0      	movs	r3, #240	; 0xf0
 800131c:	73bb      	strb	r3, [r7, #14]
 800131e:	23fe      	movs	r3, #254	; 0xfe
 8001320:	737b      	strb	r3, [r7, #13]
 8001322:	23ff      	movs	r3, #255	; 0xff
 8001324:	733b      	strb	r3, [r7, #12]
		uint8_t dummy[4] = {0,0,0,0};
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&hlpuart1, &stx, 1, 1000);
 800132a:	f107 010d 	add.w	r1, r7, #13
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	2201      	movs	r2, #1
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <ReceiveAndHandshake+0xcc>)
 8001336:	f004 ff41 	bl	80061bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &nak, 1, 1000);
 800133a:	f107 010e 	add.w	r1, r7, #14
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	2201      	movs	r2, #1
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <ReceiveAndHandshake+0xcc>)
 8001346:	f004 ff39 	bl	80061bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, dummy, 4, 1000);
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	2204      	movs	r2, #4
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <ReceiveAndHandshake+0xcc>)
 8001356:	f004 ff31 	bl	80061bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &etx, 1, 1000);
 800135a:	f107 010c 	add.w	r1, r7, #12
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	2201      	movs	r2, #1
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <ReceiveAndHandshake+0xcc>)
 8001366:	f004 ff29 	bl	80061bc <HAL_UART_Transmit>
		rxnak = 0;
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <ReceiveAndHandshake+0xc8>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
		return 0;
 8001370:	2300      	movs	r3, #0
	}
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000004e 	.word	0x2000004e
 8001380:	200005d8 	.word	0x200005d8

08001384 <ReceiveAck>:

uint8_t ReceiveAck (uint8_t *buffer)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	if (*buffer != STX)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2bfe      	cmp	r3, #254	; 0xfe
 8001392:	d002      	beq.n	800139a <ReceiveAck+0x16>
	{
		txnak = 1;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <ReceiveAck+0x80>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
	}

	if (*(buffer + 6) != ETX)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3306      	adds	r3, #6
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2bff      	cmp	r3, #255	; 0xff
 80013a2:	d002      	beq.n	80013aa <ReceiveAck+0x26>
	{
		txnak = 1;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <ReceiveAck+0x80>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
	}

	if (!txnak)
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <ReceiveAck+0x80>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d122      	bne.n	80013f8 <ReceiveAck+0x74>
	{
		if (*(buffer + 1) == Ack)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3301      	adds	r3, #1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2bf1      	cmp	r3, #241	; 0xf1
 80013ba:	d113      	bne.n	80013e4 <ReceiveAck+0x60>
		{
			if (*(buffer+5) == txindex)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3305      	adds	r3, #5
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <ReceiveAck+0x84>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d107      	bne.n	80013da <ReceiveAck+0x56>
			{
				txack = 1;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <ReceiveAck+0x88>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop_IT(&htim6);
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <ReceiveAck+0x8c>)
 80013d2:	f003 fca9 	bl	8004d28 <HAL_TIM_Base_Stop_IT>
				return 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <ReceiveAck+0x76>
			}
			else
			{
				txnak = 1;
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <ReceiveAck+0x80>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
				return 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	e00a      	b.n	80013fa <ReceiveAck+0x76>
			}
		}
		else if (*(buffer + 1) == Nak)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2bf0      	cmp	r3, #240	; 0xf0
 80013ec:	d104      	bne.n	80013f8 <ReceiveAck+0x74>
		{
			txnak = 1;
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <ReceiveAck+0x80>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
			return 2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	e000      	b.n	80013fa <ReceiveAck+0x76>
		}
	}
	//else
	{
		return 0;
 80013f8:	2300      	movs	r3, #0
	}
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000004c 	.word	0x2000004c
 8001408:	2000004d 	.word	0x2000004d
 800140c:	20000000 	.word	0x20000000
 8001410:	200006f0 	.word	0x200006f0

08001414 <ReceiveDataofHeader>:

float ReceiveDataofHeader (uint8_t *rxbuffer)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	float data;
	uint8_t temp[4];
	*temp = *(rxbuffer + 1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	723b      	strb	r3, [r7, #8]
	*(temp + 1) = *(rxbuffer + 2);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	789b      	ldrb	r3, [r3, #2]
 8001426:	727b      	strb	r3, [r7, #9]
	*(temp + 2) = *(rxbuffer + 3);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	78db      	ldrb	r3, [r3, #3]
 800142c:	72bb      	strb	r3, [r7, #10]
	*(temp + 3) = *(rxbuffer + 4);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	72fb      	strb	r3, [r7, #11]
	data = Char2Float(temp);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f80a 	bl	8001452 <Char2Float>
 800143e:	ed87 0a03 	vstr	s0, [r7, #12]
	return data;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	ee07 3a90 	vmov	s15, r3
}
 8001448:	eeb0 0a67 	vmov.f32	s0, s15
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <Char2Float>:
/**
 * Chuyển số nguyên thành số thực. Nhận vào mảng 4 byte số nguyên và trả về số thực
 *
 */
float Char2Float (uint8_t *charNum)
{
 8001452:	b480      	push	{r7}
 8001454:	b087      	sub	sp, #28
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	float floatNum = 0;
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
	float* pFloat;
    long temp = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
    temp = *charNum;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) + *(charNum+1);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	3201      	adds	r2, #1
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) + *(charNum+2);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	3202      	adds	r2, #2
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) + *(charNum+3);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	3203      	adds	r2, #3
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	4413      	add	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
    pFloat = (float*)&temp;
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	613b      	str	r3, [r7, #16]
    floatNum = *pFloat;
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	617b      	str	r3, [r7, #20]
    return floatNum;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	ee07 3a90 	vmov	s15, r3
}
 80014a6:	eeb0 0a67 	vmov.f32	s0, s15
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <Float2Char>:

/**
 * Chuyển số thực thành số nguyên. Nhận vào số thực và trả về 4 byte số nguyên
 */
uint8_t* Float2Char (float floatNum)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t charNum[4];
	long *pLong;
	pLong = (long*)&floatNum;
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	60fb      	str	r3, [r7, #12]
	charNum[0] = *pLong>>24;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	161b      	asrs	r3, r3, #24
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <Float2Char+0x4c>)
 80014cc:	701a      	strb	r2, [r3, #0]
	charNum[1] = *pLong>>16;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	141b      	asrs	r3, r3, #16
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <Float2Char+0x4c>)
 80014d8:	705a      	strb	r2, [r3, #1]
	charNum[2] = *pLong>>8;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	121b      	asrs	r3, r3, #8
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <Float2Char+0x4c>)
 80014e4:	709a      	strb	r2, [r3, #2]
	charNum[3] = *pLong;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <Float2Char+0x4c>)
 80014ee:	70da      	strb	r2, [r3, #3]
	return charNum;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <Float2Char+0x4c>)
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000050 	.word	0x20000050

08001504 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
	//if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0)
	{
		//TransmitCommand(Measure, 1, Float);
//		falsetransmit ^= 0x01;
		falsetransmit++;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_GPIO_EXTI_Callback+0x80>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_GPIO_EXTI_Callback+0x80>)
 8001518:	701a      	strb	r2, [r3, #0]
		if (falsetransmit ==1)
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_GPIO_EXTI_Callback+0x80>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10a      	bne.n	8001538 <HAL_GPIO_EXTI_Callback+0x34>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	4818      	ldr	r0, [pc, #96]	; (8001588 <HAL_GPIO_EXTI_Callback+0x84>)
 8001528:	f001 fda6 	bl	8003078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <HAL_GPIO_EXTI_Callback+0x84>)
 8001534:	f001 fda0 	bl	8003078 <HAL_GPIO_WritePin>
		}

		if (falsetransmit == 2)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_GPIO_EXTI_Callback+0x80>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d10a      	bne.n	8001556 <HAL_GPIO_EXTI_Callback+0x52>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	4810      	ldr	r0, [pc, #64]	; (8001588 <HAL_GPIO_EXTI_Callback+0x84>)
 8001546:	f001 fd97 	bl	8003078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <HAL_GPIO_EXTI_Callback+0x84>)
 8001552:	f001 fd91 	bl	8003078 <HAL_GPIO_WritePin>
		}

		if (falsetransmit == 3)
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_GPIO_EXTI_Callback+0x80>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d10d      	bne.n	800157a <HAL_GPIO_EXTI_Callback+0x76>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <HAL_GPIO_EXTI_Callback+0x84>)
 8001564:	f001 fd88 	bl	8003078 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <HAL_GPIO_EXTI_Callback+0x84>)
 8001570:	f001 fd82 	bl	8003078 <HAL_GPIO_WritePin>
			falsetransmit = 0;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GPIO_EXTI_Callback+0x80>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
		}


	}
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000054 	.word	0x20000054
 8001588:	48000400 	.word	0x48000400

0800158c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if (__HAL_TIM_GET_IT_SOURCE(&htim4,TIM_IT_UPDATE))
 8001594:	4b6f      	ldr	r3, [pc, #444]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	f040 8094 	bne.w	80016cc <HAL_TIM_PeriodElapsedCallback+0x140>
	{
		//HAL_TIM_Base_Start(&htim5);
		switch (Motormode)
 80015a4:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d002      	beq.n	80015b2 <HAL_TIM_PeriodElapsedCallback+0x26>
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d007      	beq.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0x34>
		case Pos:
			Encount = EncoderPosCount(&htim2);
			break;

		default:
			break;
 80015b0:	e00d      	b.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x42>
			Encount = EncoderCount(&htim2);
 80015b2:	486a      	ldr	r0, [pc, #424]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80015b4:	f7ff fd10 	bl	8000fd8 <EncoderCount>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b69      	ldr	r3, [pc, #420]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80015bc:	601a      	str	r2, [r3, #0]
			break;
 80015be:	e006      	b.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x42>
			Encount = EncoderPosCount(&htim2);
 80015c0:	4866      	ldr	r0, [pc, #408]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80015c2:	f7ff fd1c 	bl	8000ffe <EncoderPosCount>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b65      	ldr	r3, [pc, #404]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80015ca:	601a      	str	r2, [r3, #0]
			break;
 80015cc:	bf00      	nop
		}

		Pwmduty = Calibrated_PID(&Encount);
 80015ce:	4864      	ldr	r0, [pc, #400]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80015d0:	f7ff fbde 	bl	8000d90 <Calibrated_PID>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015d8:	601a      	str	r2, [r3, #0]
		if (Pwmduty < -45) Pwmduty = -45;
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 80015e2:	da03      	bge.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x60>
 80015e4:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015e6:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80015ea:	601a      	str	r2, [r3, #0]
		if (Pwmduty > 45) Pwmduty = 45;
 80015ec:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b2d      	cmp	r3, #45	; 0x2d
 80015f2:	dd02      	ble.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x6e>
 80015f4:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015f6:	222d      	movs	r2, #45	; 0x2d
 80015f8:	601a      	str	r2, [r3, #0]


		float calibmea = 0;
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
		switch (Motormode)
 8001600:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d002      	beq.n	800160e <HAL_TIM_PeriodElapsedCallback+0x82>
 8001608:	2b02      	cmp	r3, #2
 800160a:	d00e      	beq.n	800162a <HAL_TIM_PeriodElapsedCallback+0x9e>
			break;
		case Pos:
			calibmea = Encount/gainp; ///40.0;
			break;
		default:
			break;
 800160c:	e01b      	b.n	8001646 <HAL_TIM_PeriodElapsedCallback+0xba>
			calibmea = Encount/gainv;    //*(5.0/6.0);
 800160e:	4b54      	ldr	r3, [pc, #336]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001624:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001628:	e00d      	b.n	8001646 <HAL_TIM_PeriodElapsedCallback+0xba>
			calibmea = Encount/gainp; ///40.0;
 800162a:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001636:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001640:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001644:	bf00      	nop
		}

		realtime = (float)((HAL_GetTick() - starttick)/1000.0);
 8001646:	f001 f9e7 	bl	8002a18 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	4b48      	ldr	r3, [pc, #288]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff16 	bl	8000484 <__aeabi_ui2d>
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b45      	ldr	r3, [pc, #276]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800165e:	f7ff f8b5 	bl	80007cc <__aeabi_ddiv>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	4618      	mov	r0, r3
 8001668:	4621      	mov	r1, r4
 800166a:	f7ff f9bf 	bl	80009ec <__aeabi_d2f>
 800166e:	4602      	mov	r2, r0
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001672:	601a      	str	r2, [r3, #0]

		txack = 1; txnak = 0;
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
		if (falsetransmit == 2)
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d10f      	bne.n	80016a8 <HAL_TIM_PeriodElapsedCallback+0x11c>
		{
			float  b = 522.2, c = 41.3;
 8001688:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	4b3f      	ldr	r3, [pc, #252]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800168e:	60bb      	str	r3, [r7, #8]
			TransmitData(realtime, b, c);
 8001690:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ed97 1a02 	vldr	s2, [r7, #8]
 800169a:	edd7 0a03 	vldr	s1, [r7, #12]
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	f7ff fd57 	bl	8001154 <TransmitData>
 80016a6:	e011      	b.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x140>
		}
		else
		{
			TransmitAndHandshake(InBuffer, realtime, calibmea, Pwmduty);
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	ee07 3a10 	vmov	s14, r3
 80016b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80016ba:	eeb0 1a47 	vmov.f32	s2, s14
 80016be:	edd7 0a05 	vldr	s1, [r7, #20]
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	4832      	ldr	r0, [pc, #200]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80016c8:	f7ff fd9e 	bl	8001208 <TransmitAndHandshake>
		//uint32_t gettime = __HAL_TIM_GET_COUNTER(&htim5);
		//__HAL_TIM_SET_COUNTER(&htim5,0);
	}


	if (__HAL_TIM_GET_IT_SOURCE(&htim6,TIM_IT_UPDATE))
 80016cc:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d137      	bne.n	800174a <HAL_TIM_PeriodElapsedCallback+0x1be>
	{
//		HAL_TIM_Base_Start(&htim5);
		float calibmea = 0;
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
		switch (Motormode)
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d002      	beq.n	80016ee <HAL_TIM_PeriodElapsedCallback+0x162>
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d00e      	beq.n	800170a <HAL_TIM_PeriodElapsedCallback+0x17e>
			break;
		case Pos:
			calibmea = Encount/gainp; ///40.0;
			break;
		default:
			break;
 80016ec:	e01b      	b.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x19a>
			calibmea = Encount/gainv;    //*(5.0/6.0);
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001704:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8001708:	e00d      	b.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x19a>
			calibmea = Encount/gainp; ///40.0;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001718:	ed93 7a00 	vldr	s14, [r3]
 800171c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001720:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8001724:	bf00      	nop
		}
		TransmitAndHandshake(InBuffer, realtime, calibmea, Pwmduty);
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	ee07 3a10 	vmov	s14, r3
 8001734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001738:	eeb0 1a47 	vmov.f32	s2, s14
 800173c:	edd7 0a04 	vldr	s1, [r7, #16]
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	4812      	ldr	r0, [pc, #72]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001746:	f7ff fd5f 	bl	8001208 <TransmitAndHandshake>
//		HAL_TIM_Base_Stop(&htim5);
//		uint32_t gettime = __HAL_TIM_GET_COUNTER(&htim5);
//		__HAL_TIM_SET_COUNTER(&htim5,0);

	}
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	20000084 	.word	0x20000084
 8001758:	2000000d 	.word	0x2000000d
 800175c:	20000744 	.word	0x20000744
 8001760:	20000070 	.word	0x20000070
 8001764:	20000074 	.word	0x20000074
 8001768:	20000004 	.word	0x20000004
 800176c:	20000008 	.word	0x20000008
 8001770:	20000058 	.word	0x20000058
 8001774:	408f4000 	.word	0x408f4000
 8001778:	20000060 	.word	0x20000060
 800177c:	20000000 	.word	0x20000000
 8001780:	2000004c 	.word	0x2000004c
 8001784:	20000054 	.word	0x20000054
 8001788:	44028ccd 	.word	0x44028ccd
 800178c:	42253333 	.word	0x42253333
 8001790:	20000078 	.word	0x20000078
 8001794:	200006f0 	.word	0x200006f0

08001798 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(&hlpuart1) == HAL_UART_ERROR_PE)
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <HAL_UART_ErrorCallback+0x24>)
 80017a2:	f004 ffeb 	bl	800677c <HAL_UART_GetError>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d102      	bne.n	80017b2 <HAL_UART_ErrorCallback+0x1a>
	{
		rxnak = 1;
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_UART_ErrorCallback+0x28>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
	}
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200005d8 	.word	0x200005d8
 80017c0:	2000004e 	.word	0x2000004e

080017c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	if (ReceiveAck(Buffer))
 80017cc:	48b5      	ldr	r0, [pc, #724]	; (8001aa4 <HAL_UART_RxCpltCallback+0x2e0>)
 80017ce:	f7ff fdd9 	bl	8001384 <ReceiveAck>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_UART_RxCpltCallback+0x20>
	{
		HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 80017d8:	2207      	movs	r2, #7
 80017da:	49b2      	ldr	r1, [pc, #712]	; (8001aa4 <HAL_UART_RxCpltCallback+0x2e0>)
 80017dc:	48b2      	ldr	r0, [pc, #712]	; (8001aa8 <HAL_UART_RxCpltCallback+0x2e4>)
 80017de:	f004 fd85 	bl	80062ec <HAL_UART_Receive_IT>
		return;
 80017e2:	e15b      	b.n	8001a9c <HAL_UART_RxCpltCallback+0x2d8>
	}

	if (falsetransmit == 1)
 80017e4:	4bb1      	ldr	r3, [pc, #708]	; (8001aac <HAL_UART_RxCpltCallback+0x2e8>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d12e      	bne.n	800184a <HAL_UART_RxCpltCallback+0x86>
	{
		uint8_t nak = Nak, stx = STX, etx = ETX;
 80017ec:	23f0      	movs	r3, #240	; 0xf0
 80017ee:	74fb      	strb	r3, [r7, #19]
 80017f0:	23fe      	movs	r3, #254	; 0xfe
 80017f2:	74bb      	strb	r3, [r7, #18]
 80017f4:	23ff      	movs	r3, #255	; 0xff
 80017f6:	747b      	strb	r3, [r7, #17]
		uint8_t dummy[4] = {1,0,0,0};
 80017f8:	2301      	movs	r3, #1
 80017fa:	733b      	strb	r3, [r7, #12]
 80017fc:	2300      	movs	r3, #0
 80017fe:	737b      	strb	r3, [r7, #13]
 8001800:	2300      	movs	r3, #0
 8001802:	73bb      	strb	r3, [r7, #14]
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&hlpuart1, &stx, 1, 1000);
 8001808:	f107 0112 	add.w	r1, r7, #18
 800180c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001810:	2201      	movs	r2, #1
 8001812:	48a5      	ldr	r0, [pc, #660]	; (8001aa8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001814:	f004 fcd2 	bl	80061bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &nak, 1, 1000);
 8001818:	f107 0113 	add.w	r1, r7, #19
 800181c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001820:	2201      	movs	r2, #1
 8001822:	48a1      	ldr	r0, [pc, #644]	; (8001aa8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001824:	f004 fcca 	bl	80061bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, dummy, 4, 1000);
 8001828:	f107 010c 	add.w	r1, r7, #12
 800182c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001830:	2204      	movs	r2, #4
 8001832:	489d      	ldr	r0, [pc, #628]	; (8001aa8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001834:	f004 fcc2 	bl	80061bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &etx, 1, 1000);
 8001838:	f107 0111 	add.w	r1, r7, #17
 800183c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001840:	2201      	movs	r2, #1
 8001842:	4899      	ldr	r0, [pc, #612]	; (8001aa8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001844:	f004 fcba 	bl	80061bc <HAL_UART_Transmit>
 8001848:	e003      	b.n	8001852 <HAL_UART_RxCpltCallback+0x8e>
	}
	else
	{
		ReceiveAndHandshake(Buffer, Instruction);
 800184a:	4999      	ldr	r1, [pc, #612]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 800184c:	4895      	ldr	r0, [pc, #596]	; (8001aa4 <HAL_UART_RxCpltCallback+0x2e0>)
 800184e:	f7ff fd31 	bl	80012b4 <ReceiveAndHandshake>
	}
	//EchoReceived(Buffer);


	switch (*Instruction)
 8001852:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	3b11      	subs	r3, #17
 8001858:	2b20      	cmp	r3, #32
 800185a:	f200 811a 	bhi.w	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <HAL_UART_RxCpltCallback+0xa0>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	080018e9 	.word	0x080018e9
 8001868:	0800192b 	.word	0x0800192b
 800186c:	08001953 	.word	0x08001953
 8001870:	08001965 	.word	0x08001965
 8001874:	08001977 	.word	0x08001977
 8001878:	08001a93 	.word	0x08001a93
 800187c:	080019ed 	.word	0x080019ed
 8001880:	08001a07 	.word	0x08001a07
 8001884:	08001a21 	.word	0x08001a21
 8001888:	08001a93 	.word	0x08001a93
 800188c:	08001a93 	.word	0x08001a93
 8001890:	08001a93 	.word	0x08001a93
 8001894:	08001a93 	.word	0x08001a93
 8001898:	08001a93 	.word	0x08001a93
 800189c:	08001a93 	.word	0x08001a93
 80018a0:	08001a93 	.word	0x08001a93
 80018a4:	08001a93 	.word	0x08001a93
 80018a8:	08001a93 	.word	0x08001a93
 80018ac:	08001a93 	.word	0x08001a93
 80018b0:	08001a93 	.word	0x08001a93
 80018b4:	08001a93 	.word	0x08001a93
 80018b8:	08001a93 	.word	0x08001a93
 80018bc:	08001a93 	.word	0x08001a93
 80018c0:	08001a93 	.word	0x08001a93
 80018c4:	08001a93 	.word	0x08001a93
 80018c8:	08001a93 	.word	0x08001a93
 80018cc:	08001a93 	.word	0x08001a93
 80018d0:	08001a93 	.word	0x08001a93
 80018d4:	08001a93 	.word	0x08001a93
 80018d8:	08001a93 	.word	0x08001a93
 80018dc:	08001a93 	.word	0x08001a93
 80018e0:	08001a93 	.word	0x08001a93
 80018e4:	08001a3b 	.word	0x08001a3b
	{
	case Run:
		if (Motorstatus == Stopped)
 80018e8:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	f040 80c3 	bne.w	8001a78 <HAL_UART_RxCpltCallback+0x2b4>
		{
			Pwmduty = 0;
 80018f2:	4b71      	ldr	r3, [pc, #452]	; (8001ab8 <HAL_UART_RxCpltCallback+0x2f4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
			ClearEncoderCount(&htim2);
 80018f8:	4870      	ldr	r0, [pc, #448]	; (8001abc <HAL_UART_RxCpltCallback+0x2f8>)
 80018fa:	f7ff fb8f 	bl	800101c <ClearEncoderCount>
			ClearPIDController();
 80018fe:	f7ff fb45 	bl	8000f8c <ClearPIDController>

			HAL_TIM_Base_Start_IT(&htim4);
 8001902:	486f      	ldr	r0, [pc, #444]	; (8001ac0 <HAL_UART_RxCpltCallback+0x2fc>)
 8001904:	f003 f9e6 	bl	8004cd4 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8001908:	2100      	movs	r1, #0
 800190a:	486c      	ldr	r0, [pc, #432]	; (8001abc <HAL_UART_RxCpltCallback+0x2f8>)
 800190c:	f003 fbc4 	bl	8005098 <HAL_TIM_Encoder_Start>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001910:	2100      	movs	r1, #0
 8001912:	486c      	ldr	r0, [pc, #432]	; (8001ac4 <HAL_UART_RxCpltCallback+0x300>)
 8001914:	f003 fa68 	bl	8004de8 <HAL_TIM_PWM_Start>
			starttick = HAL_GetTick();
 8001918:	f001 f87e 	bl	8002a18 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_UART_RxCpltCallback+0x304>)
 8001920:	601a      	str	r2, [r3, #0]
			Motorstatus = Running;
 8001922:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]

		}
		break;
 8001928:	e0a6      	b.n	8001a78 <HAL_UART_RxCpltCallback+0x2b4>
	case Stop:
		if (Motorstatus == Running)
 800192a:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	f040 80a4 	bne.w	8001a7c <HAL_UART_RxCpltCallback+0x2b8>
		{
			HAL_TIM_Base_Stop_IT(&htim4);
 8001934:	4862      	ldr	r0, [pc, #392]	; (8001ac0 <HAL_UART_RxCpltCallback+0x2fc>)
 8001936:	f003 f9f7 	bl	8004d28 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_1);
 800193a:	2100      	movs	r1, #0
 800193c:	485f      	ldr	r0, [pc, #380]	; (8001abc <HAL_UART_RxCpltCallback+0x2f8>)
 800193e:	f003 fbe2 	bl	8005106 <HAL_TIM_Encoder_Stop>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001942:	2100      	movs	r1, #0
 8001944:	485f      	ldr	r0, [pc, #380]	; (8001ac4 <HAL_UART_RxCpltCallback+0x300>)
 8001946:	f003 faa7 	bl	8004e98 <HAL_TIM_PWM_Stop>

			Motorstatus = Stopped;
 800194a:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001950:	e094      	b.n	8001a7c <HAL_UART_RxCpltCallback+0x2b8>
	case Velocity:
		if (Motorstatus == Stopped)
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b02      	cmp	r3, #2
 8001958:	f040 8092 	bne.w	8001a80 <HAL_UART_RxCpltCallback+0x2bc>
		{
			Motormode = Vec;
 800195c:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_UART_RxCpltCallback+0x308>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001962:	e08d      	b.n	8001a80 <HAL_UART_RxCpltCallback+0x2bc>
	case Position:
		if (Motorstatus == Stopped)
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b02      	cmp	r3, #2
 800196a:	f040 808b 	bne.w	8001a84 <HAL_UART_RxCpltCallback+0x2c0>
		{
			Motormode = Pos;
 800196e:	4b57      	ldr	r3, [pc, #348]	; (8001acc <HAL_UART_RxCpltCallback+0x308>)
 8001970:	2202      	movs	r2, #2
 8001972:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001974:	e086      	b.n	8001a84 <HAL_UART_RxCpltCallback+0x2c0>
	case ctrlSetpoint:
		{
			float calibset = 0;
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
			switch (Motormode)
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_UART_RxCpltCallback+0x308>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d002      	beq.n	800198a <HAL_UART_RxCpltCallback+0x1c6>
 8001984:	2b02      	cmp	r3, #2
 8001986:	d018      	beq.n	80019ba <HAL_UART_RxCpltCallback+0x1f6>
			case Pos:
				setpoint = /*(40.0)**/ gainp*ReceiveDataofHeader(Instruction);
				calibset = setpoint/gainp;   ///40.0;
				break;
			default:
				break;
 8001988:	e02f      	b.n	80019ea <HAL_UART_RxCpltCallback+0x226>
				setpoint = /*(6.0/5.0)**/ gainv* ReceiveDataofHeader(Instruction);
 800198a:	4849      	ldr	r0, [pc, #292]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 800198c:	f7ff fd42 	bl	8001414 <ReceiveDataofHeader>
 8001990:	eeb0 7a40 	vmov.f32	s14, s0
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <HAL_UART_RxCpltCallback+0x30c>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	4b4d      	ldr	r3, [pc, #308]	; (8001ad4 <HAL_UART_RxCpltCallback+0x310>)
 80019a0:	edc3 7a00 	vstr	s15, [r3]
				calibset = setpoint/gainv;//*(5.0/6.0);
 80019a4:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_UART_RxCpltCallback+0x310>)
 80019a6:	edd3 6a00 	vldr	s13, [r3]
 80019aa:	4b49      	ldr	r3, [pc, #292]	; (8001ad0 <HAL_UART_RxCpltCallback+0x30c>)
 80019ac:	ed93 7a00 	vldr	s14, [r3]
 80019b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b4:	edc7 7a05 	vstr	s15, [r7, #20]
				break;
 80019b8:	e017      	b.n	80019ea <HAL_UART_RxCpltCallback+0x226>
				setpoint = /*(40.0)**/ gainp*ReceiveDataofHeader(Instruction);
 80019ba:	483d      	ldr	r0, [pc, #244]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 80019bc:	f7ff fd2a 	bl	8001414 <ReceiveDataofHeader>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <HAL_UART_RxCpltCallback+0x314>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ce:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <HAL_UART_RxCpltCallback+0x310>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
				calibset = setpoint/gainp;   ///40.0;
 80019d4:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_UART_RxCpltCallback+0x310>)
 80019d6:	edd3 6a00 	vldr	s13, [r3]
 80019da:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <HAL_UART_RxCpltCallback+0x314>)
 80019dc:	ed93 7a00 	vldr	s14, [r3]
 80019e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e4:	edc7 7a05 	vstr	s15, [r7, #20]
				break;
 80019e8:	bf00      	nop
			}
		}
		break;
 80019ea:	e052      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
			//realtime = ReceiveDataofHeader(Buffer);
			//TransmitWithHeader(Realtime, 0);
		}
		break;
	case Kp:
		if (Motorstatus == Stopped)
 80019ec:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d149      	bne.n	8001a88 <HAL_UART_RxCpltCallback+0x2c4>
		{
			kp = ReceiveDataofHeader(Instruction);
 80019f4:	482e      	ldr	r0, [pc, #184]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 80019f6:	f7ff fd0d 	bl	8001414 <ReceiveDataofHeader>
 80019fa:	eef0 7a40 	vmov.f32	s15, s0
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_UART_RxCpltCallback+0x318>)
 8001a00:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001a04:	e040      	b.n	8001a88 <HAL_UART_RxCpltCallback+0x2c4>
	case Ki:
		if (Motorstatus == Stopped)
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d13e      	bne.n	8001a8c <HAL_UART_RxCpltCallback+0x2c8>
		{
			ki = ReceiveDataofHeader(Instruction);
 8001a0e:	4828      	ldr	r0, [pc, #160]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a10:	f7ff fd00 	bl	8001414 <ReceiveDataofHeader>
 8001a14:	eef0 7a40 	vmov.f32	s15, s0
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_UART_RxCpltCallback+0x31c>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001a1e:	e035      	b.n	8001a8c <HAL_UART_RxCpltCallback+0x2c8>
	case Kd:
		if (Motorstatus == Stopped)
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d133      	bne.n	8001a90 <HAL_UART_RxCpltCallback+0x2cc>
		{
			kd = ReceiveDataofHeader(Instruction);
 8001a28:	4821      	ldr	r0, [pc, #132]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a2a:	f7ff fcf3 	bl	8001414 <ReceiveDataofHeader>
 8001a2e:	eef0 7a40 	vmov.f32	s15, s0
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_UART_RxCpltCallback+0x320>)
 8001a34:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001a38:	e02a      	b.n	8001a90 <HAL_UART_RxCpltCallback+0x2cc>
			}

		}
		break;*/
	case Calib:
		if (Motorstatus == Stopped)
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d118      	bne.n	8001a74 <HAL_UART_RxCpltCallback+0x2b0>
		{
			switch (Motormode)
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_UART_RxCpltCallback+0x308>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d002      	beq.n	8001a50 <HAL_UART_RxCpltCallback+0x28c>
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d009      	beq.n	8001a62 <HAL_UART_RxCpltCallback+0x29e>
				break;
			case Pos:
				gainp = ReceiveDataofHeader(Instruction);
				break;
			default:
				break;
 8001a4e:	e012      	b.n	8001a76 <HAL_UART_RxCpltCallback+0x2b2>
				gainv = ReceiveDataofHeader(Instruction);
 8001a50:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a52:	f7ff fcdf 	bl	8001414 <ReceiveDataofHeader>
 8001a56:	eef0 7a40 	vmov.f32	s15, s0
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_UART_RxCpltCallback+0x30c>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001a60:	e009      	b.n	8001a76 <HAL_UART_RxCpltCallback+0x2b2>
				gainp = ReceiveDataofHeader(Instruction);
 8001a62:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <HAL_UART_RxCpltCallback+0x2ec>)
 8001a64:	f7ff fcd6 	bl	8001414 <ReceiveDataofHeader>
 8001a68:	eef0 7a40 	vmov.f32	s15, s0
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_UART_RxCpltCallback+0x314>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001a72:	e000      	b.n	8001a76 <HAL_UART_RxCpltCallback+0x2b2>
			}
		}
 8001a74:	bf00      	nop
		break;
 8001a76:	e00c      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
		break;
 8001a78:	bf00      	nop
 8001a7a:	e00a      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
		break;
 8001a7c:	bf00      	nop
 8001a7e:	e008      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
		break;
 8001a80:	bf00      	nop
 8001a82:	e006      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
		break;
 8001a84:	bf00      	nop
 8001a86:	e004      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
		break;
 8001a88:	bf00      	nop
 8001a8a:	e002      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
		break;
 8001a8c:	bf00      	nop
 8001a8e:	e000      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x2ce>
		break;
 8001a90:	bf00      	nop
	}

	HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 8001a92:	2207      	movs	r2, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	; (8001aa4 <HAL_UART_RxCpltCallback+0x2e0>)
 8001a96:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a98:	f004 fc28 	bl	80062ec <HAL_UART_Receive_IT>

}
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000730 	.word	0x20000730
 8001aa8:	200005d8 	.word	0x200005d8
 8001aac:	20000054 	.word	0x20000054
 8001ab0:	2000073c 	.word	0x2000073c
 8001ab4:	2000000c 	.word	0x2000000c
 8001ab8:	20000074 	.word	0x20000074
 8001abc:	20000744 	.word	0x20000744
 8001ac0:	20000084 	.word	0x20000084
 8001ac4:	20000598 	.word	0x20000598
 8001ac8:	20000058 	.word	0x20000058
 8001acc:	2000000d 	.word	0x2000000d
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	2000005c 	.word	0x2000005c
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000064 	.word	0x20000064
 8001ae0:	20000068 	.word	0x20000068
 8001ae4:	2000006c 	.word	0x2000006c

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aee:	f000 ff2e 	bl	800294e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af2:	f000 f83b 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af6:	f000 fb69 	bl	80021cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001afa:	f000 f8c1 	bl	8001c80 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001afe:	f000 f905 	bl	8001d0c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001b02:	f000 f951 	bl	8001da8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001b06:	f000 f99b 	bl	8001e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b0a:	f000 f9ed 	bl	8001ee8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b0e:	f000 fa61 	bl	8001fd4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001b12:	f000 faad 	bl	8002070 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001b16:	f000 faf9 	bl	800210c <MX_TIM6_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b1a:	f000 fb2d 	bl	8002178 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Init(&htim2);
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <main+0x6c>)
 8001b20:	f003 f8ac 	bl	8004c7c <HAL_TIM_Base_Init>
  HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 8001b24:	2207      	movs	r2, #7
 8001b26:	490c      	ldr	r1, [pc, #48]	; (8001b58 <main+0x70>)
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <main+0x74>)
 8001b2a:	f004 fbdf 	bl	80062ec <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4909      	ldr	r1, [pc, #36]	; (8001b58 <main+0x70>)
 8001b32:	480a      	ldr	r0, [pc, #40]	; (8001b5c <main+0x74>)
 8001b34:	f004 fbda 	bl	80062ec <HAL_UART_Receive_IT>
	  PWMGen2(&Pwmduty, &htim3, TIM_CHANNEL_1, GPIOD, GPIO_PIN_0, GPIOD, GPIO_PIN_1);
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <main+0x78>)
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2301      	movs	r3, #1
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <main+0x78>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <main+0x7c>)
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <main+0x80>)
 8001b4c:	f7ff fa74 	bl	8001038 <PWMGen2>
	  HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 8001b50:	e7ed      	b.n	8001b2e <main+0x46>
 8001b52:	bf00      	nop
 8001b54:	20000744 	.word	0x20000744
 8001b58:	20000730 	.word	0x20000730
 8001b5c:	200005d8 	.word	0x200005d8
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	20000598 	.word	0x20000598
 8001b68:	20000074 	.word	0x20000074

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0bc      	sub	sp, #240	; 0xf0
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b76:	2244      	movs	r2, #68	; 0x44
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f006 feec 	bl	8008958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2294      	movs	r2, #148	; 0x94
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 fede 	bl	8008958 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f001 fc03 	bl	80033a8 <HAL_PWREx_ControlVoltageScaling>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001ba8:	f000 fbde 	bl	8002368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bb2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001bcc:	231e      	movs	r3, #30
 8001bce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fca1 	bl	8003530 <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001bf4:	f000 fbb8 	bl	8002368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 f874 	bl	8003d0c <HAL_RCC_ClockConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c2a:	f000 fb9d 	bl	8002368 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001c2e:	f242 0325 	movw	r3, #8229	; 0x2025
 8001c32:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c34:	2300      	movs	r3, #0
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c44:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001c46:	2303      	movs	r3, #3
 8001c48:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001c4e:	230c      	movs	r3, #12
 8001c50:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001c52:	2302      	movs	r3, #2
 8001c54:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c62:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fb00 	bl	800426c <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001c72:	f000 fb79 	bl	8002368 <Error_Handler>
  }
}
 8001c76:	bf00      	nop
 8001c78:	37f0      	adds	r7, #240	; 0xf0
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001c86:	4a20      	ldr	r2, [pc, #128]	; (8001d08 <MX_LPUART1_UART_Init+0x88>)
 8001c88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c98:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_ODD;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001ca2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ca6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001cce:	f004 fa25 	bl	800611c <HAL_UART_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001cd8:	f000 fb46 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001ce0:	f006 fab3 	bl	800824a <HAL_UARTEx_SetTxFifoThreshold>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_LPUART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001cea:	f000 fb3d 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_LPUART1_UART_Init+0x84>)
 8001cf2:	f006 fae8 	bl	80082c6 <HAL_UARTEx_SetRxFifoThreshold>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8001cfc:	f000 fb34 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200005d8 	.word	0x200005d8
 8001d08:	40008000 	.word	0x40008000

08001d0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d12:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <MX_USART1_UART_Init+0x98>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d58:	4811      	ldr	r0, [pc, #68]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d5a:	f004 f9df 	bl	800611c <HAL_UART_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001d64:	f000 fb00 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d6c:	f006 fa6d 	bl	800824a <HAL_UARTEx_SetTxFifoThreshold>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001d76:	f000 faf7 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4808      	ldr	r0, [pc, #32]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d7e:	f006 faa2 	bl	80082c6 <HAL_UARTEx_SetRxFifoThreshold>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001d88:	f000 faee 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_USART1_UART_Init+0x94>)
 8001d8e:	f006 fa23 	bl	80081d8 <HAL_UARTEx_DisableFifoMode>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001d98:	f000 fae6 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000664 	.word	0x20000664
 8001da4:	40013800 	.word	0x40013800

08001da8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001dae:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <MX_USART3_UART_Init+0x94>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001df0:	4811      	ldr	r0, [pc, #68]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001df2:	f004 f993 	bl	800611c <HAL_UART_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001dfc:	f000 fab4 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e00:	2100      	movs	r1, #0
 8001e02:	480d      	ldr	r0, [pc, #52]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001e04:	f006 fa21 	bl	800824a <HAL_UARTEx_SetTxFifoThreshold>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e0e:	f000 faab 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e12:	2100      	movs	r1, #0
 8001e14:	4808      	ldr	r0, [pc, #32]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001e16:	f006 fa56 	bl	80082c6 <HAL_UARTEx_SetRxFifoThreshold>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e20:	f000 faa2 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_USART3_UART_Init+0x90>)
 8001e26:	f006 f9d7 	bl	80081d8 <HAL_UARTEx_DisableFifoMode>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e30:	f000 fa9a 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200000c4 	.word	0x200000c4
 8001e3c:	40004800 	.word	0x40004800

08001e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	2224      	movs	r2, #36	; 0x24
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f006 fd82 	bl	8008958 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	463b      	mov	r3, r7
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MX_TIM2_Init+0xa4>)
 8001e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MX_TIM2_Init+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <MX_TIM2_Init+0xa4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_TIM2_Init+0xa4>)
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MX_TIM2_Init+0xa4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_TIM2_Init+0xa4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e86:	2303      	movs	r3, #3
 8001e88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <MX_TIM2_Init+0xa4>)
 8001eb2:	f003 f85f 	bl	8004f74 <HAL_TIM_Encoder_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001ebc:	f000 fa54 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_TIM2_Init+0xa4>)
 8001ece:	f004 f8ab 	bl	8006028 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001ed8:	f000 fa46 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	; 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000744 	.word	0x20000744

08001ee8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f08:	463b      	mov	r3, r7
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	615a      	str	r2, [r3, #20]
 8001f18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f1c:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <MX_TIM3_Init+0xe8>)
 8001f1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f20:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f2e:	2263      	movs	r2, #99	; 0x63
 8001f30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f3e:	4823      	ldr	r0, [pc, #140]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f40:	f002 fe9c 	bl	8004c7c <HAL_TIM_Base_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f4a:	f000 fa0d 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	481c      	ldr	r0, [pc, #112]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f5c:	f003 fb52 	bl	8005604 <HAL_TIM_ConfigClockSource>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f66:	f000 f9ff 	bl	8002368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f6a:	4818      	ldr	r0, [pc, #96]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f6c:	f002 ff07 	bl	8004d7e <HAL_TIM_PWM_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f76:	f000 f9f7 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4619      	mov	r1, r3
 8001f88:	4810      	ldr	r0, [pc, #64]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001f8a:	f004 f84d 	bl	8006028 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f94:	f000 f9e8 	bl	8002368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f98:	2360      	movs	r3, #96	; 0x60
 8001f9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa8:	463b      	mov	r3, r7
 8001faa:	2200      	movs	r2, #0
 8001fac:	4619      	mov	r1, r3
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001fb0:	f003 fa10 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001fba:	f000 f9d5 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fbe:	4803      	ldr	r0, [pc, #12]	; (8001fcc <MX_TIM3_Init+0xe4>)
 8001fc0:	f000 fb64 	bl	800268c <HAL_TIM_MspPostInit>

}
 8001fc4:	bf00      	nop
 8001fc6:	3738      	adds	r7, #56	; 0x38
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000598 	.word	0x20000598
 8001fd0:	40000400 	.word	0x40000400

08001fd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_TIM4_Init+0x94>)
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <MX_TIM4_Init+0x98>)
 8001ff6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_TIM4_Init+0x94>)
 8001ffa:	2227      	movs	r2, #39	; 0x27
 8001ffc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_TIM4_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_TIM4_Init+0x94>)
 8002006:	f240 32e7 	movw	r2, #999	; 0x3e7
 800200a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <MX_TIM4_Init+0x94>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_TIM4_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002018:	4813      	ldr	r0, [pc, #76]	; (8002068 <MX_TIM4_Init+0x94>)
 800201a:	f002 fe2f 	bl	8004c7c <HAL_TIM_Base_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002024:	f000 f9a0 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <MX_TIM4_Init+0x94>)
 8002036:	f003 fae5 	bl	8005604 <HAL_TIM_ConfigClockSource>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002040:	f000 f992 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_TIM4_Init+0x94>)
 8002052:	f003 ffe9 	bl	8006028 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800205c:	f000 f984 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000084 	.word	0x20000084
 800206c:	40000800 	.word	0x40000800

08002070 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <MX_TIM5_Init+0x94>)
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <MX_TIM5_Init+0x98>)
 8002092:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_TIM5_Init+0x94>)
 8002096:	2227      	movs	r2, #39	; 0x27
 8002098:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_TIM5_Init+0x94>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_TIM5_Init+0x94>)
 80020a2:	f04f 32ff 	mov.w	r2, #4294967295
 80020a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <MX_TIM5_Init+0x94>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <MX_TIM5_Init+0x94>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020b4:	4813      	ldr	r0, [pc, #76]	; (8002104 <MX_TIM5_Init+0x94>)
 80020b6:	f002 fde1 	bl	8004c7c <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80020c0:	f000 f952 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	4619      	mov	r1, r3
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <MX_TIM5_Init+0x94>)
 80020d2:	f003 fa97 	bl	8005604 <HAL_TIM_ConfigClockSource>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80020dc:	f000 f944 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_TIM5_Init+0x94>)
 80020ee:	f003 ff9b 	bl	8006028 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80020f8:	f000 f936 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000558 	.word	0x20000558
 8002108:	40000c00 	.word	0x40000c00

0800210c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_TIM6_Init+0x64>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_TIM6_Init+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_TIM6_Init+0x64>)
 8002124:	2227      	movs	r2, #39	; 0x27
 8002126:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_TIM6_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <MX_TIM6_Init+0x64>)
 8002130:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002134:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_TIM6_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <MX_TIM6_Init+0x64>)
 800213e:	f002 fd9d 	bl	8004c7c <HAL_TIM_Base_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002148:	f000 f90e 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_TIM6_Init+0x64>)
 800215a:	f003 ff65 	bl	8006028 <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002164:	f000 f900 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200006f0 	.word	0x200006f0
 8002174:	40001000 	.word	0x40001000

08002178 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800217e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002182:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002186:	2206      	movs	r2, #6
 8002188:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800218c:	2202      	movs	r2, #2
 800218e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002192:	2201      	movs	r2, #1
 8002194:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021b4:	4804      	ldr	r0, [pc, #16]	; (80021c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80021b6:	f000 ff8f 	bl	80030d8 <HAL_PCD_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80021c0:	f000 f8d2 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000150 	.word	0x20000150

080021cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e2:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <MX_GPIO_Init+0x184>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a5a      	ldr	r2, [pc, #360]	; (8002350 <MX_GPIO_Init+0x184>)
 80021e8:	f043 0310 	orr.w	r3, r3, #16
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b58      	ldr	r3, [pc, #352]	; (8002350 <MX_GPIO_Init+0x184>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	4b55      	ldr	r3, [pc, #340]	; (8002350 <MX_GPIO_Init+0x184>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4a54      	ldr	r2, [pc, #336]	; (8002350 <MX_GPIO_Init+0x184>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002206:	4b52      	ldr	r3, [pc, #328]	; (8002350 <MX_GPIO_Init+0x184>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <MX_GPIO_Init+0x184>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	4a4e      	ldr	r2, [pc, #312]	; (8002350 <MX_GPIO_Init+0x184>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <MX_GPIO_Init+0x184>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <MX_GPIO_Init+0x184>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	4a48      	ldr	r2, [pc, #288]	; (8002350 <MX_GPIO_Init+0x184>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <MX_GPIO_Init+0x184>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <MX_GPIO_Init+0x184>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a42      	ldr	r2, [pc, #264]	; (8002350 <MX_GPIO_Init+0x184>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <MX_GPIO_Init+0x184>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <MX_GPIO_Init+0x184>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a3c      	ldr	r2, [pc, #240]	; (8002350 <MX_GPIO_Init+0x184>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <MX_GPIO_Init+0x184>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <MX_GPIO_Init+0x184>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a36      	ldr	r2, [pc, #216]	; (8002350 <MX_GPIO_Init+0x184>)
 8002278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <MX_GPIO_Init+0x184>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800228a:	f001 f941 	bl	8003510 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002294:	482f      	ldr	r0, [pc, #188]	; (8002354 <MX_GPIO_Init+0x188>)
 8002296:	f000 feef 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2120      	movs	r1, #32
 800229e:	482e      	ldr	r0, [pc, #184]	; (8002358 <MX_GPIO_Init+0x18c>)
 80022a0:	f000 feea 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2103      	movs	r1, #3
 80022a8:	482c      	ldr	r0, [pc, #176]	; (800235c <MX_GPIO_Init+0x190>)
 80022aa:	f000 fee5 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <MX_GPIO_Init+0x194>)
 80022b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022b8:	2302      	movs	r3, #2
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4828      	ldr	r0, [pc, #160]	; (8002364 <MX_GPIO_Init+0x198>)
 80022c4:	f000 fd46 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80022c8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80022cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	481c      	ldr	r0, [pc, #112]	; (8002354 <MX_GPIO_Init+0x188>)
 80022e2:	f000 fd37 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80022e6:	2320      	movs	r3, #32
 80022e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ea:	2301      	movs	r3, #1
 80022ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4619      	mov	r1, r3
 80022fc:	4816      	ldr	r0, [pc, #88]	; (8002358 <MX_GPIO_Init+0x18c>)
 80022fe:	f000 fd29 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002302:	2340      	movs	r3, #64	; 0x40
 8002304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	4810      	ldr	r0, [pc, #64]	; (8002358 <MX_GPIO_Init+0x18c>)
 8002316:	f000 fd1d 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800231a:	2303      	movs	r3, #3
 800231c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	480a      	ldr	r0, [pc, #40]	; (800235c <MX_GPIO_Init+0x190>)
 8002332:	f000 fd0f 	bl	8002d54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	2028      	movs	r0, #40	; 0x28
 800233c:	f000 fc75 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002340:	2028      	movs	r0, #40	; 0x28
 8002342:	f000 fc8e 	bl	8002c62 <HAL_NVIC_EnableIRQ>

}
 8002346:	bf00      	nop
 8002348:	3730      	adds	r7, #48	; 0x30
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	48000400 	.word	0x48000400
 8002358:	48001800 	.word	0x48001800
 800235c:	48000c00 	.word	0x48000c00
 8002360:	10110000 	.word	0x10110000
 8002364:	48000800 	.word	0x48000800

08002368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_MspInit+0x44>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_MspInit+0x44>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6613      	str	r3, [r2, #96]	; 0x60
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_MspInit+0x44>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_MspInit+0x44>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_MspInit+0x44>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_MspInit+0x44>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a50      	ldr	r2, [pc, #320]	; (8002520 <HAL_UART_MspInit+0x160>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d133      	bne.n	800244a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023e2:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_UART_MspInit+0x164>)
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	4a4f      	ldr	r2, [pc, #316]	; (8002524 <HAL_UART_MspInit+0x164>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	65d3      	str	r3, [r2, #92]	; 0x5c
 80023ee:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <HAL_UART_MspInit+0x164>)
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_UART_MspInit+0x164>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	4a49      	ldr	r2, [pc, #292]	; (8002524 <HAL_UART_MspInit+0x164>)
 8002400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_UART_MspInit+0x164>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8002412:	f001 f87d 	bl	8003510 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002416:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002428:	2308      	movs	r3, #8
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800242c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002430:	4619      	mov	r1, r3
 8002432:	483d      	ldr	r0, [pc, #244]	; (8002528 <HAL_UART_MspInit+0x168>)
 8002434:	f000 fc8e 	bl	8002d54 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2101      	movs	r1, #1
 800243c:	2046      	movs	r0, #70	; 0x46
 800243e:	f000 fbf4 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002442:	2046      	movs	r0, #70	; 0x46
 8002444:	f000 fc0d 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002448:	e066      	b.n	8002518 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a37      	ldr	r2, [pc, #220]	; (800252c <HAL_UART_MspInit+0x16c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d133      	bne.n	80024bc <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_UART_MspInit+0x164>)
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	4a32      	ldr	r2, [pc, #200]	; (8002524 <HAL_UART_MspInit+0x164>)
 800245a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245e:	6613      	str	r3, [r2, #96]	; 0x60
 8002460:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_UART_MspInit+0x164>)
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800246c:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_UART_MspInit+0x164>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <HAL_UART_MspInit+0x164>)
 8002472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_UART_MspInit+0x164>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8002484:	f001 f844 	bl	8003510 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002488:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002496:	2303      	movs	r3, #3
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800249a:	2307      	movs	r3, #7
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800249e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a2:	4619      	mov	r1, r3
 80024a4:	4820      	ldr	r0, [pc, #128]	; (8002528 <HAL_UART_MspInit+0x168>)
 80024a6:	f000 fc55 	bl	8002d54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2101      	movs	r1, #1
 80024ae:	2025      	movs	r0, #37	; 0x25
 80024b0:	f000 fbbb 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024b4:	2025      	movs	r0, #37	; 0x25
 80024b6:	f000 fbd4 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 80024ba:	e02d      	b.n	8002518 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_UART_MspInit+0x170>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d128      	bne.n	8002518 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_UART_MspInit+0x164>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_UART_MspInit+0x164>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_UART_MspInit+0x164>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_UART_MspInit+0x164>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_UART_MspInit+0x164>)
 80024e4:	f043 0308 	orr.w	r3, r3, #8
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_UART_MspInit+0x164>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002508:	2307      	movs	r3, #7
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002510:	4619      	mov	r1, r3
 8002512:	4808      	ldr	r0, [pc, #32]	; (8002534 <HAL_UART_MspInit+0x174>)
 8002514:	f000 fc1e 	bl	8002d54 <HAL_GPIO_Init>
}
 8002518:	bf00      	nop
 800251a:	3738      	adds	r7, #56	; 0x38
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40008000 	.word	0x40008000
 8002524:	40021000 	.word	0x40021000
 8002528:	48001800 	.word	0x48001800
 800252c:	40013800 	.word	0x40013800
 8002530:	40004800 	.word	0x40004800
 8002534:	48000c00 	.word	0x48000c00

08002538 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002558:	d128      	bne.n	80025ac <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800258a:	2303      	movs	r3, #3
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800259a:	2301      	movs	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f000 fbd4 	bl	8002d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025ac:	bf00      	nop
 80025ae:	3728      	adds	r7, #40	; 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2c      	ldr	r2, [pc, #176]	; (8002678 <HAL_TIM_Base_MspInit+0xc0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10c      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80025e2:	e044      	b.n	800266e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <HAL_TIM_Base_MspInit+0xc8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d114      	bne.n	8002618 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	4a22      	ldr	r2, [pc, #136]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	201e      	movs	r0, #30
 800260c:	f000 fb0d 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002610:	201e      	movs	r0, #30
 8002612:	f000 fb26 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 8002616:	e02a      	b.n	800266e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_TIM_Base_MspInit+0xcc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10c      	bne.n	800263c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	6593      	str	r3, [r2, #88]	; 0x58
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
}
 800263a:	e018      	b.n	800266e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_TIM_Base_MspInit+0xd0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d113      	bne.n	800266e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 800264c:	f043 0310 	orr.w	r3, r3, #16
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_TIM_Base_MspInit+0xc4>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	2036      	movs	r0, #54	; 0x36
 8002664:	f000 fae1 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002668:	2036      	movs	r0, #54	; 0x36
 800266a:	f000 fafa 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40000400 	.word	0x40000400
 800267c:	40021000 	.word	0x40021000
 8002680:	40000800 	.word	0x40000800
 8002684:	40000c00 	.word	0x40000c00
 8002688:	40001000 	.word	0x40001000

0800268c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_TIM_MspPostInit+0x64>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d11b      	bne.n	80026e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026b4:	f043 0310 	orr.w	r3, r3, #16
 80026b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PE3     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026c6:	2308      	movs	r3, #8
 80026c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	4619      	mov	r1, r3
 80026e0:	4805      	ldr	r0, [pc, #20]	; (80026f8 <HAL_TIM_MspPostInit+0x6c>)
 80026e2:	f000 fb37 	bl	8002d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40021000 	.word	0x40021000
 80026f8:	48001000 	.word	0x48001000

080026fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800271c:	d154      	bne.n	80027c8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272a:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002736:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800273a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002748:	230a      	movs	r3, #10
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4619      	mov	r1, r3
 8002752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002756:	f000 fafd 	bl	8002d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800275a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002772:	f000 faef 	bl	8002d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 800277c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d114      	bne.n	80027c4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6593      	str	r3, [r2, #88]	; 0x58
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80027b2:	f000 fe9d 	bl	80034f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <HAL_PCD_MspInit+0xd4>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80027c2:	e001      	b.n	80027c8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80027c4:	f000 fe94 	bl	80034f0 <HAL_PWREx_EnableVddUSB>
}
 80027c8:	bf00      	nop
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <HardFault_Handler+0x4>

080027e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <MemManage_Handler+0x4>

080027ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002828:	f000 f8e4 	bl	80029f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <TIM4_IRQHandler+0x10>)
 8002836:	f002 fcad 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000084 	.word	0x20000084

08002844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <USART1_IRQHandler+0x10>)
 800284a:	f003 fe27 	bl	800649c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000664 	.word	0x20000664

08002858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800285c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002860:	f000 fc22 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <TIM6_DAC_IRQHandler+0x10>)
 800286e:	f002 fc91 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200006f0 	.word	0x200006f0

0800287c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <LPUART1_IRQHandler+0x10>)
 8002882:	f003 fe0b 	bl	800649c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200005d8 	.word	0x200005d8

08002890 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <SystemInit+0x64>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	4a16      	ldr	r2, [pc, #88]	; (80028f4 <SystemInit+0x64>)
 800289c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <SystemInit+0x68>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <SystemInit+0x68>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <SystemInit+0x68>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <SystemInit+0x68>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <SystemInit+0x68>)
 80028bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80028c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80028c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <SystemInit+0x68>)
 80028c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <SystemInit+0x68>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <SystemInit+0x68>)
 80028d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <SystemInit+0x68>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <SystemInit+0x64>)
 80028e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028e6:	609a      	str	r2, [r3, #8]
#endif
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00
 80028f8:	40021000 	.word	0x40021000

080028fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002934 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002900:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002902:	e003      	b.n	800290c <LoopCopyDataInit>

08002904 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002906:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002908:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800290a:	3104      	adds	r1, #4

0800290c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800290c:	480b      	ldr	r0, [pc, #44]	; (800293c <LoopForever+0xa>)
	ldr	r3, =_edata
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002910:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002912:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002914:	d3f6      	bcc.n	8002904 <CopyDataInit>
	ldr	r2, =_sbss
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002918:	e002      	b.n	8002920 <LoopFillZerobss>

0800291a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800291a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800291c:	f842 3b04 	str.w	r3, [r2], #4

08002920 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <LoopForever+0x16>)
	cmp	r2, r3
 8002922:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002924:	d3f9      	bcc.n	800291a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002926:	f7ff ffb3 	bl	8002890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292a:	f005 fff1 	bl	8008910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800292e:	f7ff f8db 	bl	8001ae8 <main>

08002932 <LoopForever>:

LoopForever:
    b LoopForever
 8002932:	e7fe      	b.n	8002932 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002934:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002938:	080089e8 	.word	0x080089e8
	ldr	r0, =_sdata
 800293c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002940:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8002944:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8002948:	20000788 	.word	0x20000788

0800294c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC1_IRQHandler>

0800294e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002958:	2003      	movs	r0, #3
 800295a:	f000 f95b 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800295e:	2000      	movs	r0, #0
 8002960:	f000 f80e 	bl	8002980 <HAL_InitTick>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	71fb      	strb	r3, [r7, #7]
 800296e:	e001      	b.n	8002974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002970:	f7ff fd02 	bl	8002378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002974:	79fb      	ldrb	r3, [r7, #7]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800298c:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_InitTick+0x68>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d022      	beq.n	80029da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_InitTick+0x6c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_InitTick+0x68>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f968 	bl	8002c7e <HAL_SYSTICK_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10f      	bne.n	80029d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	d809      	bhi.n	80029ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ba:	2200      	movs	r2, #0
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	f04f 30ff 	mov.w	r0, #4294967295
 80029c2:	f000 f932 	bl	8002c2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_InitTick+0x70>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e007      	b.n	80029de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e004      	b.n	80029de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	e001      	b.n	80029de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000018 	.word	0x20000018
 80029ec:	20000010 	.word	0x20000010
 80029f0:	20000014 	.word	0x20000014

080029f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_IncTick+0x1c>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_IncTick+0x20>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_IncTick+0x1c>)
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	20000784 	.word	0x20000784
 8002a14:	20000018 	.word	0x20000018

08002a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_GetTick+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000784 	.word	0x20000784

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff ffee 	bl	8002a18 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d004      	beq.n	8002a54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_Delay+0x40>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4413      	add	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a54:	bf00      	nop
 8002a56:	f7ff ffdf 	bl	8002a18 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d8f7      	bhi.n	8002a56 <HAL_Delay+0x26>
  {
  }
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000018 	.word	0x20000018

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4907      	ldr	r1, [pc, #28]	; (8002b10 <__NVIC_EnableIRQ+0x38>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f7ff ff8e 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff29 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3c:	f7ff ff3e 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff8e 	bl	8002b68 <NVIC_EncodePriority>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff5d 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff31 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ffa2 	bl	8002bd0 <SysTick_Config>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d005      	beq.n	8002cba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e047      	b.n	8002d4a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 020e 	bic.w	r2, r2, #14
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f003 021c 	and.w	r2, r3, #28
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d06:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d28:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    }
  }
  return status;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d62:	e166      	b.n	8003032 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8158 	beq.w	800302c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x38>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b12      	cmp	r3, #18
 8002d8a:	d123      	bne.n	8002dd4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	6939      	ldr	r1, [r7, #16]
 8002dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d00b      	beq.n	8002e28 <HAL_GPIO_Init+0xd4>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d007      	beq.n	8002e28 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e1c:	2b11      	cmp	r3, #17
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b12      	cmp	r3, #18
 8002e26:	d130      	bne.n	8002e8a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e5e:	2201      	movs	r2, #1
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 0201 	and.w	r2, r3, #1
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2203      	movs	r2, #3
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80b2 	beq.w	800302c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec8:	4b61      	ldr	r3, [pc, #388]	; (8003050 <HAL_GPIO_Init+0x2fc>)
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ecc:	4a60      	ldr	r2, [pc, #384]	; (8003050 <HAL_GPIO_Init+0x2fc>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ed4:	4b5e      	ldr	r3, [pc, #376]	; (8003050 <HAL_GPIO_Init+0x2fc>)
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ee0:	4a5c      	ldr	r2, [pc, #368]	; (8003054 <HAL_GPIO_Init+0x300>)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f0a:	d02b      	beq.n	8002f64 <HAL_GPIO_Init+0x210>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d025      	beq.n	8002f60 <HAL_GPIO_Init+0x20c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a51      	ldr	r2, [pc, #324]	; (800305c <HAL_GPIO_Init+0x308>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d01f      	beq.n	8002f5c <HAL_GPIO_Init+0x208>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a50      	ldr	r2, [pc, #320]	; (8003060 <HAL_GPIO_Init+0x30c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d019      	beq.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a4f      	ldr	r2, [pc, #316]	; (8003064 <HAL_GPIO_Init+0x310>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_GPIO_Init+0x200>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a4e      	ldr	r2, [pc, #312]	; (8003068 <HAL_GPIO_Init+0x314>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00d      	beq.n	8002f50 <HAL_GPIO_Init+0x1fc>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a4d      	ldr	r2, [pc, #308]	; (800306c <HAL_GPIO_Init+0x318>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <HAL_GPIO_Init+0x1f8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a4c      	ldr	r2, [pc, #304]	; (8003070 <HAL_GPIO_Init+0x31c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_GPIO_Init+0x1f4>
 8002f44:	2307      	movs	r3, #7
 8002f46:	e00e      	b.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f48:	2308      	movs	r3, #8
 8002f4a:	e00c      	b.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f4c:	2306      	movs	r3, #6
 8002f4e:	e00a      	b.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f50:	2305      	movs	r3, #5
 8002f52:	e008      	b.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f54:	2304      	movs	r3, #4
 8002f56:	e006      	b.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e004      	b.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e002      	b.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f64:	2300      	movs	r3, #0
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	f002 0203 	and.w	r2, r2, #3
 8002f6c:	0092      	lsls	r2, r2, #2
 8002f6e:	4093      	lsls	r3, r2
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f76:	4937      	ldr	r1, [pc, #220]	; (8003054 <HAL_GPIO_Init+0x300>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f84:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_GPIO_Init+0x320>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fa8:	4a32      	ldr	r2, [pc, #200]	; (8003074 <HAL_GPIO_Init+0x320>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_GPIO_Init+0x320>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fd2:	4a28      	ldr	r2, [pc, #160]	; (8003074 <HAL_GPIO_Init+0x320>)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_GPIO_Init+0x320>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <HAL_GPIO_Init+0x320>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <HAL_GPIO_Init+0x320>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003026:	4a13      	ldr	r2, [pc, #76]	; (8003074 <HAL_GPIO_Init+0x320>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f ae91 	bne.w	8002d64 <HAL_GPIO_Init+0x10>
  }
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000
 8003058:	48000400 	.word	0x48000400
 800305c:	48000800 	.word	0x48000800
 8003060:	48000c00 	.word	0x48000c00
 8003064:	48001000 	.word	0x48001000
 8003068:	48001400 	.word	0x48001400
 800306c:	48001800 	.word	0x48001800
 8003070:	48001c00 	.word	0x48001c00
 8003074:	40010400 	.word	0x40010400

08003078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
 8003084:	4613      	mov	r3, r2
 8003086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003088:	787b      	ldrb	r3, [r7, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003094:	e002      	b.n	800309c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fa1c 	bl	8001504 <HAL_GPIO_EXTI_Callback>
  }
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40010400 	.word	0x40010400

080030d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b08f      	sub	sp, #60	; 0x3c
 80030dc:	af0a      	add	r7, sp, #40	; 0x28
 80030de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e116      	b.n	8003318 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff faf9 	bl	80026fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f005 f9c5 	bl	80084b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	687e      	ldr	r6, [r7, #4]
 8003136:	466d      	mov	r5, sp
 8003138:	f106 0410 	add.w	r4, r6, #16
 800313c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003148:	e885 0003 	stmia.w	r5, {r0, r1}
 800314c:	1d33      	adds	r3, r6, #4
 800314e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003150:	6838      	ldr	r0, [r7, #0]
 8003152:	f005 f95f 	bl	8008414 <USB_CoreInit>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0d7      	b.n	8003318 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f005 f9b3 	bl	80084da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e04a      	b.n	8003210 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	333d      	adds	r3, #61	; 0x3d
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	333c      	adds	r3, #60	; 0x3c
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	b298      	uxth	r0, r3
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3342      	adds	r3, #66	; 0x42
 80031b6:	4602      	mov	r2, r0
 80031b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	333f      	adds	r3, #63	; 0x3f
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3344      	adds	r3, #68	; 0x44
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3348      	adds	r3, #72	; 0x48
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3350      	adds	r3, #80	; 0x50
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	3301      	adds	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	429a      	cmp	r2, r3
 8003218:	d3af      	bcc.n	800317a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	e044      	b.n	80032aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	3301      	adds	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d3b5      	bcc.n	8003220 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	687e      	ldr	r6, [r7, #4]
 80032bc:	466d      	mov	r5, sp
 80032be:	f106 0410 	add.w	r4, r6, #16
 80032c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80032d2:	1d33      	adds	r3, r6, #4
 80032d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032d6:	6838      	ldr	r0, [r7, #0]
 80032d8:	f005 f92a 	bl	8008530 <USB_DevInit>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e014      	b.n	8003318 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b01      	cmp	r3, #1
 8003304:	d102      	bne.n	800330c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f80a 	bl	8003320 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f005 fab0 	bl	8008876 <USB_DevDisconnect>

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	f043 0303 	orr.w	r3, r3, #3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003378:	d102      	bne.n	8003380 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800337a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800337e:	e00b      	b.n	8003398 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338e:	d102      	bne.n	8003396 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003394:	e000      	b.n	8003398 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003396:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40007000 	.word	0x40007000

080033a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d141      	bne.n	800343a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033b6:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d131      	bne.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033c4:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ca:	4a46      	ldr	r2, [pc, #280]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d4:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033dc:	4a41      	ldr	r2, [pc, #260]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80033e4:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2232      	movs	r2, #50	; 0x32
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	0c9b      	lsrs	r3, r3, #18
 80033f6:	3301      	adds	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033fa:	e002      	b.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3b01      	subs	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003402:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d102      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f2      	bne.n	80033fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003416:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d158      	bne.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e057      	b.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003428:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	4a2d      	ldr	r2, [pc, #180]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003438:	e04d      	b.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003440:	d141      	bne.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003442:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d131      	bne.n	80034b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003450:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003456:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003460:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003468:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800346e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2232      	movs	r2, #50	; 0x32
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	0c9b      	lsrs	r3, r3, #18
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003486:	e002      	b.n	800348e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3b01      	subs	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349a:	d102      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f2      	bne.n	8003488 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d112      	bne.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e011      	b.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034c4:	e007      	b.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ce:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40007000 	.word	0x40007000
 80034e8:	20000010 	.word	0x20000010
 80034ec:	431bde83 	.word	0x431bde83

080034f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_PWREx_EnableVddUSB+0x1c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_PWREx_EnableVddUSB+0x1c>)
 80034fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034fe:	6053      	str	r3, [r2, #4]
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40007000 	.word	0x40007000

08003510 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_PWREx_EnableVddIO2+0x1c>)
 800351a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351e:	6053      	str	r3, [r2, #4]
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000

08003530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e3db      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4ba4      	ldr	r3, [pc, #656]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354c:	4ba1      	ldr	r3, [pc, #644]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80e1 	beq.w	8003726 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <HAL_RCC_OscConfig+0x4a>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	f040 8088 	bne.w	8003682 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b01      	cmp	r3, #1
 8003576:	f040 8084 	bne.w	8003682 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800357a:	4b96      	ldr	r3, [pc, #600]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_RCC_OscConfig+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e3b3      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	4b8f      	ldr	r3, [pc, #572]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <HAL_RCC_OscConfig+0x7c>
 80035a2:	4b8c      	ldr	r3, [pc, #560]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035aa:	e005      	b.n	80035b8 <HAL_RCC_OscConfig+0x88>
 80035ac:	4b89      	ldr	r3, [pc, #548]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d223      	bcs.n	8003604 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fd91 	bl	80040e8 <RCC_SetFlashLatencyFromMSIRange>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e394      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d0:	4b80      	ldr	r3, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7f      	ldr	r2, [pc, #508]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80035d6:	f043 0308 	orr.w	r3, r3, #8
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b7d      	ldr	r3, [pc, #500]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	497a      	ldr	r1, [pc, #488]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ee:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	4975      	ldr	r1, [pc, #468]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
 8003602:	e022      	b.n	800364a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003604:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a72      	ldr	r2, [pc, #456]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800360a:	f043 0308 	orr.w	r3, r3, #8
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b70      	ldr	r3, [pc, #448]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	496d      	ldr	r1, [pc, #436]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003622:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	4968      	ldr	r1, [pc, #416]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fd54 	bl	80040e8 <RCC_SetFlashLatencyFromMSIRange>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e357      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800364a:	f000 fc8b 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 800364e:	4601      	mov	r1, r0
 8003650:	4b60      	ldr	r3, [pc, #384]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	4a5f      	ldr	r2, [pc, #380]	; (80037d8 <HAL_RCC_OscConfig+0x2a8>)
 800365c:	5cd3      	ldrb	r3, [r2, r3]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	fa21 f303 	lsr.w	r3, r1, r3
 8003666:	4a5d      	ldr	r2, [pc, #372]	; (80037dc <HAL_RCC_OscConfig+0x2ac>)
 8003668:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800366a:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x2b0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff f986 	bl	8002980 <HAL_InitTick>
 8003674:	4603      	mov	r3, r0
 8003676:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d052      	beq.n	8003724 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	e33b      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d032      	beq.n	80036f0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800368a:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a51      	ldr	r2, [pc, #324]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003696:	f7ff f9bf 	bl	8002a18 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800369e:	f7ff f9bb 	bl	8002a18 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e324      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036b0:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036bc:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a44      	ldr	r2, [pc, #272]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036c2:	f043 0308 	orr.w	r3, r3, #8
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	493f      	ldr	r1, [pc, #252]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036da:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	493a      	ldr	r1, [pc, #232]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]
 80036ee:	e01a      	b.n	8003726 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036f0:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a37      	ldr	r2, [pc, #220]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036fc:	f7ff f98c 	bl	8002a18 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003704:	f7ff f988 	bl	8002a18 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e2f1      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x1d4>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d074      	beq.n	800381c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d005      	beq.n	8003744 <HAL_RCC_OscConfig+0x214>
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d10e      	bne.n	800375c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d10b      	bne.n	800375c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d064      	beq.n	800381a <HAL_RCC_OscConfig+0x2ea>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d160      	bne.n	800381a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e2ce      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d106      	bne.n	8003774 <HAL_RCC_OscConfig+0x244>
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e01d      	b.n	80037b0 <HAL_RCC_OscConfig+0x280>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x268>
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0x280>
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <HAL_RCC_OscConfig+0x2a4>)
 80037aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7ff f92e 	bl	8002a18 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037be:	e011      	b.n	80037e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7ff f92a 	bl	8002a18 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d90a      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e293      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08008990 	.word	0x08008990
 80037dc:	20000010 	.word	0x20000010
 80037e0:	20000014 	.word	0x20000014
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e4:	4bae      	ldr	r3, [pc, #696]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0e7      	beq.n	80037c0 <HAL_RCC_OscConfig+0x290>
 80037f0:	e014      	b.n	800381c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7ff f911 	bl	8002a18 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fa:	f7ff f90d 	bl	8002a18 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b64      	cmp	r3, #100	; 0x64
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e276      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380c:	4ba4      	ldr	r3, [pc, #656]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x2ca>
 8003818:	e000      	b.n	800381c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d060      	beq.n	80038ea <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b04      	cmp	r3, #4
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x30a>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d119      	bne.n	8003868 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d116      	bne.n	8003868 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383a:	4b99      	ldr	r3, [pc, #612]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x322>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e253      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b93      	ldr	r3, [pc, #588]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	498f      	ldr	r1, [pc, #572]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003866:	e040      	b.n	80038ea <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d023      	beq.n	80038b8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003870:	4b8b      	ldr	r3, [pc, #556]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a8a      	ldr	r2, [pc, #552]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7ff f8cc 	bl	8002a18 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003884:	f7ff f8c8 	bl	8002a18 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e231      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003896:	4b82      	ldr	r3, [pc, #520]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a2:	4b7f      	ldr	r3, [pc, #508]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	061b      	lsls	r3, r3, #24
 80038b0:	497b      	ldr	r1, [pc, #492]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
 80038b6:	e018      	b.n	80038ea <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b8:	4b79      	ldr	r3, [pc, #484]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a78      	ldr	r2, [pc, #480]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 80038be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7ff f8a8 	bl	8002a18 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038cc:	f7ff f8a4 	bl	8002a18 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e20d      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038de:	4b70      	ldr	r3, [pc, #448]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03c      	beq.n	8003970 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01c      	beq.n	8003938 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fe:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003904:	4a66      	ldr	r2, [pc, #408]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7ff f883 	bl	8002a18 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003916:	f7ff f87f 	bl	8002a18 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e1e8      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003928:	4b5d      	ldr	r3, [pc, #372]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ef      	beq.n	8003916 <HAL_RCC_OscConfig+0x3e6>
 8003936:	e01b      	b.n	8003970 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003938:	4b59      	ldr	r3, [pc, #356]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	4a58      	ldr	r2, [pc, #352]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7ff f866 	bl	8002a18 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003950:	f7ff f862 	bl	8002a18 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1cb      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003962:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ef      	bne.n	8003950 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a5 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	4a43      	ldr	r2, [pc, #268]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	6593      	str	r3, [r2, #88]	; 0x58
 800399a:	4b41      	ldr	r3, [pc, #260]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039aa:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <HAL_RCC_OscConfig+0x574>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d118      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b6:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_RCC_OscConfig+0x574>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <HAL_RCC_OscConfig+0x574>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7ff f829 	bl	8002a18 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7ff f825 	bl	8002a18 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e18e      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <HAL_RCC_OscConfig+0x574>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d108      	bne.n	8003a02 <HAL_RCC_OscConfig+0x4d2>
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a00:	e024      	b.n	8003a4c <HAL_RCC_OscConfig+0x51c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d110      	bne.n	8003a2c <HAL_RCC_OscConfig+0x4fc>
 8003a0a:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a10:	4a23      	ldr	r2, [pc, #140]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a1a:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a2a:	e00f      	b.n	8003a4c <HAL_RCC_OscConfig+0x51c>
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a3c:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d016      	beq.n	8003a82 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fe ffe0 	bl	8002a18 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fe ffdc 	bl	8002a18 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e143      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_OscConfig+0x570>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ed      	beq.n	8003a5c <HAL_RCC_OscConfig+0x52c>
 8003a80:	e019      	b.n	8003ab6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a82:	f7fe ffc9 	bl	8002a18 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a88:	e00e      	b.n	8003aa8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fe ffc5 	bl	8002a18 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d905      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e12c      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa8:	4b96      	ldr	r3, [pc, #600]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e9      	bne.n	8003a8a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab6:	7ffb      	ldrb	r3, [r7, #31]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abc:	4b91      	ldr	r3, [pc, #580]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	4a90      	ldr	r2, [pc, #576]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d03c      	beq.n	8003b4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003adc:	4b89      	ldr	r3, [pc, #548]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae2:	4a88      	ldr	r2, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe ff94 	bl	8002a18 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af4:	f7fe ff90 	bl	8002a18 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0f9      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b06:	4b7f      	ldr	r3, [pc, #508]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ef      	beq.n	8003af4 <HAL_RCC_OscConfig+0x5c4>
 8003b14:	e01b      	b.n	8003b4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b16:	4b7b      	ldr	r3, [pc, #492]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b1c:	4a79      	ldr	r2, [pc, #484]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7fe ff77 	bl	8002a18 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b2e:	f7fe ff73 	bl	8002a18 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e0dc      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b40:	4b70      	ldr	r3, [pc, #448]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1ef      	bne.n	8003b2e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80d0 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	f000 808d 	beq.w	8003c7a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d15a      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a65      	ldr	r2, [pc, #404]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe ff50 	bl	8002a18 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fe ff4c 	bl	8002a18 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0b5      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8e:	4b5d      	ldr	r3, [pc, #372]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b9a:	4b5a      	ldr	r3, [pc, #360]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b5a      	ldr	r3, [pc, #360]	; (8003d08 <HAL_RCC_OscConfig+0x7d8>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003baa:	3a01      	subs	r2, #1
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bb4:	0212      	lsls	r2, r2, #8
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bbc:	0852      	lsrs	r2, r2, #1
 8003bbe:	3a01      	subs	r2, #1
 8003bc0:	0552      	lsls	r2, r2, #21
 8003bc2:	4311      	orrs	r1, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bc8:	0852      	lsrs	r2, r2, #1
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	0652      	lsls	r2, r2, #25
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bd4:	06d2      	lsls	r2, r2, #27
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	494a      	ldr	r1, [pc, #296]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bde:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a48      	ldr	r2, [pc, #288]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bea:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4a45      	ldr	r2, [pc, #276]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003bf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fe ff0f 	bl	8002a18 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7fe ff0b 	bl	8002a18 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e074      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c10:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x6ce>
 8003c1c:	e06c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1e:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a38      	ldr	r2, [pc, #224]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c28:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c2a:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d105      	bne.n	8003c42 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c36:	4b33      	ldr	r3, [pc, #204]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4a32      	ldr	r2, [pc, #200]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c3c:	f023 0303 	bic.w	r3, r3, #3
 8003c40:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c42:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4a2f      	ldr	r2, [pc, #188]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fe fee1 	bl	8002a18 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe fedd 	bl	8002a18 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e046      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6c:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x72a>
 8003c78:	e03e      	b.n	8003cf8 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e039      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <HAL_RCC_OscConfig+0x7d4>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0203 	and.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d12c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d123      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d11b      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d113      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d109      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	3b01      	subs	r3, #1
 8003cee:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	019d800c 	.word	0x019d800c

08003d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e10f      	b.n	8003f44 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b89      	ldr	r3, [pc, #548]	; (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d910      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b86      	ldr	r3, [pc, #536]	; (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 020f 	bic.w	r2, r3, #15
 8003d3a:	4984      	ldr	r1, [pc, #528]	; (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b82      	ldr	r3, [pc, #520]	; (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0f7      	b.n	8003f44 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8089 	beq.w	8003e74 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d133      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6a:	4b79      	ldr	r3, [pc, #484]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0e4      	b.n	8003f44 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003d7a:	f000 fa0f 	bl	800419c <RCC_GetSysClockFreqFromPLLSource>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b74      	ldr	r3, [pc, #464]	; (8003f54 <HAL_RCC_ClockConfig+0x248>)
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d955      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d86:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d92:	4b6f      	ldr	r3, [pc, #444]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9a:	4a6d      	ldr	r2, [pc, #436]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e044      	b.n	8003e32 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d03e      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x126>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d13a      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dbc:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc4:	4a62      	ldr	r2, [pc, #392]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e02f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d115      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0ac      	b.n	8003f44 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003df2:	4b57      	ldr	r3, [pc, #348]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e0a0      	b.n	8003f44 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e02:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e098      	b.n	8003f44 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003e12:	f000 f8a7 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003e16:	4602      	mov	r2, r0
 8003e18:	4b4e      	ldr	r3, [pc, #312]	; (8003f54 <HAL_RCC_ClockConfig+0x248>)
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d909      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e1e:	4b4c      	ldr	r3, [pc, #304]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e26:	4a4a      	ldr	r2, [pc, #296]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4944      	ldr	r1, [pc, #272]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fe fde8 	bl	8002a18 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fe fde4 	bl	8002a18 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e070      	b.n	8003f44 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4930      	ldr	r1, [pc, #192]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b80      	cmp	r3, #128	; 0x80
 8003e98:	d105      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e9a:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4a2c      	ldr	r2, [pc, #176]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea6:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d210      	bcs.n	8003ed6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 020f 	bic.w	r2, r3, #15
 8003ebc:	4923      	ldr	r1, [pc, #140]	; (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e036      	b.n	8003f44 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	4918      	ldr	r1, [pc, #96]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f00:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4910      	ldr	r1, [pc, #64]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f14:	f000 f826 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003f18:	4601      	mov	r1, r0
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <HAL_RCC_ClockConfig+0x24c>)
 8003f26:	5cd3      	ldrb	r3, [r2, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8003f30:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <HAL_RCC_ClockConfig+0x250>)
 8003f32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <HAL_RCC_ClockConfig+0x254>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe fd21 	bl	8002980 <HAL_InitTick>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	73fb      	strb	r3, [r7, #15]

  return status;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40022000 	.word	0x40022000
 8003f50:	40021000 	.word	0x40021000
 8003f54:	04c4b400 	.word	0x04c4b400
 8003f58:	08008990 	.word	0x08008990
 8003f5c:	20000010 	.word	0x20000010
 8003f60:	20000014 	.word	0x20000014

08003f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	; 0x24
 8003f68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f72:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f7c:	4b3a      	ldr	r3, [pc, #232]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x34>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d121      	bne.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d11e      	bne.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f98:	4b33      	ldr	r3, [pc, #204]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fa4:	4b30      	ldr	r3, [pc, #192]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e005      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fc0:	4a2a      	ldr	r2, [pc, #168]	; (800406c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d102      	bne.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	e004      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d133      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d002      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0xa4>
 8004002:	2b03      	cmp	r3, #3
 8004004:	d003      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0xaa>
 8004006:	e005      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <HAL_RCC_GetSysClockFreq+0x10c>)
 800400a:	617b      	str	r3, [r7, #20]
      break;
 800400c:	e005      	b.n	800401a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_RCC_GetSysClockFreq+0x110>)
 8004010:	617b      	str	r3, [r7, #20]
      break;
 8004012:	e002      	b.n	800401a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	617b      	str	r3, [r7, #20]
      break;
 8004018:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	3301      	adds	r3, #1
 8004026:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	fb02 f203 	mul.w	r2, r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_GetSysClockFreq+0x104>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	0e5b      	lsrs	r3, r3, #25
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	3301      	adds	r3, #1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800405a:	69bb      	ldr	r3, [r7, #24]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3724      	adds	r7, #36	; 0x24
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40021000 	.word	0x40021000
 800406c:	080089a8 	.word	0x080089a8
 8004070:	00f42400 	.word	0x00f42400
 8004074:	007a1200 	.word	0x007a1200

08004078 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800407c:	4b03      	ldr	r3, [pc, #12]	; (800408c <HAL_RCC_GetHCLKFreq+0x14>)
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000010 	.word	0x20000010

08004090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004094:	f7ff fff0 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8004098:	4601      	mov	r1, r0
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000
 80040b8:	080089a0 	.word	0x080089a0

080040bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040c0:	f7ff ffda 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 80040c4:	4601      	mov	r1, r0
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0adb      	lsrs	r3, r3, #11
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4a04      	ldr	r2, [pc, #16]	; (80040e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040d2:	5cd3      	ldrb	r3, [r2, r3]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	080089a0 	.word	0x080089a0

080040e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004100:	f7ff f932 	bl	8003368 <HAL_PWREx_GetVoltageRange>
 8004104:	6178      	str	r0, [r7, #20]
 8004106:	e014      	b.n	8004132 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004108:	4b22      	ldr	r3, [pc, #136]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	4a21      	ldr	r2, [pc, #132]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6593      	str	r3, [r2, #88]	; 0x58
 8004114:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004120:	f7ff f922 	bl	8003368 <HAL_PWREx_GetVoltageRange>
 8004124:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800412c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004130:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004138:	d10b      	bne.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b80      	cmp	r3, #128	; 0x80
 800413e:	d913      	bls.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2ba0      	cmp	r3, #160	; 0xa0
 8004144:	d902      	bls.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004146:	2302      	movs	r3, #2
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	e00d      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800414c:	2301      	movs	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e00a      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b7f      	cmp	r3, #127	; 0x7f
 8004156:	d902      	bls.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004158:	2302      	movs	r3, #2
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	e004      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d101      	bne.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004164:	2301      	movs	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 020f 	bic.w	r2, r3, #15
 8004170:	4909      	ldr	r1, [pc, #36]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	429a      	cmp	r2, r3
 8004184:	d001      	beq.n	800418a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	40022000 	.word	0x40022000

0800419c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80041a6:	4b2d      	ldr	r3, [pc, #180]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d118      	bne.n	80041e4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e005      	b.n	80041da <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d002      	beq.n	80041fa <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d003      	beq.n	8004200 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80041f8:	e005      	b.n	8004206 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80041fc:	613b      	str	r3, [r7, #16]
    break;
 80041fe:	e005      	b.n	800420c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004202:	613b      	str	r3, [r7, #16]
    break;
 8004204:	e002      	b.n	800420c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	613b      	str	r3, [r7, #16]
    break;
 800420a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	3301      	adds	r3, #1
 8004218:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	fb02 f203 	mul.w	r2, r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	0e5b      	lsrs	r3, r3, #25
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	3301      	adds	r3, #1
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800424c:	683b      	ldr	r3, [r7, #0]
}
 800424e:	4618      	mov	r0, r3
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	080089a8 	.word	0x080089a8
 8004264:	00f42400 	.word	0x00f42400
 8004268:	007a1200 	.word	0x007a1200

0800426c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004274:	2300      	movs	r3, #0
 8004276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004278:	2300      	movs	r3, #0
 800427a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004284:	2b00      	cmp	r3, #0
 8004286:	d03d      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d00b      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d804      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d015      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800429c:	e01d      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800429e:	2b60      	cmp	r3, #96	; 0x60
 80042a0:	d01e      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d01c      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042a6:	e018      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a8:	4b86      	ldr	r3, [pc, #536]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a85      	ldr	r2, [pc, #532]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b4:	e015      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fafd 	bl	80048bc <RCCEx_PLLSAI1_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042c6:	e00c      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3320      	adds	r3, #32
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fbe4 	bl	8004a9c <RCCEx_PLLSAI2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	74fb      	strb	r3, [r7, #19]
      break;
 80042de:	e000      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80042e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e8:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ee:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f6:	4973      	ldr	r1, [pc, #460]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80042fe:	e001      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d042      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004318:	d00f      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800431a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431e:	d805      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d011      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004328:	d017      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800432a:	e01f      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800432c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004330:	d01f      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004336:	d01c      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004338:	e018      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800433a:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a61      	ldr	r2, [pc, #388]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004346:	e015      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fab4 	bl	80048bc <RCCEx_PLLSAI1_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004358:	e00c      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3320      	adds	r3, #32
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fb9b 	bl	8004a9c <RCCEx_PLLSAI2_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800436a:	e003      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	74fb      	strb	r3, [r7, #19]
      break;
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800437a:	4b52      	ldr	r3, [pc, #328]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800437c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	494e      	ldr	r1, [pc, #312]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004390:	e001      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 809f 	beq.w	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a4:	2300      	movs	r3, #0
 80043a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043a8:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	4a40      	ldr	r2, [pc, #256]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ca:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d6:	2301      	movs	r3, #1
 80043d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043da:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3a      	ldr	r2, [pc, #232]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e6:	f7fe fb17 	bl	8002a18 <HAL_GetTick>
 80043ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ec:	e009      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ee:	f7fe fb13 	bl	8002a18 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d902      	bls.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	74fb      	strb	r3, [r7, #19]
        break;
 8004400:	e005      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004402:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0ef      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d15b      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004414:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01f      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	429a      	cmp	r2, r3
 8004430:	d019      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004432:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	4a1f      	ldr	r2, [pc, #124]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800445e:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fe fad2 	bl	8002a18 <HAL_GetTick>
 8004474:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004476:	e00b      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fe face 	bl	8002a18 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d902      	bls.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	74fb      	strb	r3, [r7, #19]
            break;
 800448e:	e006      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0ec      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10c      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044bc:	e008      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	74bb      	strb	r3, [r7, #18]
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044d0:	7c7b      	ldrb	r3, [r7, #17]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d6:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	4a9f      	ldr	r2, [pc, #636]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ee:	4b9a      	ldr	r3, [pc, #616]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f023 0203 	bic.w	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	4996      	ldr	r1, [pc, #600]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004510:	4b91      	ldr	r3, [pc, #580]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f023 020c 	bic.w	r2, r3, #12
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	498e      	ldr	r1, [pc, #568]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004532:	4b89      	ldr	r3, [pc, #548]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	4985      	ldr	r1, [pc, #532]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004554:	4b80      	ldr	r3, [pc, #512]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	497d      	ldr	r1, [pc, #500]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004576:	4b78      	ldr	r3, [pc, #480]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	4974      	ldr	r1, [pc, #464]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004598:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a6:	496c      	ldr	r1, [pc, #432]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c8:	4963      	ldr	r1, [pc, #396]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045dc:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ea:	495b      	ldr	r1, [pc, #364]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fe:	4b56      	ldr	r3, [pc, #344]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	4952      	ldr	r1, [pc, #328]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004620:	4b4d      	ldr	r3, [pc, #308]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	494a      	ldr	r1, [pc, #296]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004642:	4b45      	ldr	r3, [pc, #276]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	4941      	ldr	r1, [pc, #260]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004664:	4b3c      	ldr	r3, [pc, #240]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800466a:	f023 0203 	bic.w	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004672:	4939      	ldr	r1, [pc, #228]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d028      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004686:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004694:	4930      	ldr	r1, [pc, #192]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a6:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b0:	60d3      	str	r3, [r2, #12]
 80046b2:	e011      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f8f9 	bl	80048bc <RCCEx_PLLSAI1_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d04d      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ec:	d108      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80046ee:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80046fe:	e012      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004700:	4b15      	ldr	r3, [pc, #84]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004706:	4a14      	ldr	r2, [pc, #80]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471e:	490e      	ldr	r1, [pc, #56]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472e:	d106      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473a:	60d3      	str	r3, [r2, #12]
 800473c:	e020      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004746:	d109      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4a02      	ldr	r2, [pc, #8]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	60d3      	str	r3, [r2, #12]
 8004754:	e014      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004764:	d10c      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f8a5 	bl	80048bc <RCCEx_PLLSAI1_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d028      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800478c:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479a:	4947      	ldr	r1, [pc, #284]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047aa:	d106      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ac:	4b42      	ldr	r3, [pc, #264]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a41      	ldr	r2, [pc, #260]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b6:	60d3      	str	r3, [r2, #12]
 80047b8:	e011      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c2:	d10c      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2101      	movs	r1, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f876 	bl	80048bc <RCCEx_PLLSAI1_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01e      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ea:	4b33      	ldr	r3, [pc, #204]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fa:	492f      	ldr	r1, [pc, #188]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480c:	d10c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f851 	bl	80048bc <RCCEx_PLLSAI1_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483a:	f023 0204 	bic.w	r2, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004844:	491c      	ldr	r1, [pc, #112]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004858:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800485a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800485e:	f023 0218 	bic.w	r2, r3, #24
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	4913      	ldr	r1, [pc, #76]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d017      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800487c:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800487e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488c:	490a      	ldr	r1, [pc, #40]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489e:	d105      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000

080048bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ca:	4b70      	ldr	r3, [pc, #448]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00e      	beq.n	80048f4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048d6:	4b6d      	ldr	r3, [pc, #436]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0203 	and.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d103      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
       ||
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d13f      	bne.n	800496e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	e03c      	b.n	800496e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d00c      	beq.n	8004916 <RCCEx_PLLSAI1_Config+0x5a>
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d013      	beq.n	8004928 <RCCEx_PLLSAI1_Config+0x6c>
 8004900:	2b01      	cmp	r3, #1
 8004902:	d120      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004904:	4b61      	ldr	r3, [pc, #388]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11d      	bne.n	800494c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004914:	e01a      	b.n	800494c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004916:	4b5d      	ldr	r3, [pc, #372]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491e:	2b00      	cmp	r3, #0
 8004920:	d116      	bne.n	8004950 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004926:	e013      	b.n	8004950 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004928:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10f      	bne.n	8004954 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004934:	4b55      	ldr	r3, [pc, #340]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004944:	e006      	b.n	8004954 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
      break;
 800494a:	e004      	b.n	8004956 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800494c:	bf00      	nop
 800494e:	e002      	b.n	8004956 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004950:	bf00      	nop
 8004952:	e000      	b.n	8004956 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004954:	bf00      	nop
    }

    if(status == HAL_OK)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800495c:	4b4b      	ldr	r3, [pc, #300]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f023 0203 	bic.w	r2, r3, #3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4948      	ldr	r1, [pc, #288]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 800496a:	4313      	orrs	r3, r2
 800496c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 8086 	bne.w	8004a82 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004976:	4b45      	ldr	r3, [pc, #276]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a44      	ldr	r2, [pc, #272]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 800497c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004982:	f7fe f849 	bl	8002a18 <HAL_GetTick>
 8004986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004988:	e009      	b.n	800499e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800498a:	f7fe f845 	bl	8002a18 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d902      	bls.n	800499e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	73fb      	strb	r3, [r7, #15]
        break;
 800499c:	e005      	b.n	80049aa <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800499e:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1ef      	bne.n	800498a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d168      	bne.n	8004a82 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d113      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b6:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	4b35      	ldr	r3, [pc, #212]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1d4>)
 80049bc:	4013      	ands	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6892      	ldr	r2, [r2, #8]
 80049c2:	0211      	lsls	r1, r2, #8
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68d2      	ldr	r2, [r2, #12]
 80049c8:	06d2      	lsls	r2, r2, #27
 80049ca:	4311      	orrs	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6852      	ldr	r2, [r2, #4]
 80049d0:	3a01      	subs	r2, #1
 80049d2:	0112      	lsls	r2, r2, #4
 80049d4:	430a      	orrs	r2, r1
 80049d6:	492d      	ldr	r1, [pc, #180]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	610b      	str	r3, [r1, #16]
 80049dc:	e02d      	b.n	8004a3a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d115      	bne.n	8004a10 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e4:	4b29      	ldr	r3, [pc, #164]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	0211      	lsls	r1, r2, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6912      	ldr	r2, [r2, #16]
 80049f6:	0852      	lsrs	r2, r2, #1
 80049f8:	3a01      	subs	r2, #1
 80049fa:	0552      	lsls	r2, r2, #21
 80049fc:	4311      	orrs	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6852      	ldr	r2, [r2, #4]
 8004a02:	3a01      	subs	r2, #1
 8004a04:	0112      	lsls	r2, r2, #4
 8004a06:	430a      	orrs	r2, r1
 8004a08:	4920      	ldr	r1, [pc, #128]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	610b      	str	r3, [r1, #16]
 8004a0e:	e014      	b.n	8004a3a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a10:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	0211      	lsls	r1, r2, #8
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6952      	ldr	r2, [r2, #20]
 8004a22:	0852      	lsrs	r2, r2, #1
 8004a24:	3a01      	subs	r2, #1
 8004a26:	0652      	lsls	r2, r2, #25
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6852      	ldr	r2, [r2, #4]
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	430a      	orrs	r2, r1
 8004a34:	4915      	ldr	r1, [pc, #84]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a3a:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a46:	f7fd ffe7 	bl	8002a18 <HAL_GetTick>
 8004a4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a4c:	e009      	b.n	8004a62 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a4e:	f7fd ffe3 	bl	8002a18 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d902      	bls.n	8004a62 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8004a60:	e005      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0ef      	beq.n	8004a4e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4903      	ldr	r1, [pc, #12]	; (8004a8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	07ff800f 	.word	0x07ff800f
 8004a94:	ff9f800f 	.word	0xff9f800f
 8004a98:	f9ff800f 	.word	0xf9ff800f

08004a9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aaa:	4b70      	ldr	r3, [pc, #448]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ab6:	4b6d      	ldr	r3, [pc, #436]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f003 0203 	and.w	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d103      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d13f      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	e03c      	b.n	8004b4e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d00c      	beq.n	8004af6 <RCCEx_PLLSAI2_Config+0x5a>
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d013      	beq.n	8004b08 <RCCEx_PLLSAI2_Config+0x6c>
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d120      	bne.n	8004b26 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ae4:	4b61      	ldr	r3, [pc, #388]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11d      	bne.n	8004b2c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af4:	e01a      	b.n	8004b2c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af6:	4b5d      	ldr	r3, [pc, #372]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d116      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b06:	e013      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b08:	4b58      	ldr	r3, [pc, #352]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b14:	4b55      	ldr	r3, [pc, #340]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b24:	e006      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2a:	e004      	b.n	8004b36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004b34:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d108      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004b3c:	4b4b      	ldr	r3, [pc, #300]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f023 0203 	bic.w	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4948      	ldr	r1, [pc, #288]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f040 8086 	bne.w	8004c62 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b56:	4b45      	ldr	r3, [pc, #276]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a44      	ldr	r2, [pc, #272]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b62:	f7fd ff59 	bl	8002a18 <HAL_GetTick>
 8004b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b68:	e009      	b.n	8004b7e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b6a:	f7fd ff55 	bl	8002a18 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d902      	bls.n	8004b7e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	73fb      	strb	r3, [r7, #15]
        break;
 8004b7c:	e005      	b.n	8004b8a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b7e:	4b3b      	ldr	r3, [pc, #236]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1ef      	bne.n	8004b6a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d168      	bne.n	8004c62 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d113      	bne.n	8004bbe <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b96:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	4b35      	ldr	r3, [pc, #212]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6892      	ldr	r2, [r2, #8]
 8004ba2:	0211      	lsls	r1, r2, #8
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68d2      	ldr	r2, [r2, #12]
 8004ba8:	06d2      	lsls	r2, r2, #27
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6852      	ldr	r2, [r2, #4]
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	0112      	lsls	r2, r2, #4
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	492d      	ldr	r1, [pc, #180]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	614b      	str	r3, [r1, #20]
 8004bbc:	e02d      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d115      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	4b2a      	ldr	r3, [pc, #168]	; (8004c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	0211      	lsls	r1, r2, #8
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6912      	ldr	r2, [r2, #16]
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0552      	lsls	r2, r2, #21
 8004bdc:	4311      	orrs	r1, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6852      	ldr	r2, [r2, #4]
 8004be2:	3a01      	subs	r2, #1
 8004be4:	0112      	lsls	r2, r2, #4
 8004be6:	430a      	orrs	r2, r1
 8004be8:	4920      	ldr	r1, [pc, #128]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	614b      	str	r3, [r1, #20]
 8004bee:	e014      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	0211      	lsls	r1, r2, #8
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6952      	ldr	r2, [r2, #20]
 8004c02:	0852      	lsrs	r2, r2, #1
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0652      	lsls	r2, r2, #25
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6852      	ldr	r2, [r2, #4]
 8004c0e:	3a01      	subs	r2, #1
 8004c10:	0112      	lsls	r2, r2, #4
 8004c12:	430a      	orrs	r2, r1
 8004c14:	4915      	ldr	r1, [pc, #84]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fd fef7 	bl	8002a18 <HAL_GetTick>
 8004c2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c2c:	e009      	b.n	8004c42 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c2e:	f7fd fef3 	bl	8002a18 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d902      	bls.n	8004c42 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8004c40:	e005      	b.n	8004c4e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0ef      	beq.n	8004c2e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	4903      	ldr	r1, [pc, #12]	; (8004c6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	07ff800f 	.word	0x07ff800f
 8004c74:	ff9f800f 	.word	0xff9f800f
 8004c78:	f9ff800f 	.word	0xf9ff800f

08004c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e01d      	b.n	8004cca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd fc88 	bl	80025b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 fd84 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <HAL_TIM_Base_Start_IT+0x50>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b06      	cmp	r3, #6
 8004cfc:	d00b      	beq.n	8004d16 <HAL_TIM_Base_Start_IT+0x42>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	00010007 	.word	0x00010007

08004d28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10f      	bne.n	8004d70 <HAL_TIM_Base_Stop_IT+0x48>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	f240 4344 	movw	r3, #1092	; 0x444
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_Base_Stop_IT+0x48>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e01d      	b.n	8004dcc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f815 	bl	8004dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f000 fd03 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2201      	movs	r2, #1
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 f8ee 	bl	8005fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <HAL_TIM_PWM_Start+0x98>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x4a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <HAL_TIM_PWM_Start+0x9c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00e      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x4a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <HAL_TIM_PWM_Start+0xa0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x4a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <HAL_TIM_PWM_Start+0xa4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x4a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <HAL_TIM_PWM_Start+0xa8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_PWM_Start+0x4e>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_TIM_PWM_Start+0x50>
 8004e36:	2300      	movs	r3, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <HAL_TIM_PWM_Start+0xac>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d00b      	beq.n	8004e76 <HAL_TIM_PWM_Start+0x8e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e64:	d007      	beq.n	8004e76 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40013400 	.word	0x40013400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400
 8004e90:	40014800 	.word	0x40014800
 8004e94:	00010007 	.word	0x00010007

08004e98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 f896 	bl	8005fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2a      	ldr	r2, [pc, #168]	; (8004f60 <HAL_TIM_PWM_Stop+0xc8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_TIM_PWM_Stop+0x4a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a29      	ldr	r2, [pc, #164]	; (8004f64 <HAL_TIM_PWM_Stop+0xcc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_TIM_PWM_Stop+0x4a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <HAL_TIM_PWM_Stop+0xd0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d009      	beq.n	8004ee2 <HAL_TIM_PWM_Stop+0x4a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a26      	ldr	r2, [pc, #152]	; (8004f6c <HAL_TIM_PWM_Stop+0xd4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <HAL_TIM_PWM_Stop+0x4a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <HAL_TIM_PWM_Stop+0xd8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_PWM_Stop+0x4e>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <HAL_TIM_PWM_Stop+0x50>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d017      	beq.n	8004f1c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a1a      	ldr	r2, [r3, #32]
 8004ef2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10f      	bne.n	8004f1c <HAL_TIM_PWM_Stop+0x84>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	f240 4344 	movw	r3, #1092	; 0x444
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_PWM_Stop+0x84>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10f      	bne.n	8004f4c <HAL_TIM_PWM_Stop+0xb4>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a1a      	ldr	r2, [r3, #32]
 8004f32:	f240 4344 	movw	r3, #1092	; 0x444
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_TIM_PWM_Stop+0xb4>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0201 	bic.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800

08004f74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e083      	b.n	8005090 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fd facb 	bl	8002538 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004fb8:	f023 0307 	bic.w	r3, r3, #7
 8004fbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 fbfd 	bl	80057c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	4313      	orrs	r3, r2
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005014:	f023 030c 	bic.w	r3, r3, #12
 8005018:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	4313      	orrs	r3, r2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	011a      	lsls	r2, r3, #4
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	031b      	lsls	r3, r3, #12
 8005044:	4313      	orrs	r3, r2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	4313      	orrs	r3, r2
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_TIM_Encoder_Start+0x16>
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d008      	beq.n	80050be <HAL_TIM_Encoder_Start+0x26>
 80050ac:	e00f      	b.n	80050ce <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 ff90 	bl	8005fdc <TIM_CCxChannelCmd>
      break;
 80050bc:	e016      	b.n	80050ec <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2201      	movs	r2, #1
 80050c4:	2104      	movs	r1, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 ff88 	bl	8005fdc <TIM_CCxChannelCmd>
      break;
 80050cc:	e00e      	b.n	80050ec <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2201      	movs	r2, #1
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 ff80 	bl	8005fdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2201      	movs	r2, #1
 80050e2:	2104      	movs	r1, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 ff79 	bl	8005fdc <TIM_CCxChannelCmd>
      break;
 80050ea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_TIM_Encoder_Stop+0x16>
 8005116:	2b04      	cmp	r3, #4
 8005118:	d008      	beq.n	800512c <HAL_TIM_Encoder_Stop+0x26>
 800511a:	e00f      	b.n	800513c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2200      	movs	r2, #0
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f000 ff59 	bl	8005fdc <TIM_CCxChannelCmd>
      break;
 800512a:	e016      	b.n	800515a <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2200      	movs	r2, #0
 8005132:	2104      	movs	r1, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f000 ff51 	bl	8005fdc <TIM_CCxChannelCmd>
      break;
 800513a:	e00e      	b.n	800515a <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2200      	movs	r2, #0
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 ff49 	bl	8005fdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	2104      	movs	r1, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f000 ff42 	bl	8005fdc <TIM_CCxChannelCmd>
      break;
 8005158:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a1a      	ldr	r2, [r3, #32]
 8005160:	f241 1311 	movw	r3, #4369	; 0x1111
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10f      	bne.n	800518a <HAL_TIM_Encoder_Stop+0x84>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	f240 4344 	movw	r3, #1092	; 0x444
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <HAL_TIM_Encoder_Stop+0x84>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0202 	mvn.w	r2, #2
 80051c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fad7 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fac9 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fada 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0204 	mvn.w	r2, #4
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 faad 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fa9f 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fab0 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b08      	cmp	r3, #8
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0208 	mvn.w	r2, #8
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa83 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa75 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fa86 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0210 	mvn.w	r2, #16
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2208      	movs	r2, #8
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa59 	bl	800578a <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa4b 	bl	8005776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fa5c 	bl	800579e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0201 	mvn.w	r2, #1
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc f93a 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fed8 	bl	80060f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d10e      	bne.n	8005372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d107      	bne.n	8005372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fecb 	bl	8006108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d10e      	bne.n	800539e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d107      	bne.n	800539e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fa0a 	bl	80057b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d10e      	bne.n	80053ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0220 	mvn.w	r2, #32
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fe8b 	bl	80060e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e105      	b.n	80055fa <HAL_TIM_PWM_ConfigChannel+0x226>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b14      	cmp	r3, #20
 8005402:	f200 80f0 	bhi.w	80055e6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005461 	.word	0x08005461
 8005410:	080055e7 	.word	0x080055e7
 8005414:	080055e7 	.word	0x080055e7
 8005418:	080055e7 	.word	0x080055e7
 800541c:	080054a1 	.word	0x080054a1
 8005420:	080055e7 	.word	0x080055e7
 8005424:	080055e7 	.word	0x080055e7
 8005428:	080055e7 	.word	0x080055e7
 800542c:	080054e3 	.word	0x080054e3
 8005430:	080055e7 	.word	0x080055e7
 8005434:	080055e7 	.word	0x080055e7
 8005438:	080055e7 	.word	0x080055e7
 800543c:	08005523 	.word	0x08005523
 8005440:	080055e7 	.word	0x080055e7
 8005444:	080055e7 	.word	0x080055e7
 8005448:	080055e7 	.word	0x080055e7
 800544c:	08005565 	.word	0x08005565
 8005450:	080055e7 	.word	0x080055e7
 8005454:	080055e7 	.word	0x080055e7
 8005458:	080055e7 	.word	0x080055e7
 800545c:	080055a5 	.word	0x080055a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fa48 	bl	80058fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0208 	orr.w	r2, r2, #8
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0204 	bic.w	r2, r2, #4
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	619a      	str	r2, [r3, #24]
      break;
 800549e:	e0a3      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fab8 	bl	8005a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6999      	ldr	r1, [r3, #24]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	619a      	str	r2, [r3, #24]
      break;
 80054e0:	e082      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fb21 	bl	8005b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0208 	orr.w	r2, r2, #8
 80054fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0204 	bic.w	r2, r2, #4
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	61da      	str	r2, [r3, #28]
      break;
 8005520:	e062      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fb89 	bl	8005c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69d9      	ldr	r1, [r3, #28]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	021a      	lsls	r2, r3, #8
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	61da      	str	r2, [r3, #28]
      break;
 8005562:	e041      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fbd2 	bl	8005d14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055a2:	e021      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fc16 	bl	8005ddc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055e4:	e000      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80055e6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop

08005604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_TIM_ConfigClockSource+0x18>
 8005618:	2302      	movs	r3, #2
 800561a:	e0a8      	b.n	800576e <HAL_TIM_ConfigClockSource+0x16a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800563e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005646:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d067      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0x124>
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d80b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x70>
 800565c:	2b10      	cmp	r3, #16
 800565e:	d073      	beq.n	8005748 <HAL_TIM_ConfigClockSource+0x144>
 8005660:	2b10      	cmp	r3, #16
 8005662:	d802      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x66>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d06f      	beq.n	8005748 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005668:	e078      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800566a:	2b20      	cmp	r3, #32
 800566c:	d06c      	beq.n	8005748 <HAL_TIM_ConfigClockSource+0x144>
 800566e:	2b30      	cmp	r3, #48	; 0x30
 8005670:	d06a      	beq.n	8005748 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005672:	e073      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005674:	2b70      	cmp	r3, #112	; 0x70
 8005676:	d00d      	beq.n	8005694 <HAL_TIM_ConfigClockSource+0x90>
 8005678:	2b70      	cmp	r3, #112	; 0x70
 800567a:	d804      	bhi.n	8005686 <HAL_TIM_ConfigClockSource+0x82>
 800567c:	2b50      	cmp	r3, #80	; 0x50
 800567e:	d033      	beq.n	80056e8 <HAL_TIM_ConfigClockSource+0xe4>
 8005680:	2b60      	cmp	r3, #96	; 0x60
 8005682:	d041      	beq.n	8005708 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005684:	e06a      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568a:	d066      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x156>
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005690:	d017      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005692:	e063      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6899      	ldr	r1, [r3, #8]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f000 fc7a 	bl	8005f9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
      break;
 80056c0:	e04c      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f000 fc63 	bl	8005f9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e4:	609a      	str	r2, [r3, #8]
      break;
 80056e6:	e039      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6859      	ldr	r1, [r3, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	461a      	mov	r2, r3
 80056f6:	f000 fbd7 	bl	8005ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2150      	movs	r1, #80	; 0x50
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fc30 	bl	8005f66 <TIM_ITRx_SetConfig>
      break;
 8005706:	e029      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	461a      	mov	r2, r3
 8005716:	f000 fbf6 	bl	8005f06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2160      	movs	r1, #96	; 0x60
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fc20 	bl	8005f66 <TIM_ITRx_SetConfig>
      break;
 8005726:	e019      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	461a      	mov	r2, r3
 8005736:	f000 fbb7 	bl	8005ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2140      	movs	r1, #64	; 0x40
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fc10 	bl	8005f66 <TIM_ITRx_SetConfig>
      break;
 8005746:	e009      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 fc07 	bl	8005f66 <TIM_ITRx_SetConfig>
      break;
 8005758:	e000      	b.n	800575c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800575a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a40      	ldr	r2, [pc, #256]	; (80058dc <TIM_Base_SetConfig+0x114>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d013      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e6:	d00f      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a3d      	ldr	r2, [pc, #244]	; (80058e0 <TIM_Base_SetConfig+0x118>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a3c      	ldr	r2, [pc, #240]	; (80058e4 <TIM_Base_SetConfig+0x11c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a3b      	ldr	r2, [pc, #236]	; (80058e8 <TIM_Base_SetConfig+0x120>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3a      	ldr	r2, [pc, #232]	; (80058ec <TIM_Base_SetConfig+0x124>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d108      	bne.n	800581a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2f      	ldr	r2, [pc, #188]	; (80058dc <TIM_Base_SetConfig+0x114>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01f      	beq.n	8005862 <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d01b      	beq.n	8005862 <TIM_Base_SetConfig+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2c      	ldr	r2, [pc, #176]	; (80058e0 <TIM_Base_SetConfig+0x118>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d017      	beq.n	8005862 <TIM_Base_SetConfig+0x9a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2b      	ldr	r2, [pc, #172]	; (80058e4 <TIM_Base_SetConfig+0x11c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <TIM_Base_SetConfig+0x9a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <TIM_Base_SetConfig+0x120>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00f      	beq.n	8005862 <TIM_Base_SetConfig+0x9a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a29      	ldr	r2, [pc, #164]	; (80058ec <TIM_Base_SetConfig+0x124>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00b      	beq.n	8005862 <TIM_Base_SetConfig+0x9a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <TIM_Base_SetConfig+0x128>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d007      	beq.n	8005862 <TIM_Base_SetConfig+0x9a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a27      	ldr	r2, [pc, #156]	; (80058f4 <TIM_Base_SetConfig+0x12c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d003      	beq.n	8005862 <TIM_Base_SetConfig+0x9a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <TIM_Base_SetConfig+0x130>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d108      	bne.n	8005874 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a10      	ldr	r2, [pc, #64]	; (80058dc <TIM_Base_SetConfig+0x114>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00f      	beq.n	80058c0 <TIM_Base_SetConfig+0xf8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a12      	ldr	r2, [pc, #72]	; (80058ec <TIM_Base_SetConfig+0x124>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00b      	beq.n	80058c0 <TIM_Base_SetConfig+0xf8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <TIM_Base_SetConfig+0x128>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d007      	beq.n	80058c0 <TIM_Base_SetConfig+0xf8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a10      	ldr	r2, [pc, #64]	; (80058f4 <TIM_Base_SetConfig+0x12c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_Base_SetConfig+0xf8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a0f      	ldr	r2, [pc, #60]	; (80058f8 <TIM_Base_SetConfig+0x130>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d103      	bne.n	80058c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	615a      	str	r2, [r3, #20]
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40014400 	.word	0x40014400
 80058f8:	40014800 	.word	0x40014800

080058fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f023 0201 	bic.w	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f023 0302 	bic.w	r3, r3, #2
 8005948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a2c      	ldr	r2, [pc, #176]	; (8005a08 <TIM_OC1_SetConfig+0x10c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00f      	beq.n	800597c <TIM_OC1_SetConfig+0x80>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a2b      	ldr	r2, [pc, #172]	; (8005a0c <TIM_OC1_SetConfig+0x110>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00b      	beq.n	800597c <TIM_OC1_SetConfig+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a2a      	ldr	r2, [pc, #168]	; (8005a10 <TIM_OC1_SetConfig+0x114>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_OC1_SetConfig+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a29      	ldr	r2, [pc, #164]	; (8005a14 <TIM_OC1_SetConfig+0x118>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_OC1_SetConfig+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a28      	ldr	r2, [pc, #160]	; (8005a18 <TIM_OC1_SetConfig+0x11c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d10c      	bne.n	8005996 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0308 	bic.w	r3, r3, #8
 8005982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 0304 	bic.w	r3, r3, #4
 8005994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <TIM_OC1_SetConfig+0x10c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00f      	beq.n	80059be <TIM_OC1_SetConfig+0xc2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a1a      	ldr	r2, [pc, #104]	; (8005a0c <TIM_OC1_SetConfig+0x110>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00b      	beq.n	80059be <TIM_OC1_SetConfig+0xc2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <TIM_OC1_SetConfig+0x114>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d007      	beq.n	80059be <TIM_OC1_SetConfig+0xc2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <TIM_OC1_SetConfig+0x118>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d003      	beq.n	80059be <TIM_OC1_SetConfig+0xc2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <TIM_OC1_SetConfig+0x11c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d111      	bne.n	80059e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	621a      	str	r2, [r3, #32]
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40013400 	.word	0x40013400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800

08005a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0210 	bic.w	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0320 	bic.w	r3, r3, #32
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a28      	ldr	r2, [pc, #160]	; (8005b1c <TIM_OC2_SetConfig+0x100>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC2_SetConfig+0x6c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a27      	ldr	r2, [pc, #156]	; (8005b20 <TIM_OC2_SetConfig+0x104>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10d      	bne.n	8005aa4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <TIM_OC2_SetConfig+0x100>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00f      	beq.n	8005acc <TIM_OC2_SetConfig+0xb0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <TIM_OC2_SetConfig+0x104>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00b      	beq.n	8005acc <TIM_OC2_SetConfig+0xb0>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <TIM_OC2_SetConfig+0x108>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d007      	beq.n	8005acc <TIM_OC2_SetConfig+0xb0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a1a      	ldr	r2, [pc, #104]	; (8005b28 <TIM_OC2_SetConfig+0x10c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC2_SetConfig+0xb0>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <TIM_OC2_SetConfig+0x110>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d113      	bne.n	8005af4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800

08005b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0303 	bic.w	r3, r3, #3
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a27      	ldr	r2, [pc, #156]	; (8005c2c <TIM_OC3_SetConfig+0xfc>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_OC3_SetConfig+0x6a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a26      	ldr	r2, [pc, #152]	; (8005c30 <TIM_OC3_SetConfig+0x100>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10d      	bne.n	8005bb6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <TIM_OC3_SetConfig+0xfc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00f      	beq.n	8005bde <TIM_OC3_SetConfig+0xae>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	; (8005c30 <TIM_OC3_SetConfig+0x100>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <TIM_OC3_SetConfig+0xae>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1a      	ldr	r2, [pc, #104]	; (8005c34 <TIM_OC3_SetConfig+0x104>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <TIM_OC3_SetConfig+0xae>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <TIM_OC3_SetConfig+0x108>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC3_SetConfig+0xae>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a18      	ldr	r2, [pc, #96]	; (8005c3c <TIM_OC3_SetConfig+0x10c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40013400 	.word	0x40013400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40014400 	.word	0x40014400
 8005c3c:	40014800 	.word	0x40014800

08005c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	031b      	lsls	r3, r3, #12
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <TIM_OC4_SetConfig+0xc0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_OC4_SetConfig+0x84>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a17      	ldr	r2, [pc, #92]	; (8005d04 <TIM_OC4_SetConfig+0xc4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_OC4_SetConfig+0x84>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a16      	ldr	r2, [pc, #88]	; (8005d08 <TIM_OC4_SetConfig+0xc8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_OC4_SetConfig+0x84>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a15      	ldr	r2, [pc, #84]	; (8005d0c <TIM_OC4_SetConfig+0xcc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_OC4_SetConfig+0x84>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <TIM_OC4_SetConfig+0xd0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d109      	bne.n	8005cd8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	019b      	lsls	r3, r3, #6
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40013400 	.word	0x40013400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800

08005d14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	041b      	lsls	r3, r3, #16
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <TIM_OC5_SetConfig+0xb4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00f      	beq.n	8005d8e <TIM_OC5_SetConfig+0x7a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <TIM_OC5_SetConfig+0xb8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_OC5_SetConfig+0x7a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <TIM_OC5_SetConfig+0xbc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d007      	beq.n	8005d8e <TIM_OC5_SetConfig+0x7a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a14      	ldr	r2, [pc, #80]	; (8005dd4 <TIM_OC5_SetConfig+0xc0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC5_SetConfig+0x7a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <TIM_OC5_SetConfig+0xc4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d109      	bne.n	8005da2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40013400 	.word	0x40013400
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40014400 	.word	0x40014400
 8005dd8:	40014800 	.word	0x40014800

08005ddc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	051b      	lsls	r3, r3, #20
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <TIM_OC6_SetConfig+0xb8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00f      	beq.n	8005e58 <TIM_OC6_SetConfig+0x7c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <TIM_OC6_SetConfig+0xbc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_OC6_SetConfig+0x7c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <TIM_OC6_SetConfig+0xc0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_OC6_SetConfig+0x7c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a15      	ldr	r2, [pc, #84]	; (8005ea0 <TIM_OC6_SetConfig+0xc4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC6_SetConfig+0x7c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a14      	ldr	r2, [pc, #80]	; (8005ea4 <TIM_OC6_SetConfig+0xc8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d109      	bne.n	8005e6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40013400 	.word	0x40013400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800

08005ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f023 0201 	bic.w	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 030a 	bic.w	r3, r3, #10
 8005ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	621a      	str	r2, [r3, #32]
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b087      	sub	sp, #28
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0210 	bic.w	r2, r3, #16
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	031b      	lsls	r3, r3, #12
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f043 0307 	orr.w	r3, r3, #7
 8005f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	609a      	str	r2, [r3, #8]
}
 8005f90:	bf00      	nop
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	021a      	lsls	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	609a      	str	r2, [r3, #8]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 031f 	and.w	r3, r3, #31
 8005fee:	2201      	movs	r2, #1
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a1a      	ldr	r2, [r3, #32]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	401a      	ands	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a1a      	ldr	r2, [r3, #32]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 031f 	and.w	r3, r3, #31
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	fa01 f303 	lsl.w	r3, r1, r3
 8006014:	431a      	orrs	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800603c:	2302      	movs	r3, #2
 800603e:	e045      	b.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d108      	bne.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800607a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800609e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40013400 	.word	0x40013400

080060e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e042      	b.n	80061b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fc f93d 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2224      	movs	r2, #36	; 0x24
 800614a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fb1a 	bl	8006798 <UART_SetConfig>
 8006164:	4603      	mov	r3, r0
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e022      	b.n	80061b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 fcce 	bl	8007b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800618a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800619a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 fd55 	bl	8007c5c <UART_CheckIdleState>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	; 0x28
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	f040 8084 	bne.w	80062e0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_UART_Transmit+0x28>
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e07c      	b.n	80062e2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_UART_Transmit+0x3a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e075      	b.n	80062e2 <HAL_UART_Transmit+0x126>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2221      	movs	r2, #33	; 0x21
 800620a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800620e:	f7fc fc03 	bl	8002a18 <HAL_GetTick>
 8006212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	88fa      	ldrh	r2, [r7, #6]
 8006218:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	88fa      	ldrh	r2, [r7, #6]
 8006220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622c:	d108      	bne.n	8006240 <HAL_UART_Transmit+0x84>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e003      	b.n	8006248 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006248:	e02d      	b.n	80062a6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	2180      	movs	r1, #128	; 0x80
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f001 fd49 	bl	8007cec <UART_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e03e      	b.n	80062e2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	881a      	ldrh	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006276:	b292      	uxth	r2, r2
 8006278:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	3302      	adds	r3, #2
 800627e:	61bb      	str	r3, [r7, #24]
 8006280:	e008      	b.n	8006294 <HAL_UART_Transmit+0xd8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	781a      	ldrb	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	b292      	uxth	r2, r2
 800628c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3301      	adds	r3, #1
 8006292:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1cb      	bne.n	800624a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2200      	movs	r2, #0
 80062ba:	2140      	movs	r1, #64	; 0x40
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f001 fd15 	bl	8007cec <UART_WaitOnFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_UART_Transmit+0x110>
    {
      return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e00a      	b.n	80062e2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e000      	b.n	80062e2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
  }
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006300:	2b20      	cmp	r3, #32
 8006302:	f040 80bc 	bne.w	800647e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_UART_Receive_IT+0x26>
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e0b4      	b.n	8006480 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_UART_Receive_IT+0x38>
 8006320:	2302      	movs	r3, #2
 8006322:	e0ad      	b.n	8006480 <HAL_UART_Receive_IT+0x194>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006350:	d10e      	bne.n	8006370 <HAL_UART_Receive_IT+0x84>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <HAL_UART_Receive_IT+0x7a>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006360:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006364:	e02d      	b.n	80063c2 <HAL_UART_Receive_IT+0xd6>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	22ff      	movs	r2, #255	; 0xff
 800636a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800636e:	e028      	b.n	80063c2 <HAL_UART_Receive_IT+0xd6>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10d      	bne.n	8006394 <HAL_UART_Receive_IT+0xa8>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <HAL_UART_Receive_IT+0x9e>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	22ff      	movs	r2, #255	; 0xff
 8006384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006388:	e01b      	b.n	80063c2 <HAL_UART_Receive_IT+0xd6>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	227f      	movs	r2, #127	; 0x7f
 800638e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006392:	e016      	b.n	80063c2 <HAL_UART_Receive_IT+0xd6>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800639c:	d10d      	bne.n	80063ba <HAL_UART_Receive_IT+0xce>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d104      	bne.n	80063b0 <HAL_UART_Receive_IT+0xc4>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	227f      	movs	r2, #127	; 0x7f
 80063aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ae:	e008      	b.n	80063c2 <HAL_UART_Receive_IT+0xd6>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	223f      	movs	r2, #63	; 0x3f
 80063b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063b8:	e003      	b.n	80063c2 <HAL_UART_Receive_IT+0xd6>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2222      	movs	r2, #34	; 0x22
 80063ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ea:	d12a      	bne.n	8006442 <HAL_UART_Receive_IT+0x156>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d324      	bcc.n	8006442 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006400:	d107      	bne.n	8006412 <HAL_UART_Receive_IT+0x126>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d103      	bne.n	8006412 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a1f      	ldr	r2, [pc, #124]	; (800648c <HAL_UART_Receive_IT+0x1a0>)
 800640e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006410:	e002      	b.n	8006418 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <HAL_UART_Receive_IT+0x1a4>)
 8006416:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800642e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	e01b      	b.n	800647a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644a:	d107      	bne.n	800645c <HAL_UART_Receive_IT+0x170>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a0f      	ldr	r2, [pc, #60]	; (8006494 <HAL_UART_Receive_IT+0x1a8>)
 8006458:	66da      	str	r2, [r3, #108]	; 0x6c
 800645a:	e002      	b.n	8006462 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4a0e      	ldr	r2, [pc, #56]	; (8006498 <HAL_UART_Receive_IT+0x1ac>)
 8006460:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006478:	601a      	str	r2, [r3, #0]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e000      	b.n	8006480 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800647e:	2302      	movs	r3, #2
  }
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	08008091 	.word	0x08008091
 8006490:	08007f85 	.word	0x08007f85
 8006494:	08007ed5 	.word	0x08007ed5
 8006498:	08007e27 	.word	0x08007e27

0800649c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d118      	bne.n	80064fc <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d013      	beq.n	80064fc <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <HAL_UART_IRQHandler+0x60>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 812e 	beq.w	800674e <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
      }
      return;
 80064fa:	e128      	b.n	800674e <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80d1 	beq.w	80066a6 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4b96      	ldr	r3, [pc, #600]	; (8006760 <HAL_UART_IRQHandler+0x2c4>)
 8006508:	4013      	ands	r3, r2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d105      	bne.n	800651a <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80c6 	beq.w	80066a6 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d010      	beq.n	8006546 <HAL_UART_IRQHandler+0xaa>
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2201      	movs	r2, #1
 8006534:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653c:	f043 0201 	orr.w	r2, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d010      	beq.n	8006572 <HAL_UART_IRQHandler+0xd6>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2202      	movs	r2, #2
 8006560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006568:	f043 0204 	orr.w	r2, r3, #4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d010      	beq.n	800659e <HAL_UART_IRQHandler+0x102>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2204      	movs	r2, #4
 800658c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006594:	f043 0202 	orr.w	r2, r3, #2
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d015      	beq.n	80065d4 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4b6a      	ldr	r3, [pc, #424]	; (8006760 <HAL_UART_IRQHandler+0x2c4>)
 80065b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00b      	beq.n	80065d4 <HAL_UART_IRQHandler+0x138>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2208      	movs	r2, #8
 80065c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f043 0208 	orr.w	r2, r3, #8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80b9 	beq.w	8006752 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d011      	beq.n	800660e <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <HAL_UART_IRQHandler+0x172>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006614:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006620:	2b40      	cmp	r3, #64	; 0x40
 8006622:	d004      	beq.n	800662e <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800662a:	2b00      	cmp	r3, #0
 800662c:	d031      	beq.n	8006692 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 fba6 	bl	8007d80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663e:	2b40      	cmp	r3, #64	; 0x40
 8006640:	d123      	bne.n	800668a <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006650:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006656:	2b00      	cmp	r3, #0
 8006658:	d013      	beq.n	8006682 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800665e:	4a41      	ldr	r2, [pc, #260]	; (8006764 <HAL_UART_IRQHandler+0x2c8>)
 8006660:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006666:	4618      	mov	r0, r3
 8006668:	f7fc fb15 	bl	8002c96 <HAL_DMA_Abort_IT>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d017      	beq.n	80066a2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006680:	e00f      	b.n	80066a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fb f888 	bl	8001798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006688:	e00b      	b.n	80066a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fb f884 	bl	8001798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	e007      	b.n	80066a2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fb f880 	bl	8001798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80066a0:	e057      	b.n	8006752 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a2:	bf00      	nop
    return;
 80066a4:	e055      	b.n	8006752 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <HAL_UART_IRQHandler+0x230>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fd69 	bl	800819c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066ca:	e045      	b.n	8006758 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d012      	beq.n	80066fc <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d008      	beq.n	80066fc <HAL_UART_IRQHandler+0x260>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d031      	beq.n	8006756 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
    }
    return;
 80066fa:	e02c      	b.n	8006756 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <HAL_UART_IRQHandler+0x27c>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 fb6e 	bl	8007df2 <UART_EndTransmit_IT>
    return;
 8006716:	e01f      	b.n	8006758 <HAL_UART_IRQHandler+0x2bc>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d008      	beq.n	8006734 <HAL_UART_IRQHandler+0x298>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fd49 	bl	80081c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006732:	e011      	b.n	8006758 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <HAL_UART_IRQHandler+0x2bc>
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	da09      	bge.n	8006758 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fd33 	bl	80081b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <HAL_UART_IRQHandler+0x2bc>
      return;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <HAL_UART_IRQHandler+0x2bc>
    return;
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <HAL_UART_IRQHandler+0x2bc>
    return;
 8006756:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	10000001 	.word	0x10000001
 8006764:	08007dc7 	.word	0x08007dc7

08006768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006798:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800679c:	b088      	sub	sp, #32
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4bac      	ldr	r3, [pc, #688]	; (8006a88 <UART_SetConfig+0x2f0>)
 80067d8:	4013      	ands	r3, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	69f9      	ldr	r1, [r7, #28]
 80067e0:	430b      	orrs	r3, r1
 80067e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4aa1      	ldr	r2, [pc, #644]	; (8006a8c <UART_SetConfig+0x2f4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	4313      	orrs	r3, r2
 8006812:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800681e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	69f9      	ldr	r1, [r7, #28]
 8006828:	430b      	orrs	r3, r1
 800682a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	f023 010f 	bic.w	r1, r3, #15
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a92      	ldr	r2, [pc, #584]	; (8006a90 <UART_SetConfig+0x2f8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d121      	bne.n	8006890 <UART_SetConfig+0xf8>
 800684c:	4b91      	ldr	r3, [pc, #580]	; (8006a94 <UART_SetConfig+0x2fc>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d816      	bhi.n	8006888 <UART_SetConfig+0xf0>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0xc8>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006871 	.word	0x08006871
 8006864:	0800687d 	.word	0x0800687d
 8006868:	08006877 	.word	0x08006877
 800686c:	08006883 	.word	0x08006883
 8006870:	2301      	movs	r3, #1
 8006872:	76fb      	strb	r3, [r7, #27]
 8006874:	e0e8      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006876:	2302      	movs	r3, #2
 8006878:	76fb      	strb	r3, [r7, #27]
 800687a:	e0e5      	b.n	8006a48 <UART_SetConfig+0x2b0>
 800687c:	2304      	movs	r3, #4
 800687e:	76fb      	strb	r3, [r7, #27]
 8006880:	e0e2      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006882:	2308      	movs	r3, #8
 8006884:	76fb      	strb	r3, [r7, #27]
 8006886:	e0df      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006888:	2310      	movs	r3, #16
 800688a:	76fb      	strb	r3, [r7, #27]
 800688c:	bf00      	nop
 800688e:	e0db      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a80      	ldr	r2, [pc, #512]	; (8006a98 <UART_SetConfig+0x300>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d134      	bne.n	8006904 <UART_SetConfig+0x16c>
 800689a:	4b7e      	ldr	r3, [pc, #504]	; (8006a94 <UART_SetConfig+0x2fc>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a0:	f003 030c 	and.w	r3, r3, #12
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	d829      	bhi.n	80068fc <UART_SetConfig+0x164>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x118>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	080068fd 	.word	0x080068fd
 80068b8:	080068fd 	.word	0x080068fd
 80068bc:	080068fd 	.word	0x080068fd
 80068c0:	080068f1 	.word	0x080068f1
 80068c4:	080068fd 	.word	0x080068fd
 80068c8:	080068fd 	.word	0x080068fd
 80068cc:	080068fd 	.word	0x080068fd
 80068d0:	080068eb 	.word	0x080068eb
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	080068fd 	.word	0x080068fd
 80068dc:	080068fd 	.word	0x080068fd
 80068e0:	080068f7 	.word	0x080068f7
 80068e4:	2300      	movs	r3, #0
 80068e6:	76fb      	strb	r3, [r7, #27]
 80068e8:	e0ae      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80068ea:	2302      	movs	r3, #2
 80068ec:	76fb      	strb	r3, [r7, #27]
 80068ee:	e0ab      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80068f0:	2304      	movs	r3, #4
 80068f2:	76fb      	strb	r3, [r7, #27]
 80068f4:	e0a8      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80068f6:	2308      	movs	r3, #8
 80068f8:	76fb      	strb	r3, [r7, #27]
 80068fa:	e0a5      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80068fc:	2310      	movs	r3, #16
 80068fe:	76fb      	strb	r3, [r7, #27]
 8006900:	bf00      	nop
 8006902:	e0a1      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a64      	ldr	r2, [pc, #400]	; (8006a9c <UART_SetConfig+0x304>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d120      	bne.n	8006950 <UART_SetConfig+0x1b8>
 800690e:	4b61      	ldr	r3, [pc, #388]	; (8006a94 <UART_SetConfig+0x2fc>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006918:	2b10      	cmp	r3, #16
 800691a:	d00f      	beq.n	800693c <UART_SetConfig+0x1a4>
 800691c:	2b10      	cmp	r3, #16
 800691e:	d802      	bhi.n	8006926 <UART_SetConfig+0x18e>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <UART_SetConfig+0x198>
 8006924:	e010      	b.n	8006948 <UART_SetConfig+0x1b0>
 8006926:	2b20      	cmp	r3, #32
 8006928:	d005      	beq.n	8006936 <UART_SetConfig+0x19e>
 800692a:	2b30      	cmp	r3, #48	; 0x30
 800692c:	d009      	beq.n	8006942 <UART_SetConfig+0x1aa>
 800692e:	e00b      	b.n	8006948 <UART_SetConfig+0x1b0>
 8006930:	2300      	movs	r3, #0
 8006932:	76fb      	strb	r3, [r7, #27]
 8006934:	e088      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006936:	2302      	movs	r3, #2
 8006938:	76fb      	strb	r3, [r7, #27]
 800693a:	e085      	b.n	8006a48 <UART_SetConfig+0x2b0>
 800693c:	2304      	movs	r3, #4
 800693e:	76fb      	strb	r3, [r7, #27]
 8006940:	e082      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006942:	2308      	movs	r3, #8
 8006944:	76fb      	strb	r3, [r7, #27]
 8006946:	e07f      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006948:	2310      	movs	r3, #16
 800694a:	76fb      	strb	r3, [r7, #27]
 800694c:	bf00      	nop
 800694e:	e07b      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a52      	ldr	r2, [pc, #328]	; (8006aa0 <UART_SetConfig+0x308>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d120      	bne.n	800699c <UART_SetConfig+0x204>
 800695a:	4b4e      	ldr	r3, [pc, #312]	; (8006a94 <UART_SetConfig+0x2fc>)
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d00f      	beq.n	8006988 <UART_SetConfig+0x1f0>
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d802      	bhi.n	8006972 <UART_SetConfig+0x1da>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <UART_SetConfig+0x1e4>
 8006970:	e010      	b.n	8006994 <UART_SetConfig+0x1fc>
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d005      	beq.n	8006982 <UART_SetConfig+0x1ea>
 8006976:	2bc0      	cmp	r3, #192	; 0xc0
 8006978:	d009      	beq.n	800698e <UART_SetConfig+0x1f6>
 800697a:	e00b      	b.n	8006994 <UART_SetConfig+0x1fc>
 800697c:	2300      	movs	r3, #0
 800697e:	76fb      	strb	r3, [r7, #27]
 8006980:	e062      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006982:	2302      	movs	r3, #2
 8006984:	76fb      	strb	r3, [r7, #27]
 8006986:	e05f      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006988:	2304      	movs	r3, #4
 800698a:	76fb      	strb	r3, [r7, #27]
 800698c:	e05c      	b.n	8006a48 <UART_SetConfig+0x2b0>
 800698e:	2308      	movs	r3, #8
 8006990:	76fb      	strb	r3, [r7, #27]
 8006992:	e059      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006994:	2310      	movs	r3, #16
 8006996:	76fb      	strb	r3, [r7, #27]
 8006998:	bf00      	nop
 800699a:	e055      	b.n	8006a48 <UART_SetConfig+0x2b0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a40      	ldr	r2, [pc, #256]	; (8006aa4 <UART_SetConfig+0x30c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d124      	bne.n	80069f0 <UART_SetConfig+0x258>
 80069a6:	4b3b      	ldr	r3, [pc, #236]	; (8006a94 <UART_SetConfig+0x2fc>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b4:	d012      	beq.n	80069dc <UART_SetConfig+0x244>
 80069b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ba:	d802      	bhi.n	80069c2 <UART_SetConfig+0x22a>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d007      	beq.n	80069d0 <UART_SetConfig+0x238>
 80069c0:	e012      	b.n	80069e8 <UART_SetConfig+0x250>
 80069c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c6:	d006      	beq.n	80069d6 <UART_SetConfig+0x23e>
 80069c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069cc:	d009      	beq.n	80069e2 <UART_SetConfig+0x24a>
 80069ce:	e00b      	b.n	80069e8 <UART_SetConfig+0x250>
 80069d0:	2300      	movs	r3, #0
 80069d2:	76fb      	strb	r3, [r7, #27]
 80069d4:	e038      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80069d6:	2302      	movs	r3, #2
 80069d8:	76fb      	strb	r3, [r7, #27]
 80069da:	e035      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80069dc:	2304      	movs	r3, #4
 80069de:	76fb      	strb	r3, [r7, #27]
 80069e0:	e032      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80069e2:	2308      	movs	r3, #8
 80069e4:	76fb      	strb	r3, [r7, #27]
 80069e6:	e02f      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80069e8:	2310      	movs	r3, #16
 80069ea:	76fb      	strb	r3, [r7, #27]
 80069ec:	bf00      	nop
 80069ee:	e02b      	b.n	8006a48 <UART_SetConfig+0x2b0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a25      	ldr	r2, [pc, #148]	; (8006a8c <UART_SetConfig+0x2f4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d124      	bne.n	8006a44 <UART_SetConfig+0x2ac>
 80069fa:	4b26      	ldr	r3, [pc, #152]	; (8006a94 <UART_SetConfig+0x2fc>)
 80069fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a08:	d012      	beq.n	8006a30 <UART_SetConfig+0x298>
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0e:	d802      	bhi.n	8006a16 <UART_SetConfig+0x27e>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <UART_SetConfig+0x28c>
 8006a14:	e012      	b.n	8006a3c <UART_SetConfig+0x2a4>
 8006a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a1a:	d006      	beq.n	8006a2a <UART_SetConfig+0x292>
 8006a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a20:	d009      	beq.n	8006a36 <UART_SetConfig+0x29e>
 8006a22:	e00b      	b.n	8006a3c <UART_SetConfig+0x2a4>
 8006a24:	2300      	movs	r3, #0
 8006a26:	76fb      	strb	r3, [r7, #27]
 8006a28:	e00e      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	76fb      	strb	r3, [r7, #27]
 8006a2e:	e00b      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006a30:	2304      	movs	r3, #4
 8006a32:	76fb      	strb	r3, [r7, #27]
 8006a34:	e008      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006a36:	2308      	movs	r3, #8
 8006a38:	76fb      	strb	r3, [r7, #27]
 8006a3a:	e005      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	76fb      	strb	r3, [r7, #27]
 8006a40:	bf00      	nop
 8006a42:	e001      	b.n	8006a48 <UART_SetConfig+0x2b0>
 8006a44:	2310      	movs	r3, #16
 8006a46:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a0f      	ldr	r2, [pc, #60]	; (8006a8c <UART_SetConfig+0x2f4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	f040 842d 	bne.w	80072ae <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a54:	7efb      	ldrb	r3, [r7, #27]
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	f200 816b 	bhi.w	8006d32 <UART_SetConfig+0x59a>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <UART_SetConfig+0x2cc>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006aa9 	.word	0x08006aa9
 8006a68:	08006d33 	.word	0x08006d33
 8006a6c:	08006b4b 	.word	0x08006b4b
 8006a70:	08006d33 	.word	0x08006d33
 8006a74:	08006be3 	.word	0x08006be3
 8006a78:	08006d33 	.word	0x08006d33
 8006a7c:	08006d33 	.word	0x08006d33
 8006a80:	08006d33 	.word	0x08006d33
 8006a84:	08006c85 	.word	0x08006c85
 8006a88:	cfff69f3 	.word	0xcfff69f3
 8006a8c:	40008000 	.word	0x40008000
 8006a90:	40013800 	.word	0x40013800
 8006a94:	40021000 	.word	0x40021000
 8006a98:	40004400 	.word	0x40004400
 8006a9c:	40004800 	.word	0x40004800
 8006aa0:	40004c00 	.word	0x40004c00
 8006aa4:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006aa8:	f7fd faf2 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d044      	beq.n	8006b40 <UART_SetConfig+0x3a8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d03e      	beq.n	8006b3c <UART_SetConfig+0x3a4>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d038      	beq.n	8006b38 <UART_SetConfig+0x3a0>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d032      	beq.n	8006b34 <UART_SetConfig+0x39c>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d02c      	beq.n	8006b30 <UART_SetConfig+0x398>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d026      	beq.n	8006b2c <UART_SetConfig+0x394>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	2b06      	cmp	r3, #6
 8006ae4:	d020      	beq.n	8006b28 <UART_SetConfig+0x390>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	2b07      	cmp	r3, #7
 8006aec:	d01a      	beq.n	8006b24 <UART_SetConfig+0x38c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d014      	beq.n	8006b20 <UART_SetConfig+0x388>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	2b09      	cmp	r3, #9
 8006afc:	d00e      	beq.n	8006b1c <UART_SetConfig+0x384>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	2b0a      	cmp	r3, #10
 8006b04:	d008      	beq.n	8006b18 <UART_SetConfig+0x380>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	2b0b      	cmp	r3, #11
 8006b0c:	d102      	bne.n	8006b14 <UART_SetConfig+0x37c>
 8006b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b12:	e016      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e014      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	e012      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	e010      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b20:	2320      	movs	r3, #32
 8006b22:	e00e      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b24:	2310      	movs	r3, #16
 8006b26:	e00c      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	e00a      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b2c:	230a      	movs	r3, #10
 8006b2e:	e008      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b30:	2308      	movs	r3, #8
 8006b32:	e006      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b34:	2306      	movs	r3, #6
 8006b36:	e004      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	e002      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e000      	b.n	8006b42 <UART_SetConfig+0x3aa>
 8006b40:	2301      	movs	r3, #1
 8006b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b46:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b48:	e0f6      	b.n	8006d38 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d044      	beq.n	8006bdc <UART_SetConfig+0x444>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d03e      	beq.n	8006bd8 <UART_SetConfig+0x440>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d038      	beq.n	8006bd4 <UART_SetConfig+0x43c>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d032      	beq.n	8006bd0 <UART_SetConfig+0x438>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d02c      	beq.n	8006bcc <UART_SetConfig+0x434>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	d026      	beq.n	8006bc8 <UART_SetConfig+0x430>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	2b06      	cmp	r3, #6
 8006b80:	d020      	beq.n	8006bc4 <UART_SetConfig+0x42c>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b07      	cmp	r3, #7
 8006b88:	d01a      	beq.n	8006bc0 <UART_SetConfig+0x428>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d014      	beq.n	8006bbc <UART_SetConfig+0x424>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d00e      	beq.n	8006bb8 <UART_SetConfig+0x420>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	2b0a      	cmp	r3, #10
 8006ba0:	d008      	beq.n	8006bb4 <UART_SetConfig+0x41c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b0b      	cmp	r3, #11
 8006ba8:	d102      	bne.n	8006bb0 <UART_SetConfig+0x418>
 8006baa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006bae:	e016      	b.n	8006bde <UART_SetConfig+0x446>
 8006bb0:	4ba1      	ldr	r3, [pc, #644]	; (8006e38 <UART_SetConfig+0x6a0>)
 8006bb2:	e014      	b.n	8006bde <UART_SetConfig+0x446>
 8006bb4:	4ba1      	ldr	r3, [pc, #644]	; (8006e3c <UART_SetConfig+0x6a4>)
 8006bb6:	e012      	b.n	8006bde <UART_SetConfig+0x446>
 8006bb8:	4ba1      	ldr	r3, [pc, #644]	; (8006e40 <UART_SetConfig+0x6a8>)
 8006bba:	e010      	b.n	8006bde <UART_SetConfig+0x446>
 8006bbc:	4ba1      	ldr	r3, [pc, #644]	; (8006e44 <UART_SetConfig+0x6ac>)
 8006bbe:	e00e      	b.n	8006bde <UART_SetConfig+0x446>
 8006bc0:	4ba1      	ldr	r3, [pc, #644]	; (8006e48 <UART_SetConfig+0x6b0>)
 8006bc2:	e00c      	b.n	8006bde <UART_SetConfig+0x446>
 8006bc4:	4ba1      	ldr	r3, [pc, #644]	; (8006e4c <UART_SetConfig+0x6b4>)
 8006bc6:	e00a      	b.n	8006bde <UART_SetConfig+0x446>
 8006bc8:	4ba1      	ldr	r3, [pc, #644]	; (8006e50 <UART_SetConfig+0x6b8>)
 8006bca:	e008      	b.n	8006bde <UART_SetConfig+0x446>
 8006bcc:	4ba1      	ldr	r3, [pc, #644]	; (8006e54 <UART_SetConfig+0x6bc>)
 8006bce:	e006      	b.n	8006bde <UART_SetConfig+0x446>
 8006bd0:	4ba1      	ldr	r3, [pc, #644]	; (8006e58 <UART_SetConfig+0x6c0>)
 8006bd2:	e004      	b.n	8006bde <UART_SetConfig+0x446>
 8006bd4:	4ba1      	ldr	r3, [pc, #644]	; (8006e5c <UART_SetConfig+0x6c4>)
 8006bd6:	e002      	b.n	8006bde <UART_SetConfig+0x446>
 8006bd8:	4ba1      	ldr	r3, [pc, #644]	; (8006e60 <UART_SetConfig+0x6c8>)
 8006bda:	e000      	b.n	8006bde <UART_SetConfig+0x446>
 8006bdc:	4b96      	ldr	r3, [pc, #600]	; (8006e38 <UART_SetConfig+0x6a0>)
 8006bde:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8006be0:	e0aa      	b.n	8006d38 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006be2:	f7fd f9bf 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8006be6:	4602      	mov	r2, r0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d044      	beq.n	8006c7a <UART_SetConfig+0x4e2>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d03e      	beq.n	8006c76 <UART_SetConfig+0x4de>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d038      	beq.n	8006c72 <UART_SetConfig+0x4da>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d032      	beq.n	8006c6e <UART_SetConfig+0x4d6>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d02c      	beq.n	8006c6a <UART_SetConfig+0x4d2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	2b05      	cmp	r3, #5
 8006c16:	d026      	beq.n	8006c66 <UART_SetConfig+0x4ce>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	2b06      	cmp	r3, #6
 8006c1e:	d020      	beq.n	8006c62 <UART_SetConfig+0x4ca>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	2b07      	cmp	r3, #7
 8006c26:	d01a      	beq.n	8006c5e <UART_SetConfig+0x4c6>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d014      	beq.n	8006c5a <UART_SetConfig+0x4c2>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d00e      	beq.n	8006c56 <UART_SetConfig+0x4be>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	2b0a      	cmp	r3, #10
 8006c3e:	d008      	beq.n	8006c52 <UART_SetConfig+0x4ba>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	2b0b      	cmp	r3, #11
 8006c46:	d102      	bne.n	8006c4e <UART_SetConfig+0x4b6>
 8006c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c4c:	e016      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e014      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c52:	2380      	movs	r3, #128	; 0x80
 8006c54:	e012      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	e010      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c5a:	2320      	movs	r3, #32
 8006c5c:	e00e      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	e00c      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c62:	230c      	movs	r3, #12
 8006c64:	e00a      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c66:	230a      	movs	r3, #10
 8006c68:	e008      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	e006      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c6e:	2306      	movs	r3, #6
 8006c70:	e004      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c72:	2304      	movs	r3, #4
 8006c74:	e002      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e000      	b.n	8006c7c <UART_SetConfig+0x4e4>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c80:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c82:	e059      	b.n	8006d38 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d04e      	beq.n	8006d2a <UART_SetConfig+0x592>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d047      	beq.n	8006d24 <UART_SetConfig+0x58c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d040      	beq.n	8006d1e <UART_SetConfig+0x586>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d039      	beq.n	8006d18 <UART_SetConfig+0x580>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d032      	beq.n	8006d12 <UART_SetConfig+0x57a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	2b05      	cmp	r3, #5
 8006cb2:	d02b      	beq.n	8006d0c <UART_SetConfig+0x574>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	d024      	beq.n	8006d06 <UART_SetConfig+0x56e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	2b07      	cmp	r3, #7
 8006cc2:	d01d      	beq.n	8006d00 <UART_SetConfig+0x568>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d016      	beq.n	8006cfa <UART_SetConfig+0x562>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	d00f      	beq.n	8006cf4 <UART_SetConfig+0x55c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	2b0a      	cmp	r3, #10
 8006cda:	d008      	beq.n	8006cee <UART_SetConfig+0x556>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	2b0b      	cmp	r3, #11
 8006ce2:	d101      	bne.n	8006ce8 <UART_SetConfig+0x550>
 8006ce4:	2380      	movs	r3, #128	; 0x80
 8006ce6:	e022      	b.n	8006d2e <UART_SetConfig+0x596>
 8006ce8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cec:	e01f      	b.n	8006d2e <UART_SetConfig+0x596>
 8006cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cf2:	e01c      	b.n	8006d2e <UART_SetConfig+0x596>
 8006cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf8:	e019      	b.n	8006d2e <UART_SetConfig+0x596>
 8006cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cfe:	e016      	b.n	8006d2e <UART_SetConfig+0x596>
 8006d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d04:	e013      	b.n	8006d2e <UART_SetConfig+0x596>
 8006d06:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006d0a:	e010      	b.n	8006d2e <UART_SetConfig+0x596>
 8006d0c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006d10:	e00d      	b.n	8006d2e <UART_SetConfig+0x596>
 8006d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d16:	e00a      	b.n	8006d2e <UART_SetConfig+0x596>
 8006d18:	f241 5355 	movw	r3, #5461	; 0x1555
 8006d1c:	e007      	b.n	8006d2e <UART_SetConfig+0x596>
 8006d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d22:	e004      	b.n	8006d2e <UART_SetConfig+0x596>
 8006d24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d28:	e001      	b.n	8006d2e <UART_SetConfig+0x596>
 8006d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d30:	e002      	b.n	8006d38 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	74fb      	strb	r3, [r7, #19]
        break;
 8006d36:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 86c2 	beq.w	8007ac4 <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	4413      	add	r3, r2
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d305      	bcc.n	8006d5c <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d903      	bls.n	8006d64 <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	74fb      	strb	r3, [r7, #19]
 8006d60:	f000 beb0 	b.w	8007ac4 <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 8006d64:	7efb      	ldrb	r3, [r7, #27]
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	f200 828c 	bhi.w	8007284 <UART_SetConfig+0xaec>
 8006d6c:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <UART_SetConfig+0x5dc>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006d99 	.word	0x08006d99
 8006d78:	08007285 	.word	0x08007285
 8006d7c:	08006f03 	.word	0x08006f03
 8006d80:	08007285 	.word	0x08007285
 8006d84:	08006ff9 	.word	0x08006ff9
 8006d88:	08007285 	.word	0x08007285
 8006d8c:	08007285 	.word	0x08007285
 8006d90:	08007285 	.word	0x08007285
 8006d94:	08007135 	.word	0x08007135
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d98:	f7fd f97a 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f04f 0100 	mov.w	r1, #0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d07e      	beq.n	8006eaa <UART_SetConfig+0x712>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d075      	beq.n	8006ea0 <UART_SetConfig+0x708>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d06c      	beq.n	8006e96 <UART_SetConfig+0x6fe>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d063      	beq.n	8006e8c <UART_SetConfig+0x6f4>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d05a      	beq.n	8006e82 <UART_SetConfig+0x6ea>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	2b05      	cmp	r3, #5
 8006dd2:	d051      	beq.n	8006e78 <UART_SetConfig+0x6e0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	2b06      	cmp	r3, #6
 8006dda:	d048      	beq.n	8006e6e <UART_SetConfig+0x6d6>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	2b07      	cmp	r3, #7
 8006de2:	d03f      	beq.n	8006e64 <UART_SetConfig+0x6cc>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d01f      	beq.n	8006e2c <UART_SetConfig+0x694>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	2b09      	cmp	r3, #9
 8006df2:	d016      	beq.n	8006e22 <UART_SetConfig+0x68a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	2b0a      	cmp	r3, #10
 8006dfa:	d00d      	beq.n	8006e18 <UART_SetConfig+0x680>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	2b0b      	cmp	r3, #11
 8006e02:	d104      	bne.n	8006e0e <UART_SetConfig+0x676>
 8006e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e08:	f04f 0400 	mov.w	r4, #0
 8006e0c:	e051      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e0e:	f04f 0301 	mov.w	r3, #1
 8006e12:	f04f 0400 	mov.w	r4, #0
 8006e16:	e04c      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e18:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006e1c:	f04f 0400 	mov.w	r4, #0
 8006e20:	e047      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e22:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006e26:	f04f 0400 	mov.w	r4, #0
 8006e2a:	e042      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e2c:	f04f 0320 	mov.w	r3, #32
 8006e30:	f04f 0400 	mov.w	r4, #0
 8006e34:	e03d      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e36:	bf00      	nop
 8006e38:	00f42400 	.word	0x00f42400
 8006e3c:	0001e848 	.word	0x0001e848
 8006e40:	0003d090 	.word	0x0003d090
 8006e44:	0007a120 	.word	0x0007a120
 8006e48:	000f4240 	.word	0x000f4240
 8006e4c:	00145855 	.word	0x00145855
 8006e50:	00186a00 	.word	0x00186a00
 8006e54:	001e8480 	.word	0x001e8480
 8006e58:	0028b0aa 	.word	0x0028b0aa
 8006e5c:	003d0900 	.word	0x003d0900
 8006e60:	007a1200 	.word	0x007a1200
 8006e64:	f04f 0310 	mov.w	r3, #16
 8006e68:	f04f 0400 	mov.w	r4, #0
 8006e6c:	e021      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e6e:	f04f 030c 	mov.w	r3, #12
 8006e72:	f04f 0400 	mov.w	r4, #0
 8006e76:	e01c      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e78:	f04f 030a 	mov.w	r3, #10
 8006e7c:	f04f 0400 	mov.w	r4, #0
 8006e80:	e017      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e82:	f04f 0308 	mov.w	r3, #8
 8006e86:	f04f 0400 	mov.w	r4, #0
 8006e8a:	e012      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e8c:	f04f 0306 	mov.w	r3, #6
 8006e90:	f04f 0400 	mov.w	r4, #0
 8006e94:	e00d      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006e96:	f04f 0304 	mov.w	r3, #4
 8006e9a:	f04f 0400 	mov.w	r4, #0
 8006e9e:	e008      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006ea0:	f04f 0302 	mov.w	r3, #2
 8006ea4:	f04f 0400 	mov.w	r4, #0
 8006ea8:	e003      	b.n	8006eb2 <UART_SetConfig+0x71a>
 8006eaa:	f04f 0301 	mov.w	r3, #1
 8006eae:	f04f 0400 	mov.w	r4, #0
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	4623      	mov	r3, r4
 8006eb6:	f7f9 fde9 	bl	8000a8c <__aeabi_uldivmod>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	f04f 0400 	mov.w	r4, #0
 8006eca:	0214      	lsls	r4, r2, #8
 8006ecc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006ed0:	020b      	lsls	r3, r1, #8
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6852      	ldr	r2, [r2, #4]
 8006ed6:	0852      	lsrs	r2, r2, #1
 8006ed8:	4611      	mov	r1, r2
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	eb13 0b01 	adds.w	fp, r3, r1
 8006ee2:	eb44 0c02 	adc.w	ip, r4, r2
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	4661      	mov	r1, ip
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f04f 0400 	mov.w	r4, #0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	f7f9 fdc9 	bl	8000a8c <__aeabi_uldivmod>
 8006efa:	4603      	mov	r3, r0
 8006efc:	460c      	mov	r4, r1
 8006efe:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8006f00:	e1c3      	b.n	800728a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d05b      	beq.n	8006fc2 <UART_SetConfig+0x82a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d053      	beq.n	8006fba <UART_SetConfig+0x822>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d04b      	beq.n	8006fb2 <UART_SetConfig+0x81a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d043      	beq.n	8006faa <UART_SetConfig+0x812>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d03b      	beq.n	8006fa2 <UART_SetConfig+0x80a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b05      	cmp	r3, #5
 8006f30:	d033      	beq.n	8006f9a <UART_SetConfig+0x802>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b06      	cmp	r3, #6
 8006f38:	d02b      	beq.n	8006f92 <UART_SetConfig+0x7fa>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b07      	cmp	r3, #7
 8006f40:	d023      	beq.n	8006f8a <UART_SetConfig+0x7f2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d01b      	beq.n	8006f82 <UART_SetConfig+0x7ea>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	2b09      	cmp	r3, #9
 8006f50:	d013      	beq.n	8006f7a <UART_SetConfig+0x7e2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	2b0a      	cmp	r3, #10
 8006f58:	d00b      	beq.n	8006f72 <UART_SetConfig+0x7da>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b0b      	cmp	r3, #11
 8006f60:	d103      	bne.n	8006f6a <UART_SetConfig+0x7d2>
 8006f62:	4bad      	ldr	r3, [pc, #692]	; (8007218 <UART_SetConfig+0xa80>)
 8006f64:	f04f 0400 	mov.w	r4, #0
 8006f68:	e02e      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006f6a:	4bac      	ldr	r3, [pc, #688]	; (800721c <UART_SetConfig+0xa84>)
 8006f6c:	f04f 0400 	mov.w	r4, #0
 8006f70:	e02a      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006f72:	4bab      	ldr	r3, [pc, #684]	; (8007220 <UART_SetConfig+0xa88>)
 8006f74:	f04f 0400 	mov.w	r4, #0
 8006f78:	e026      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006f7a:	4baa      	ldr	r3, [pc, #680]	; (8007224 <UART_SetConfig+0xa8c>)
 8006f7c:	f04f 0400 	mov.w	r4, #0
 8006f80:	e022      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006f82:	4ba9      	ldr	r3, [pc, #676]	; (8007228 <UART_SetConfig+0xa90>)
 8006f84:	f04f 0400 	mov.w	r4, #0
 8006f88:	e01e      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006f8a:	4ba8      	ldr	r3, [pc, #672]	; (800722c <UART_SetConfig+0xa94>)
 8006f8c:	f04f 0400 	mov.w	r4, #0
 8006f90:	e01a      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006f92:	a49d      	add	r4, pc, #628	; (adr r4, 8007208 <UART_SetConfig+0xa70>)
 8006f94:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006f98:	e016      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006f9a:	4ba5      	ldr	r3, [pc, #660]	; (8007230 <UART_SetConfig+0xa98>)
 8006f9c:	f04f 0400 	mov.w	r4, #0
 8006fa0:	e012      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006fa2:	4ba4      	ldr	r3, [pc, #656]	; (8007234 <UART_SetConfig+0xa9c>)
 8006fa4:	f04f 0400 	mov.w	r4, #0
 8006fa8:	e00e      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006faa:	a499      	add	r4, pc, #612	; (adr r4, 8007210 <UART_SetConfig+0xa78>)
 8006fac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006fb0:	e00a      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006fb2:	4ba1      	ldr	r3, [pc, #644]	; (8007238 <UART_SetConfig+0xaa0>)
 8006fb4:	f04f 0400 	mov.w	r4, #0
 8006fb8:	e006      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006fba:	4ba0      	ldr	r3, [pc, #640]	; (800723c <UART_SetConfig+0xaa4>)
 8006fbc:	f04f 0400 	mov.w	r4, #0
 8006fc0:	e002      	b.n	8006fc8 <UART_SetConfig+0x830>
 8006fc2:	4b96      	ldr	r3, [pc, #600]	; (800721c <UART_SetConfig+0xa84>)
 8006fc4:	f04f 0400 	mov.w	r4, #0
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6852      	ldr	r2, [r2, #4]
 8006fcc:	0852      	lsrs	r2, r2, #1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	eb13 0b01 	adds.w	fp, r3, r1
 8006fd8:	eb44 0c02 	adc.w	ip, r4, r2
 8006fdc:	4658      	mov	r0, fp
 8006fde:	4661      	mov	r1, ip
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f04f 0400 	mov.w	r4, #0
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4623      	mov	r3, r4
 8006fec:	f7f9 fd4e 	bl	8000a8c <__aeabi_uldivmod>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ff6:	e148      	b.n	800728a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ff8:	f7fc ffb4 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f04f 0100 	mov.w	r1, #0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d067      	beq.n	80070dc <UART_SetConfig+0x944>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b01      	cmp	r3, #1
 8007012:	d05e      	beq.n	80070d2 <UART_SetConfig+0x93a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	2b02      	cmp	r3, #2
 800701a:	d055      	beq.n	80070c8 <UART_SetConfig+0x930>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b03      	cmp	r3, #3
 8007022:	d04c      	beq.n	80070be <UART_SetConfig+0x926>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	2b04      	cmp	r3, #4
 800702a:	d043      	beq.n	80070b4 <UART_SetConfig+0x91c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	2b05      	cmp	r3, #5
 8007032:	d03a      	beq.n	80070aa <UART_SetConfig+0x912>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b06      	cmp	r3, #6
 800703a:	d031      	beq.n	80070a0 <UART_SetConfig+0x908>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	2b07      	cmp	r3, #7
 8007042:	d028      	beq.n	8007096 <UART_SetConfig+0x8fe>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	2b08      	cmp	r3, #8
 800704a:	d01f      	beq.n	800708c <UART_SetConfig+0x8f4>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	2b09      	cmp	r3, #9
 8007052:	d016      	beq.n	8007082 <UART_SetConfig+0x8ea>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2b0a      	cmp	r3, #10
 800705a:	d00d      	beq.n	8007078 <UART_SetConfig+0x8e0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	2b0b      	cmp	r3, #11
 8007062:	d104      	bne.n	800706e <UART_SetConfig+0x8d6>
 8007064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007068:	f04f 0400 	mov.w	r4, #0
 800706c:	e03a      	b.n	80070e4 <UART_SetConfig+0x94c>
 800706e:	f04f 0301 	mov.w	r3, #1
 8007072:	f04f 0400 	mov.w	r4, #0
 8007076:	e035      	b.n	80070e4 <UART_SetConfig+0x94c>
 8007078:	f04f 0380 	mov.w	r3, #128	; 0x80
 800707c:	f04f 0400 	mov.w	r4, #0
 8007080:	e030      	b.n	80070e4 <UART_SetConfig+0x94c>
 8007082:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007086:	f04f 0400 	mov.w	r4, #0
 800708a:	e02b      	b.n	80070e4 <UART_SetConfig+0x94c>
 800708c:	f04f 0320 	mov.w	r3, #32
 8007090:	f04f 0400 	mov.w	r4, #0
 8007094:	e026      	b.n	80070e4 <UART_SetConfig+0x94c>
 8007096:	f04f 0310 	mov.w	r3, #16
 800709a:	f04f 0400 	mov.w	r4, #0
 800709e:	e021      	b.n	80070e4 <UART_SetConfig+0x94c>
 80070a0:	f04f 030c 	mov.w	r3, #12
 80070a4:	f04f 0400 	mov.w	r4, #0
 80070a8:	e01c      	b.n	80070e4 <UART_SetConfig+0x94c>
 80070aa:	f04f 030a 	mov.w	r3, #10
 80070ae:	f04f 0400 	mov.w	r4, #0
 80070b2:	e017      	b.n	80070e4 <UART_SetConfig+0x94c>
 80070b4:	f04f 0308 	mov.w	r3, #8
 80070b8:	f04f 0400 	mov.w	r4, #0
 80070bc:	e012      	b.n	80070e4 <UART_SetConfig+0x94c>
 80070be:	f04f 0306 	mov.w	r3, #6
 80070c2:	f04f 0400 	mov.w	r4, #0
 80070c6:	e00d      	b.n	80070e4 <UART_SetConfig+0x94c>
 80070c8:	f04f 0304 	mov.w	r3, #4
 80070cc:	f04f 0400 	mov.w	r4, #0
 80070d0:	e008      	b.n	80070e4 <UART_SetConfig+0x94c>
 80070d2:	f04f 0302 	mov.w	r3, #2
 80070d6:	f04f 0400 	mov.w	r4, #0
 80070da:	e003      	b.n	80070e4 <UART_SetConfig+0x94c>
 80070dc:	f04f 0301 	mov.w	r3, #1
 80070e0:	f04f 0400 	mov.w	r4, #0
 80070e4:	461a      	mov	r2, r3
 80070e6:	4623      	mov	r3, r4
 80070e8:	f7f9 fcd0 	bl	8000a8c <__aeabi_uldivmod>
 80070ec:	4603      	mov	r3, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	4619      	mov	r1, r3
 80070f2:	4622      	mov	r2, r4
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	f04f 0400 	mov.w	r4, #0
 80070fc:	0214      	lsls	r4, r2, #8
 80070fe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007102:	020b      	lsls	r3, r1, #8
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6852      	ldr	r2, [r2, #4]
 8007108:	0852      	lsrs	r2, r2, #1
 800710a:	4611      	mov	r1, r2
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	eb13 0b01 	adds.w	fp, r3, r1
 8007114:	eb44 0c02 	adc.w	ip, r4, r2
 8007118:	4658      	mov	r0, fp
 800711a:	4661      	mov	r1, ip
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f04f 0400 	mov.w	r4, #0
 8007124:	461a      	mov	r2, r3
 8007126:	4623      	mov	r3, r4
 8007128:	f7f9 fcb0 	bl	8000a8c <__aeabi_uldivmod>
 800712c:	4603      	mov	r3, r0
 800712e:	460c      	mov	r4, r1
 8007130:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8007132:	e0aa      	b.n	800728a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8087 	beq.w	800724c <UART_SetConfig+0xab4>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2b01      	cmp	r3, #1
 8007144:	d05b      	beq.n	80071fe <UART_SetConfig+0xa66>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	2b02      	cmp	r3, #2
 800714c:	d052      	beq.n	80071f4 <UART_SetConfig+0xa5c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	2b03      	cmp	r3, #3
 8007154:	d04a      	beq.n	80071ec <UART_SetConfig+0xa54>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	2b04      	cmp	r3, #4
 800715c:	d041      	beq.n	80071e2 <UART_SetConfig+0xa4a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b05      	cmp	r3, #5
 8007164:	d039      	beq.n	80071da <UART_SetConfig+0xa42>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	2b06      	cmp	r3, #6
 800716c:	d031      	beq.n	80071d2 <UART_SetConfig+0xa3a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	2b07      	cmp	r3, #7
 8007174:	d028      	beq.n	80071c8 <UART_SetConfig+0xa30>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	2b08      	cmp	r3, #8
 800717c:	d01f      	beq.n	80071be <UART_SetConfig+0xa26>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	2b09      	cmp	r3, #9
 8007184:	d016      	beq.n	80071b4 <UART_SetConfig+0xa1c>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	2b0a      	cmp	r3, #10
 800718c:	d00d      	beq.n	80071aa <UART_SetConfig+0xa12>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	2b0b      	cmp	r3, #11
 8007194:	d104      	bne.n	80071a0 <UART_SetConfig+0xa08>
 8007196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719a:	f04f 0400 	mov.w	r4, #0
 800719e:	e059      	b.n	8007254 <UART_SetConfig+0xabc>
 80071a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80071a4:	f04f 0400 	mov.w	r4, #0
 80071a8:	e054      	b.n	8007254 <UART_SetConfig+0xabc>
 80071aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071ae:	f04f 0400 	mov.w	r4, #0
 80071b2:	e04f      	b.n	8007254 <UART_SetConfig+0xabc>
 80071b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071b8:	f04f 0400 	mov.w	r4, #0
 80071bc:	e04a      	b.n	8007254 <UART_SetConfig+0xabc>
 80071be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80071c2:	f04f 0400 	mov.w	r4, #0
 80071c6:	e045      	b.n	8007254 <UART_SetConfig+0xabc>
 80071c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071cc:	f04f 0400 	mov.w	r4, #0
 80071d0:	e040      	b.n	8007254 <UART_SetConfig+0xabc>
 80071d2:	4b1b      	ldr	r3, [pc, #108]	; (8007240 <UART_SetConfig+0xaa8>)
 80071d4:	f04f 0400 	mov.w	r4, #0
 80071d8:	e03c      	b.n	8007254 <UART_SetConfig+0xabc>
 80071da:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <UART_SetConfig+0xaac>)
 80071dc:	f04f 0400 	mov.w	r4, #0
 80071e0:	e038      	b.n	8007254 <UART_SetConfig+0xabc>
 80071e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80071e6:	f04f 0400 	mov.w	r4, #0
 80071ea:	e033      	b.n	8007254 <UART_SetConfig+0xabc>
 80071ec:	4b16      	ldr	r3, [pc, #88]	; (8007248 <UART_SetConfig+0xab0>)
 80071ee:	f04f 0400 	mov.w	r4, #0
 80071f2:	e02f      	b.n	8007254 <UART_SetConfig+0xabc>
 80071f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80071f8:	f04f 0400 	mov.w	r4, #0
 80071fc:	e02a      	b.n	8007254 <UART_SetConfig+0xabc>
 80071fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007202:	f04f 0400 	mov.w	r4, #0
 8007206:	e025      	b.n	8007254 <UART_SetConfig+0xabc>
 8007208:	14585500 	.word	0x14585500
 800720c:	00000000 	.word	0x00000000
 8007210:	28b0aa00 	.word	0x28b0aa00
 8007214:	00000000 	.word	0x00000000
 8007218:	00f42400 	.word	0x00f42400
 800721c:	f4240000 	.word	0xf4240000
 8007220:	01e84800 	.word	0x01e84800
 8007224:	03d09000 	.word	0x03d09000
 8007228:	07a12000 	.word	0x07a12000
 800722c:	0f424000 	.word	0x0f424000
 8007230:	186a0000 	.word	0x186a0000
 8007234:	1e848000 	.word	0x1e848000
 8007238:	3d090000 	.word	0x3d090000
 800723c:	7a120000 	.word	0x7a120000
 8007240:	000aaa00 	.word	0x000aaa00
 8007244:	000ccc00 	.word	0x000ccc00
 8007248:	00155500 	.word	0x00155500
 800724c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007250:	f04f 0400 	mov.w	r4, #0
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6852      	ldr	r2, [r2, #4]
 8007258:	0852      	lsrs	r2, r2, #1
 800725a:	4611      	mov	r1, r2
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	eb13 0b01 	adds.w	fp, r3, r1
 8007264:	eb44 0c02 	adc.w	ip, r4, r2
 8007268:	4658      	mov	r0, fp
 800726a:	4661      	mov	r1, ip
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f04f 0400 	mov.w	r4, #0
 8007274:	461a      	mov	r2, r3
 8007276:	4623      	mov	r3, r4
 8007278:	f7f9 fc08 	bl	8000a8c <__aeabi_uldivmod>
 800727c:	4603      	mov	r3, r0
 800727e:	460c      	mov	r4, r1
 8007280:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8007282:	e002      	b.n	800728a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	74fb      	strb	r3, [r7, #19]
            break;
 8007288:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007290:	d309      	bcc.n	80072a6 <UART_SetConfig+0xb0e>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007298:	d205      	bcs.n	80072a6 <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	60da      	str	r2, [r3, #12]
 80072a2:	f000 bc0f 	b.w	8007ac4 <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	74fb      	strb	r3, [r7, #19]
 80072aa:	f000 bc0b 	b.w	8007ac4 <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b6:	f040 81ff 	bne.w	80076b8 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 80072ba:	7efb      	ldrb	r3, [r7, #27]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	f200 81db 	bhi.w	8007678 <UART_SetConfig+0xee0>
 80072c2:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <UART_SetConfig+0xb30>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080073a3 	.word	0x080073a3
 80072d0:	08007459 	.word	0x08007459
 80072d4:	08007679 	.word	0x08007679
 80072d8:	08007501 	.word	0x08007501
 80072dc:	08007679 	.word	0x08007679
 80072e0:	08007679 	.word	0x08007679
 80072e4:	08007679 	.word	0x08007679
 80072e8:	080075b7 	.word	0x080075b7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ec:	f7fc fed0 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 80072f0:	4602      	mov	r2, r0
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d044      	beq.n	8007384 <UART_SetConfig+0xbec>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d03e      	beq.n	8007380 <UART_SetConfig+0xbe8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	2b02      	cmp	r3, #2
 8007308:	d038      	beq.n	800737c <UART_SetConfig+0xbe4>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	2b03      	cmp	r3, #3
 8007310:	d032      	beq.n	8007378 <UART_SetConfig+0xbe0>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	2b04      	cmp	r3, #4
 8007318:	d02c      	beq.n	8007374 <UART_SetConfig+0xbdc>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	2b05      	cmp	r3, #5
 8007320:	d026      	beq.n	8007370 <UART_SetConfig+0xbd8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	2b06      	cmp	r3, #6
 8007328:	d020      	beq.n	800736c <UART_SetConfig+0xbd4>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b07      	cmp	r3, #7
 8007330:	d01a      	beq.n	8007368 <UART_SetConfig+0xbd0>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	2b08      	cmp	r3, #8
 8007338:	d014      	beq.n	8007364 <UART_SetConfig+0xbcc>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	2b09      	cmp	r3, #9
 8007340:	d00e      	beq.n	8007360 <UART_SetConfig+0xbc8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2b0a      	cmp	r3, #10
 8007348:	d008      	beq.n	800735c <UART_SetConfig+0xbc4>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	2b0b      	cmp	r3, #11
 8007350:	d102      	bne.n	8007358 <UART_SetConfig+0xbc0>
 8007352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007356:	e016      	b.n	8007386 <UART_SetConfig+0xbee>
 8007358:	2301      	movs	r3, #1
 800735a:	e014      	b.n	8007386 <UART_SetConfig+0xbee>
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	e012      	b.n	8007386 <UART_SetConfig+0xbee>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	e010      	b.n	8007386 <UART_SetConfig+0xbee>
 8007364:	2320      	movs	r3, #32
 8007366:	e00e      	b.n	8007386 <UART_SetConfig+0xbee>
 8007368:	2310      	movs	r3, #16
 800736a:	e00c      	b.n	8007386 <UART_SetConfig+0xbee>
 800736c:	230c      	movs	r3, #12
 800736e:	e00a      	b.n	8007386 <UART_SetConfig+0xbee>
 8007370:	230a      	movs	r3, #10
 8007372:	e008      	b.n	8007386 <UART_SetConfig+0xbee>
 8007374:	2308      	movs	r3, #8
 8007376:	e006      	b.n	8007386 <UART_SetConfig+0xbee>
 8007378:	2306      	movs	r3, #6
 800737a:	e004      	b.n	8007386 <UART_SetConfig+0xbee>
 800737c:	2304      	movs	r3, #4
 800737e:	e002      	b.n	8007386 <UART_SetConfig+0xbee>
 8007380:	2302      	movs	r3, #2
 8007382:	e000      	b.n	8007386 <UART_SetConfig+0xbee>
 8007384:	2301      	movs	r3, #1
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	005a      	lsls	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	441a      	add	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	b29b      	uxth	r3, r3
 800739e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80073a0:	e16d      	b.n	800767e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a2:	f7fc fe8b 	bl	80040bc <HAL_RCC_GetPCLK2Freq>
 80073a6:	4602      	mov	r2, r0
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d044      	beq.n	800743a <UART_SetConfig+0xca2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d03e      	beq.n	8007436 <UART_SetConfig+0xc9e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d038      	beq.n	8007432 <UART_SetConfig+0xc9a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d032      	beq.n	800742e <UART_SetConfig+0xc96>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d02c      	beq.n	800742a <UART_SetConfig+0xc92>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2b05      	cmp	r3, #5
 80073d6:	d026      	beq.n	8007426 <UART_SetConfig+0xc8e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b06      	cmp	r3, #6
 80073de:	d020      	beq.n	8007422 <UART_SetConfig+0xc8a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	2b07      	cmp	r3, #7
 80073e6:	d01a      	beq.n	800741e <UART_SetConfig+0xc86>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d014      	beq.n	800741a <UART_SetConfig+0xc82>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d00e      	beq.n	8007416 <UART_SetConfig+0xc7e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	2b0a      	cmp	r3, #10
 80073fe:	d008      	beq.n	8007412 <UART_SetConfig+0xc7a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	2b0b      	cmp	r3, #11
 8007406:	d102      	bne.n	800740e <UART_SetConfig+0xc76>
 8007408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800740c:	e016      	b.n	800743c <UART_SetConfig+0xca4>
 800740e:	2301      	movs	r3, #1
 8007410:	e014      	b.n	800743c <UART_SetConfig+0xca4>
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	e012      	b.n	800743c <UART_SetConfig+0xca4>
 8007416:	2340      	movs	r3, #64	; 0x40
 8007418:	e010      	b.n	800743c <UART_SetConfig+0xca4>
 800741a:	2320      	movs	r3, #32
 800741c:	e00e      	b.n	800743c <UART_SetConfig+0xca4>
 800741e:	2310      	movs	r3, #16
 8007420:	e00c      	b.n	800743c <UART_SetConfig+0xca4>
 8007422:	230c      	movs	r3, #12
 8007424:	e00a      	b.n	800743c <UART_SetConfig+0xca4>
 8007426:	230a      	movs	r3, #10
 8007428:	e008      	b.n	800743c <UART_SetConfig+0xca4>
 800742a:	2308      	movs	r3, #8
 800742c:	e006      	b.n	800743c <UART_SetConfig+0xca4>
 800742e:	2306      	movs	r3, #6
 8007430:	e004      	b.n	800743c <UART_SetConfig+0xca4>
 8007432:	2304      	movs	r3, #4
 8007434:	e002      	b.n	800743c <UART_SetConfig+0xca4>
 8007436:	2302      	movs	r3, #2
 8007438:	e000      	b.n	800743c <UART_SetConfig+0xca4>
 800743a:	2301      	movs	r3, #1
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	005a      	lsls	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	085b      	lsrs	r3, r3, #1
 8007448:	441a      	add	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007452:	b29b      	uxth	r3, r3
 8007454:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8007456:	e112      	b.n	800767e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d043      	beq.n	80074e8 <UART_SetConfig+0xd50>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	2b01      	cmp	r3, #1
 8007466:	d03d      	beq.n	80074e4 <UART_SetConfig+0xd4c>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	2b02      	cmp	r3, #2
 800746e:	d037      	beq.n	80074e0 <UART_SetConfig+0xd48>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	2b03      	cmp	r3, #3
 8007476:	d031      	beq.n	80074dc <UART_SetConfig+0xd44>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	2b04      	cmp	r3, #4
 800747e:	d02b      	beq.n	80074d8 <UART_SetConfig+0xd40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	2b05      	cmp	r3, #5
 8007486:	d025      	beq.n	80074d4 <UART_SetConfig+0xd3c>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	2b06      	cmp	r3, #6
 800748e:	d01f      	beq.n	80074d0 <UART_SetConfig+0xd38>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	2b07      	cmp	r3, #7
 8007496:	d019      	beq.n	80074cc <UART_SetConfig+0xd34>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b08      	cmp	r3, #8
 800749e:	d013      	beq.n	80074c8 <UART_SetConfig+0xd30>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b09      	cmp	r3, #9
 80074a6:	d00d      	beq.n	80074c4 <UART_SetConfig+0xd2c>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2b0a      	cmp	r3, #10
 80074ae:	d007      	beq.n	80074c0 <UART_SetConfig+0xd28>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b0b      	cmp	r3, #11
 80074b6:	d101      	bne.n	80074bc <UART_SetConfig+0xd24>
 80074b8:	4b8c      	ldr	r3, [pc, #560]	; (80076ec <UART_SetConfig+0xf54>)
 80074ba:	e016      	b.n	80074ea <UART_SetConfig+0xd52>
 80074bc:	4b8c      	ldr	r3, [pc, #560]	; (80076f0 <UART_SetConfig+0xf58>)
 80074be:	e014      	b.n	80074ea <UART_SetConfig+0xd52>
 80074c0:	4b8c      	ldr	r3, [pc, #560]	; (80076f4 <UART_SetConfig+0xf5c>)
 80074c2:	e012      	b.n	80074ea <UART_SetConfig+0xd52>
 80074c4:	4b8c      	ldr	r3, [pc, #560]	; (80076f8 <UART_SetConfig+0xf60>)
 80074c6:	e010      	b.n	80074ea <UART_SetConfig+0xd52>
 80074c8:	4b8c      	ldr	r3, [pc, #560]	; (80076fc <UART_SetConfig+0xf64>)
 80074ca:	e00e      	b.n	80074ea <UART_SetConfig+0xd52>
 80074cc:	4b8c      	ldr	r3, [pc, #560]	; (8007700 <UART_SetConfig+0xf68>)
 80074ce:	e00c      	b.n	80074ea <UART_SetConfig+0xd52>
 80074d0:	4b8c      	ldr	r3, [pc, #560]	; (8007704 <UART_SetConfig+0xf6c>)
 80074d2:	e00a      	b.n	80074ea <UART_SetConfig+0xd52>
 80074d4:	4b8c      	ldr	r3, [pc, #560]	; (8007708 <UART_SetConfig+0xf70>)
 80074d6:	e008      	b.n	80074ea <UART_SetConfig+0xd52>
 80074d8:	4b8c      	ldr	r3, [pc, #560]	; (800770c <UART_SetConfig+0xf74>)
 80074da:	e006      	b.n	80074ea <UART_SetConfig+0xd52>
 80074dc:	4b8c      	ldr	r3, [pc, #560]	; (8007710 <UART_SetConfig+0xf78>)
 80074de:	e004      	b.n	80074ea <UART_SetConfig+0xd52>
 80074e0:	4b8c      	ldr	r3, [pc, #560]	; (8007714 <UART_SetConfig+0xf7c>)
 80074e2:	e002      	b.n	80074ea <UART_SetConfig+0xd52>
 80074e4:	4b8c      	ldr	r3, [pc, #560]	; (8007718 <UART_SetConfig+0xf80>)
 80074e6:	e000      	b.n	80074ea <UART_SetConfig+0xd52>
 80074e8:	4b81      	ldr	r3, [pc, #516]	; (80076f0 <UART_SetConfig+0xf58>)
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6852      	ldr	r2, [r2, #4]
 80074ee:	0852      	lsrs	r2, r2, #1
 80074f0:	441a      	add	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80074fe:	e0be      	b.n	800767e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007500:	f7fc fd30 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8007504:	4602      	mov	r2, r0
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	2b00      	cmp	r3, #0
 800750c:	d044      	beq.n	8007598 <UART_SetConfig+0xe00>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b01      	cmp	r3, #1
 8007514:	d03e      	beq.n	8007594 <UART_SetConfig+0xdfc>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	2b02      	cmp	r3, #2
 800751c:	d038      	beq.n	8007590 <UART_SetConfig+0xdf8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b03      	cmp	r3, #3
 8007524:	d032      	beq.n	800758c <UART_SetConfig+0xdf4>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2b04      	cmp	r3, #4
 800752c:	d02c      	beq.n	8007588 <UART_SetConfig+0xdf0>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2b05      	cmp	r3, #5
 8007534:	d026      	beq.n	8007584 <UART_SetConfig+0xdec>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b06      	cmp	r3, #6
 800753c:	d020      	beq.n	8007580 <UART_SetConfig+0xde8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b07      	cmp	r3, #7
 8007544:	d01a      	beq.n	800757c <UART_SetConfig+0xde4>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	2b08      	cmp	r3, #8
 800754c:	d014      	beq.n	8007578 <UART_SetConfig+0xde0>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	2b09      	cmp	r3, #9
 8007554:	d00e      	beq.n	8007574 <UART_SetConfig+0xddc>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	2b0a      	cmp	r3, #10
 800755c:	d008      	beq.n	8007570 <UART_SetConfig+0xdd8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	2b0b      	cmp	r3, #11
 8007564:	d102      	bne.n	800756c <UART_SetConfig+0xdd4>
 8007566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800756a:	e016      	b.n	800759a <UART_SetConfig+0xe02>
 800756c:	2301      	movs	r3, #1
 800756e:	e014      	b.n	800759a <UART_SetConfig+0xe02>
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	e012      	b.n	800759a <UART_SetConfig+0xe02>
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	e010      	b.n	800759a <UART_SetConfig+0xe02>
 8007578:	2320      	movs	r3, #32
 800757a:	e00e      	b.n	800759a <UART_SetConfig+0xe02>
 800757c:	2310      	movs	r3, #16
 800757e:	e00c      	b.n	800759a <UART_SetConfig+0xe02>
 8007580:	230c      	movs	r3, #12
 8007582:	e00a      	b.n	800759a <UART_SetConfig+0xe02>
 8007584:	230a      	movs	r3, #10
 8007586:	e008      	b.n	800759a <UART_SetConfig+0xe02>
 8007588:	2308      	movs	r3, #8
 800758a:	e006      	b.n	800759a <UART_SetConfig+0xe02>
 800758c:	2306      	movs	r3, #6
 800758e:	e004      	b.n	800759a <UART_SetConfig+0xe02>
 8007590:	2304      	movs	r3, #4
 8007592:	e002      	b.n	800759a <UART_SetConfig+0xe02>
 8007594:	2302      	movs	r3, #2
 8007596:	e000      	b.n	800759a <UART_SetConfig+0xe02>
 8007598:	2301      	movs	r3, #1
 800759a:	fbb2 f3f3 	udiv	r3, r2, r3
 800759e:	005a      	lsls	r2, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	441a      	add	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80075b4:	e063      	b.n	800767e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d04f      	beq.n	800765e <UART_SetConfig+0xec6>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d048      	beq.n	8007658 <UART_SetConfig+0xec0>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d041      	beq.n	8007652 <UART_SetConfig+0xeba>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d03a      	beq.n	800764c <UART_SetConfig+0xeb4>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d033      	beq.n	8007646 <UART_SetConfig+0xeae>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	d02c      	beq.n	8007640 <UART_SetConfig+0xea8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	2b06      	cmp	r3, #6
 80075ec:	d025      	beq.n	800763a <UART_SetConfig+0xea2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b07      	cmp	r3, #7
 80075f4:	d01e      	beq.n	8007634 <UART_SetConfig+0xe9c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d017      	beq.n	800762e <UART_SetConfig+0xe96>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	2b09      	cmp	r3, #9
 8007604:	d010      	beq.n	8007628 <UART_SetConfig+0xe90>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	2b0a      	cmp	r3, #10
 800760c:	d009      	beq.n	8007622 <UART_SetConfig+0xe8a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2b0b      	cmp	r3, #11
 8007614:	d102      	bne.n	800761c <UART_SetConfig+0xe84>
 8007616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800761a:	e022      	b.n	8007662 <UART_SetConfig+0xeca>
 800761c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007620:	e01f      	b.n	8007662 <UART_SetConfig+0xeca>
 8007622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007626:	e01c      	b.n	8007662 <UART_SetConfig+0xeca>
 8007628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800762c:	e019      	b.n	8007662 <UART_SetConfig+0xeca>
 800762e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007632:	e016      	b.n	8007662 <UART_SetConfig+0xeca>
 8007634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007638:	e013      	b.n	8007662 <UART_SetConfig+0xeca>
 800763a:	f241 5354 	movw	r3, #5460	; 0x1554
 800763e:	e010      	b.n	8007662 <UART_SetConfig+0xeca>
 8007640:	f641 1398 	movw	r3, #6552	; 0x1998
 8007644:	e00d      	b.n	8007662 <UART_SetConfig+0xeca>
 8007646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800764a:	e00a      	b.n	8007662 <UART_SetConfig+0xeca>
 800764c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007650:	e007      	b.n	8007662 <UART_SetConfig+0xeca>
 8007652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007656:	e004      	b.n	8007662 <UART_SetConfig+0xeca>
 8007658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765c:	e001      	b.n	8007662 <UART_SetConfig+0xeca>
 800765e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6852      	ldr	r2, [r2, #4]
 8007666:	0852      	lsrs	r2, r2, #1
 8007668:	441a      	add	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007672:	b29b      	uxth	r3, r3
 8007674:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8007676:	e002      	b.n	800767e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	74fb      	strb	r3, [r7, #19]
        break;
 800767c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b0f      	cmp	r3, #15
 8007682:	d916      	bls.n	80076b2 <UART_SetConfig+0xf1a>
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768a:	d212      	bcs.n	80076b2 <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f023 030f 	bic.w	r3, r3, #15
 8007694:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	b29b      	uxth	r3, r3
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	897b      	ldrh	r3, [r7, #10]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	897a      	ldrh	r2, [r7, #10]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	e208      	b.n	8007ac4 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	74fb      	strb	r3, [r7, #19]
 80076b6:	e205      	b.n	8007ac4 <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 80076b8:	7efb      	ldrb	r3, [r7, #27]
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	f200 81f1 	bhi.w	8007aa2 <UART_SetConfig+0x130a>
 80076c0:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <UART_SetConfig+0xf30>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	080077d1 	.word	0x080077d1
 80076d0:	08007885 	.word	0x08007885
 80076d4:	08007aa3 	.word	0x08007aa3
 80076d8:	0800792f 	.word	0x0800792f
 80076dc:	08007aa3 	.word	0x08007aa3
 80076e0:	08007aa3 	.word	0x08007aa3
 80076e4:	08007aa3 	.word	0x08007aa3
 80076e8:	080079e3 	.word	0x080079e3
 80076ec:	0001e848 	.word	0x0001e848
 80076f0:	01e84800 	.word	0x01e84800
 80076f4:	0003d090 	.word	0x0003d090
 80076f8:	0007a120 	.word	0x0007a120
 80076fc:	000f4240 	.word	0x000f4240
 8007700:	001e8480 	.word	0x001e8480
 8007704:	0028b0aa 	.word	0x0028b0aa
 8007708:	0030d400 	.word	0x0030d400
 800770c:	003d0900 	.word	0x003d0900
 8007710:	00516154 	.word	0x00516154
 8007714:	007a1200 	.word	0x007a1200
 8007718:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800771c:	f7fc fcb8 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 8007720:	4602      	mov	r2, r0
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	2b00      	cmp	r3, #0
 8007728:	d044      	beq.n	80077b4 <UART_SetConfig+0x101c>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	2b01      	cmp	r3, #1
 8007730:	d03e      	beq.n	80077b0 <UART_SetConfig+0x1018>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	2b02      	cmp	r3, #2
 8007738:	d038      	beq.n	80077ac <UART_SetConfig+0x1014>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	2b03      	cmp	r3, #3
 8007740:	d032      	beq.n	80077a8 <UART_SetConfig+0x1010>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	2b04      	cmp	r3, #4
 8007748:	d02c      	beq.n	80077a4 <UART_SetConfig+0x100c>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	2b05      	cmp	r3, #5
 8007750:	d026      	beq.n	80077a0 <UART_SetConfig+0x1008>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	2b06      	cmp	r3, #6
 8007758:	d020      	beq.n	800779c <UART_SetConfig+0x1004>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	2b07      	cmp	r3, #7
 8007760:	d01a      	beq.n	8007798 <UART_SetConfig+0x1000>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	2b08      	cmp	r3, #8
 8007768:	d014      	beq.n	8007794 <UART_SetConfig+0xffc>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	2b09      	cmp	r3, #9
 8007770:	d00e      	beq.n	8007790 <UART_SetConfig+0xff8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	2b0a      	cmp	r3, #10
 8007778:	d008      	beq.n	800778c <UART_SetConfig+0xff4>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	2b0b      	cmp	r3, #11
 8007780:	d102      	bne.n	8007788 <UART_SetConfig+0xff0>
 8007782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007786:	e016      	b.n	80077b6 <UART_SetConfig+0x101e>
 8007788:	2301      	movs	r3, #1
 800778a:	e014      	b.n	80077b6 <UART_SetConfig+0x101e>
 800778c:	2380      	movs	r3, #128	; 0x80
 800778e:	e012      	b.n	80077b6 <UART_SetConfig+0x101e>
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	e010      	b.n	80077b6 <UART_SetConfig+0x101e>
 8007794:	2320      	movs	r3, #32
 8007796:	e00e      	b.n	80077b6 <UART_SetConfig+0x101e>
 8007798:	2310      	movs	r3, #16
 800779a:	e00c      	b.n	80077b6 <UART_SetConfig+0x101e>
 800779c:	230c      	movs	r3, #12
 800779e:	e00a      	b.n	80077b6 <UART_SetConfig+0x101e>
 80077a0:	230a      	movs	r3, #10
 80077a2:	e008      	b.n	80077b6 <UART_SetConfig+0x101e>
 80077a4:	2308      	movs	r3, #8
 80077a6:	e006      	b.n	80077b6 <UART_SetConfig+0x101e>
 80077a8:	2306      	movs	r3, #6
 80077aa:	e004      	b.n	80077b6 <UART_SetConfig+0x101e>
 80077ac:	2304      	movs	r3, #4
 80077ae:	e002      	b.n	80077b6 <UART_SetConfig+0x101e>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e000      	b.n	80077b6 <UART_SetConfig+0x101e>
 80077b4:	2301      	movs	r3, #1
 80077b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	441a      	add	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80077ce:	e16b      	b.n	8007aa8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077d0:	f7fc fc74 	bl	80040bc <HAL_RCC_GetPCLK2Freq>
 80077d4:	4602      	mov	r2, r0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d044      	beq.n	8007868 <UART_SetConfig+0x10d0>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d03e      	beq.n	8007864 <UART_SetConfig+0x10cc>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d038      	beq.n	8007860 <UART_SetConfig+0x10c8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d032      	beq.n	800785c <UART_SetConfig+0x10c4>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d02c      	beq.n	8007858 <UART_SetConfig+0x10c0>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b05      	cmp	r3, #5
 8007804:	d026      	beq.n	8007854 <UART_SetConfig+0x10bc>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	2b06      	cmp	r3, #6
 800780c:	d020      	beq.n	8007850 <UART_SetConfig+0x10b8>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	2b07      	cmp	r3, #7
 8007814:	d01a      	beq.n	800784c <UART_SetConfig+0x10b4>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	2b08      	cmp	r3, #8
 800781c:	d014      	beq.n	8007848 <UART_SetConfig+0x10b0>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b09      	cmp	r3, #9
 8007824:	d00e      	beq.n	8007844 <UART_SetConfig+0x10ac>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b0a      	cmp	r3, #10
 800782c:	d008      	beq.n	8007840 <UART_SetConfig+0x10a8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	2b0b      	cmp	r3, #11
 8007834:	d102      	bne.n	800783c <UART_SetConfig+0x10a4>
 8007836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800783a:	e016      	b.n	800786a <UART_SetConfig+0x10d2>
 800783c:	2301      	movs	r3, #1
 800783e:	e014      	b.n	800786a <UART_SetConfig+0x10d2>
 8007840:	2380      	movs	r3, #128	; 0x80
 8007842:	e012      	b.n	800786a <UART_SetConfig+0x10d2>
 8007844:	2340      	movs	r3, #64	; 0x40
 8007846:	e010      	b.n	800786a <UART_SetConfig+0x10d2>
 8007848:	2320      	movs	r3, #32
 800784a:	e00e      	b.n	800786a <UART_SetConfig+0x10d2>
 800784c:	2310      	movs	r3, #16
 800784e:	e00c      	b.n	800786a <UART_SetConfig+0x10d2>
 8007850:	230c      	movs	r3, #12
 8007852:	e00a      	b.n	800786a <UART_SetConfig+0x10d2>
 8007854:	230a      	movs	r3, #10
 8007856:	e008      	b.n	800786a <UART_SetConfig+0x10d2>
 8007858:	2308      	movs	r3, #8
 800785a:	e006      	b.n	800786a <UART_SetConfig+0x10d2>
 800785c:	2306      	movs	r3, #6
 800785e:	e004      	b.n	800786a <UART_SetConfig+0x10d2>
 8007860:	2304      	movs	r3, #4
 8007862:	e002      	b.n	800786a <UART_SetConfig+0x10d2>
 8007864:	2302      	movs	r3, #2
 8007866:	e000      	b.n	800786a <UART_SetConfig+0x10d2>
 8007868:	2301      	movs	r3, #1
 800786a:	fbb2 f2f3 	udiv	r2, r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	085b      	lsrs	r3, r3, #1
 8007874:	441a      	add	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	fbb2 f3f3 	udiv	r3, r2, r3
 800787e:	b29b      	uxth	r3, r3
 8007880:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8007882:	e111      	b.n	8007aa8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	d044      	beq.n	8007916 <UART_SetConfig+0x117e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	2b01      	cmp	r3, #1
 8007892:	d03e      	beq.n	8007912 <UART_SetConfig+0x117a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b02      	cmp	r3, #2
 800789a:	d038      	beq.n	800790e <UART_SetConfig+0x1176>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d032      	beq.n	800790a <UART_SetConfig+0x1172>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d02c      	beq.n	8007906 <UART_SetConfig+0x116e>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	d026      	beq.n	8007902 <UART_SetConfig+0x116a>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2b06      	cmp	r3, #6
 80078ba:	d020      	beq.n	80078fe <UART_SetConfig+0x1166>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	2b07      	cmp	r3, #7
 80078c2:	d01a      	beq.n	80078fa <UART_SetConfig+0x1162>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d014      	beq.n	80078f6 <UART_SetConfig+0x115e>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b09      	cmp	r3, #9
 80078d2:	d00e      	beq.n	80078f2 <UART_SetConfig+0x115a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b0a      	cmp	r3, #10
 80078da:	d008      	beq.n	80078ee <UART_SetConfig+0x1156>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b0b      	cmp	r3, #11
 80078e2:	d102      	bne.n	80078ea <UART_SetConfig+0x1152>
 80078e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80078e8:	e016      	b.n	8007918 <UART_SetConfig+0x1180>
 80078ea:	4b80      	ldr	r3, [pc, #512]	; (8007aec <UART_SetConfig+0x1354>)
 80078ec:	e014      	b.n	8007918 <UART_SetConfig+0x1180>
 80078ee:	4b80      	ldr	r3, [pc, #512]	; (8007af0 <UART_SetConfig+0x1358>)
 80078f0:	e012      	b.n	8007918 <UART_SetConfig+0x1180>
 80078f2:	4b80      	ldr	r3, [pc, #512]	; (8007af4 <UART_SetConfig+0x135c>)
 80078f4:	e010      	b.n	8007918 <UART_SetConfig+0x1180>
 80078f6:	4b80      	ldr	r3, [pc, #512]	; (8007af8 <UART_SetConfig+0x1360>)
 80078f8:	e00e      	b.n	8007918 <UART_SetConfig+0x1180>
 80078fa:	4b80      	ldr	r3, [pc, #512]	; (8007afc <UART_SetConfig+0x1364>)
 80078fc:	e00c      	b.n	8007918 <UART_SetConfig+0x1180>
 80078fe:	4b80      	ldr	r3, [pc, #512]	; (8007b00 <UART_SetConfig+0x1368>)
 8007900:	e00a      	b.n	8007918 <UART_SetConfig+0x1180>
 8007902:	4b80      	ldr	r3, [pc, #512]	; (8007b04 <UART_SetConfig+0x136c>)
 8007904:	e008      	b.n	8007918 <UART_SetConfig+0x1180>
 8007906:	4b80      	ldr	r3, [pc, #512]	; (8007b08 <UART_SetConfig+0x1370>)
 8007908:	e006      	b.n	8007918 <UART_SetConfig+0x1180>
 800790a:	4b80      	ldr	r3, [pc, #512]	; (8007b0c <UART_SetConfig+0x1374>)
 800790c:	e004      	b.n	8007918 <UART_SetConfig+0x1180>
 800790e:	4b80      	ldr	r3, [pc, #512]	; (8007b10 <UART_SetConfig+0x1378>)
 8007910:	e002      	b.n	8007918 <UART_SetConfig+0x1180>
 8007912:	4b80      	ldr	r3, [pc, #512]	; (8007b14 <UART_SetConfig+0x137c>)
 8007914:	e000      	b.n	8007918 <UART_SetConfig+0x1180>
 8007916:	4b75      	ldr	r3, [pc, #468]	; (8007aec <UART_SetConfig+0x1354>)
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6852      	ldr	r2, [r2, #4]
 800791c:	0852      	lsrs	r2, r2, #1
 800791e:	441a      	add	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	fbb2 f3f3 	udiv	r3, r2, r3
 8007928:	b29b      	uxth	r3, r3
 800792a:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800792c:	e0bc      	b.n	8007aa8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792e:	f7fc fb19 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8007932:	4602      	mov	r2, r0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	d044      	beq.n	80079c6 <UART_SetConfig+0x122e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	2b01      	cmp	r3, #1
 8007942:	d03e      	beq.n	80079c2 <UART_SetConfig+0x122a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	2b02      	cmp	r3, #2
 800794a:	d038      	beq.n	80079be <UART_SetConfig+0x1226>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	2b03      	cmp	r3, #3
 8007952:	d032      	beq.n	80079ba <UART_SetConfig+0x1222>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	2b04      	cmp	r3, #4
 800795a:	d02c      	beq.n	80079b6 <UART_SetConfig+0x121e>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	2b05      	cmp	r3, #5
 8007962:	d026      	beq.n	80079b2 <UART_SetConfig+0x121a>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	2b06      	cmp	r3, #6
 800796a:	d020      	beq.n	80079ae <UART_SetConfig+0x1216>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	2b07      	cmp	r3, #7
 8007972:	d01a      	beq.n	80079aa <UART_SetConfig+0x1212>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	2b08      	cmp	r3, #8
 800797a:	d014      	beq.n	80079a6 <UART_SetConfig+0x120e>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	2b09      	cmp	r3, #9
 8007982:	d00e      	beq.n	80079a2 <UART_SetConfig+0x120a>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	2b0a      	cmp	r3, #10
 800798a:	d008      	beq.n	800799e <UART_SetConfig+0x1206>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	2b0b      	cmp	r3, #11
 8007992:	d102      	bne.n	800799a <UART_SetConfig+0x1202>
 8007994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007998:	e016      	b.n	80079c8 <UART_SetConfig+0x1230>
 800799a:	2301      	movs	r3, #1
 800799c:	e014      	b.n	80079c8 <UART_SetConfig+0x1230>
 800799e:	2380      	movs	r3, #128	; 0x80
 80079a0:	e012      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079a2:	2340      	movs	r3, #64	; 0x40
 80079a4:	e010      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079a6:	2320      	movs	r3, #32
 80079a8:	e00e      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079aa:	2310      	movs	r3, #16
 80079ac:	e00c      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079ae:	230c      	movs	r3, #12
 80079b0:	e00a      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079b2:	230a      	movs	r3, #10
 80079b4:	e008      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079b6:	2308      	movs	r3, #8
 80079b8:	e006      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079ba:	2306      	movs	r3, #6
 80079bc:	e004      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079be:	2304      	movs	r3, #4
 80079c0:	e002      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e000      	b.n	80079c8 <UART_SetConfig+0x1230>
 80079c6:	2301      	movs	r3, #1
 80079c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	441a      	add	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079dc:	b29b      	uxth	r3, r3
 80079de:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80079e0:	e062      	b.n	8007aa8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d04e      	beq.n	8007a88 <UART_SetConfig+0x12f0>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d047      	beq.n	8007a82 <UART_SetConfig+0x12ea>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d040      	beq.n	8007a7c <UART_SetConfig+0x12e4>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d039      	beq.n	8007a76 <UART_SetConfig+0x12de>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d032      	beq.n	8007a70 <UART_SetConfig+0x12d8>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d02b      	beq.n	8007a6a <UART_SetConfig+0x12d2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	2b06      	cmp	r3, #6
 8007a18:	d024      	beq.n	8007a64 <UART_SetConfig+0x12cc>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	2b07      	cmp	r3, #7
 8007a20:	d01d      	beq.n	8007a5e <UART_SetConfig+0x12c6>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	d016      	beq.n	8007a58 <UART_SetConfig+0x12c0>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d00f      	beq.n	8007a52 <UART_SetConfig+0x12ba>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	2b0a      	cmp	r3, #10
 8007a38:	d008      	beq.n	8007a4c <UART_SetConfig+0x12b4>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	2b0b      	cmp	r3, #11
 8007a40:	d101      	bne.n	8007a46 <UART_SetConfig+0x12ae>
 8007a42:	2380      	movs	r3, #128	; 0x80
 8007a44:	e022      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a4a:	e01f      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a50:	e01c      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a56:	e019      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5c:	e016      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a62:	e013      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a64:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007a68:	e010      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a6a:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007a6e:	e00d      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a74:	e00a      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a76:	f241 5355 	movw	r3, #5461	; 0x1555
 8007a7a:	e007      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a80:	e004      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a86:	e001      	b.n	8007a8c <UART_SetConfig+0x12f4>
 8007a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6852      	ldr	r2, [r2, #4]
 8007a90:	0852      	lsrs	r2, r2, #1
 8007a92:	441a      	add	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8007aa0:	e002      	b.n	8007aa8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	74fb      	strb	r3, [r7, #19]
        break;
 8007aa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b0f      	cmp	r3, #15
 8007aac:	d908      	bls.n	8007ac0 <UART_SetConfig+0x1328>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab4:	d204      	bcs.n	8007ac0 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	60da      	str	r2, [r3, #12]
 8007abe:	e001      	b.n	8007ac4 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007ae0:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007aec:	00f42400 	.word	0x00f42400
 8007af0:	0001e848 	.word	0x0001e848
 8007af4:	0003d090 	.word	0x0003d090
 8007af8:	0007a120 	.word	0x0007a120
 8007afc:	000f4240 	.word	0x000f4240
 8007b00:	00145855 	.word	0x00145855
 8007b04:	00186a00 	.word	0x00186a00
 8007b08:	001e8480 	.word	0x001e8480
 8007b0c:	0028b0aa 	.word	0x0028b0aa
 8007b10:	003d0900 	.word	0x003d0900
 8007b14:	007a1200 	.word	0x007a1200

08007b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01a      	beq.n	8007c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c16:	d10a      	bne.n	8007c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]
  }
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007c6c:	f7fa fed4 	bl	8002a18 <HAL_GetTick>
 8007c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d10e      	bne.n	8007c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f82c 	bl	8007cec <UART_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e022      	b.n	8007ce4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d10e      	bne.n	8007cca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f816 	bl	8007cec <UART_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e00c      	b.n	8007ce4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	603b      	str	r3, [r7, #0]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cfc:	e02c      	b.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d028      	beq.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d06:	f7fa fe87 	bl	8002a18 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d302      	bcc.n	8007d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d11d      	bne.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d2a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0201 	bic.w	r2, r2, #1
 8007d3a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e00f      	b.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69da      	ldr	r2, [r3, #28]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4013      	ands	r3, r2
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d0c3      	beq.n	8007cfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7f9 fcd7 	bl	8001798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e08:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7fe fca5 	bl	8006768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e1e:	bf00      	nop
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e34:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e3c:	2b22      	cmp	r3, #34	; 0x22
 8007e3e:	d13b      	bne.n	8007eb8 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e46:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e48:	89bb      	ldrh	r3, [r7, #12]
 8007e4a:	b2d9      	uxtb	r1, r3
 8007e4c:	89fb      	ldrh	r3, [r7, #14]
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e54:	400a      	ands	r2, r1
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d124      	bne.n	8007ecc <UART_RxISR_8BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e90:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0201 	bic.w	r2, r2, #1
 8007ea0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7f9 fc87 	bl	80017c4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eb6:	e009      	b.n	8007ecc <UART_RxISR_8BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	8b1b      	ldrh	r3, [r3, #24]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f042 0208 	orr.w	r2, r2, #8
 8007ec8:	b292      	uxth	r2, r2
 8007eca:	831a      	strh	r2, [r3, #24]
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ee2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eea:	2b22      	cmp	r3, #34	; 0x22
 8007eec:	d13b      	bne.n	8007f66 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ef4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007efc:	89ba      	ldrh	r2, [r7, #12]
 8007efe:	89fb      	ldrh	r3, [r7, #14]
 8007f00:	4013      	ands	r3, r2
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0c:	1c9a      	adds	r2, r3, #2
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d124      	bne.n	8007f7a <UART_RxISR_16BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f3e:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0201 	bic.w	r2, r2, #1
 8007f4e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7f9 fc30 	bl	80017c4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f64:	e009      	b.n	8007f7a <UART_RxISR_16BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	8b1b      	ldrh	r3, [r3, #24]
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0208 	orr.w	r2, r2, #8
 8007f76:	b292      	uxth	r2, r2
 8007f78:	831a      	strh	r2, [r3, #24]
}
 8007f7a:	bf00      	nop
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f92:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f9a:	2b22      	cmp	r3, #34	; 0x22
 8007f9c:	d168      	bne.n	8008070 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007fa4:	81fb      	strh	r3, [r7, #14]
 8007fa6:	e03f      	b.n	8008028 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fae:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fb0:	893b      	ldrh	r3, [r7, #8]
 8007fb2:	b2d9      	uxtb	r1, r3
 8007fb4:	89bb      	ldrh	r3, [r7, #12]
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fbc:	400a      	ands	r2, r1
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d11b      	bne.n	8008022 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ff8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7f9 fbd1 	bl	80017c4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008022:	89fb      	ldrh	r3, [r7, #14]
 8008024:	3b01      	subs	r3, #1
 8008026:	81fb      	strh	r3, [r7, #14]
 8008028:	89fb      	ldrh	r3, [r7, #14]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1bc      	bne.n	8007fa8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008034:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008036:	897b      	ldrh	r3, [r7, #10]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d023      	beq.n	8008084 <UART_RxISR_8BIT_FIFOEN+0x100>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008042:	897a      	ldrh	r2, [r7, #10]
 8008044:	429a      	cmp	r2, r3
 8008046:	d21d      	bcs.n	8008084 <UART_RxISR_8BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008056:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a0c      	ldr	r2, [pc, #48]	; (800808c <UART_RxISR_8BIT_FIFOEN+0x108>)
 800805c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f042 0220 	orr.w	r2, r2, #32
 800806c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800806e:	e009      	b.n	8008084 <UART_RxISR_8BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	8b1b      	ldrh	r3, [r3, #24]
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0208 	orr.w	r2, r2, #8
 8008080:	b292      	uxth	r2, r2
 8008082:	831a      	strh	r2, [r3, #24]
}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	08007e27 	.word	0x08007e27

08008090 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800809e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080a6:	2b22      	cmp	r3, #34	; 0x22
 80080a8:	d168      	bne.n	800817c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080b0:	82fb      	strh	r3, [r7, #22]
 80080b2:	e03f      	b.n	8008134 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080ba:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c0:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80080c2:	8a3a      	ldrh	r2, [r7, #16]
 80080c4:	8abb      	ldrh	r3, [r7, #20]
 80080c6:	4013      	ands	r3, r2
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d2:	1c9a      	adds	r2, r3, #2
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d11b      	bne.n	800812e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008104:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7f9 fb4b 	bl	80017c4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800812e:	8afb      	ldrh	r3, [r7, #22]
 8008130:	3b01      	subs	r3, #1
 8008132:	82fb      	strh	r3, [r7, #22]
 8008134:	8afb      	ldrh	r3, [r7, #22]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1bc      	bne.n	80080b4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008140:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008142:	8a7b      	ldrh	r3, [r7, #18]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d023      	beq.n	8008190 <UART_RxISR_16BIT_FIFOEN+0x100>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800814e:	8a7a      	ldrh	r2, [r7, #18]
 8008150:	429a      	cmp	r2, r3
 8008152:	d21d      	bcs.n	8008190 <UART_RxISR_16BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008162:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a0c      	ldr	r2, [pc, #48]	; (8008198 <UART_RxISR_16BIT_FIFOEN+0x108>)
 8008168:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0220 	orr.w	r2, r2, #32
 8008178:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800817a:	e009      	b.n	8008190 <UART_RxISR_16BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	8b1b      	ldrh	r3, [r3, #24]
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0208 	orr.w	r2, r2, #8
 800818c:	b292      	uxth	r2, r2
 800818e:	831a      	strh	r2, [r3, #24]
}
 8008190:	bf00      	nop
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	08007ed5 	.word	0x08007ed5

0800819c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_UARTEx_DisableFifoMode+0x16>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e027      	b.n	800823e <HAL_UARTEx_DisableFifoMode+0x66>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2224      	movs	r2, #36	; 0x24
 80081fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800821c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800825e:	2302      	movs	r3, #2
 8008260:	e02d      	b.n	80082be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2224      	movs	r2, #36	; 0x24
 800826e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f850 	bl	8008344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082da:	2302      	movs	r3, #2
 80082dc:	e02d      	b.n	800833a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2224      	movs	r2, #36	; 0x24
 80082ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f812 	bl	8008344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b089      	sub	sp, #36	; 0x24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800834c:	4a2f      	ldr	r2, [pc, #188]	; (800840c <UARTEx_SetNbDataToProcess+0xc8>)
 800834e:	f107 0314 	add.w	r3, r7, #20
 8008352:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008356:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800835a:	4a2d      	ldr	r2, [pc, #180]	; (8008410 <UARTEx_SetNbDataToProcess+0xcc>)
 800835c:	f107 030c 	add.w	r3, r7, #12
 8008360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008364:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800836c:	2b00      	cmp	r3, #0
 800836e:	d108      	bne.n	8008382 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008380:	e03d      	b.n	80083fe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008382:	2308      	movs	r3, #8
 8008384:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008386:	2308      	movs	r3, #8
 8008388:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	0e5b      	lsrs	r3, r3, #25
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	0f5b      	lsrs	r3, r3, #29
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80083aa:	7fbb      	ldrb	r3, [r7, #30]
 80083ac:	7f3a      	ldrb	r2, [r7, #28]
 80083ae:	f107 0120 	add.w	r1, r7, #32
 80083b2:	440a      	add	r2, r1
 80083b4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80083b8:	fb02 f303 	mul.w	r3, r2, r3
 80083bc:	7f3a      	ldrb	r2, [r7, #28]
 80083be:	f107 0120 	add.w	r1, r7, #32
 80083c2:	440a      	add	r2, r1
 80083c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80083c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80083d4:	7ffb      	ldrb	r3, [r7, #31]
 80083d6:	7f7a      	ldrb	r2, [r7, #29]
 80083d8:	f107 0120 	add.w	r1, r7, #32
 80083dc:	440a      	add	r2, r1
 80083de:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80083e2:	fb02 f303 	mul.w	r3, r2, r3
 80083e6:	7f7a      	ldrb	r2, [r7, #29]
 80083e8:	f107 0120 	add.w	r1, r7, #32
 80083ec:	440a      	add	r2, r1
 80083ee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80083f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083fe:	bf00      	nop
 8008400:	3724      	adds	r7, #36	; 0x24
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	08008980 	.word	0x08008980
 8008410:	08008988 	.word	0x08008988

08008414 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008414:	b084      	sub	sp, #16
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	f107 001c 	add.w	r0, r7, #28
 8008422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	2b01      	cmp	r3, #1
 800842a:	d122      	bne.n	8008472 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008456:	2b01      	cmp	r3, #1
 8008458:	d105      	bne.n	8008466 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa1e 	bl	80088a8 <USB_CoreReset>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
 8008470:	e01a      	b.n	80084a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa12 	bl	80088a8 <USB_CoreReset>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	639a      	str	r2, [r3, #56]	; 0x38
 800849a:	e005      	b.n	80084a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084b4:	b004      	add	sp, #16
 80084b6:	4770      	bx	lr

080084b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f023 0201 	bic.w	r2, r3, #1
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d106      	bne.n	8008506 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]
 8008504:	e00b      	b.n	800851e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d106      	bne.n	800851a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	60da      	str	r2, [r3, #12]
 8008518:	e001      	b.n	800851e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e003      	b.n	8008526 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800851e:	2032      	movs	r0, #50	; 0x32
 8008520:	f7fa fa86 	bl	8002a30 <HAL_Delay>

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008530:	b084      	sub	sp, #16
 8008532:	b580      	push	{r7, lr}
 8008534:	b086      	sub	sp, #24
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800853e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800854a:	2300      	movs	r3, #0
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	e009      	b.n	8008564 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	3340      	adds	r3, #64	; 0x40
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	3301      	adds	r3, #1
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	2b0e      	cmp	r3, #14
 8008568:	d9f2      	bls.n	8008550 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d112      	bne.n	8008596 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e005      	b.n	80085a2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085a8:	461a      	mov	r2, r3
 80085aa:	2300      	movs	r3, #0
 80085ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b4:	4619      	mov	r1, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085bc:	461a      	mov	r2, r3
 80085be:	680b      	ldr	r3, [r1, #0]
 80085c0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80085c2:	2103      	movs	r1, #3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f93d 	bl	8008844 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085ca:	2110      	movs	r1, #16
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f8f1 	bl	80087b4 <USB_FlushTxFifo>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f90f 	bl	8008800 <USB_FlushRxFifo>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f2:	461a      	mov	r2, r3
 80085f4:	2300      	movs	r3, #0
 80085f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fe:	461a      	mov	r2, r3
 8008600:	2300      	movs	r3, #0
 8008602:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860a:	461a      	mov	r2, r3
 800860c:	2300      	movs	r3, #0
 800860e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008610:	2300      	movs	r3, #0
 8008612:	613b      	str	r3, [r7, #16]
 8008614:	e043      	b.n	800869e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800862c:	d118      	bne.n	8008660 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008640:	461a      	mov	r2, r3
 8008642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	e013      	b.n	8008672 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	461a      	mov	r2, r3
 8008658:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	e008      	b.n	8008672 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	461a      	mov	r2, r3
 800866e:	2300      	movs	r3, #0
 8008670:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867e:	461a      	mov	r2, r3
 8008680:	2300      	movs	r3, #0
 8008682:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008690:	461a      	mov	r2, r3
 8008692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008696:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	3301      	adds	r3, #1
 800869c:	613b      	str	r3, [r7, #16]
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d3b7      	bcc.n	8008616 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	e043      	b.n	8008734 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086c2:	d118      	bne.n	80086f6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d6:	461a      	mov	r2, r3
 80086d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086dc:	6013      	str	r3, [r2, #0]
 80086de:	e013      	b.n	8008708 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	461a      	mov	r2, r3
 80086ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	e008      	b.n	8008708 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	015a      	lsls	r2, r3, #5
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008702:	461a      	mov	r2, r3
 8008704:	2300      	movs	r3, #0
 8008706:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008714:	461a      	mov	r2, r3
 8008716:	2300      	movs	r3, #0
 8008718:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008726:	461a      	mov	r2, r3
 8008728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800872c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3301      	adds	r3, #1
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	429a      	cmp	r2, r3
 800873a:	d3b7      	bcc.n	80086ac <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800874a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800874e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800875c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	f043 0210 	orr.w	r2, r3, #16
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <USB_DevInit+0x280>)
 8008770:	4313      	orrs	r3, r2
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	f043 0208 	orr.w	r2, r3, #8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d107      	bne.n	800879e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008796:	f043 0304 	orr.w	r3, r3, #4
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087aa:	b004      	add	sp, #16
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	803c3800 	.word	0x803c3800

080087b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	019b      	lsls	r3, r3, #6
 80087c6:	f043 0220 	orr.w	r2, r3, #32
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3301      	adds	r3, #1
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a09      	ldr	r2, [pc, #36]	; (80087fc <USB_FlushTxFifo+0x48>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d901      	bls.n	80087e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e006      	b.n	80087ee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	d0f0      	beq.n	80087ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	00030d40 	.word	0x00030d40

08008800 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2210      	movs	r2, #16
 8008810:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3301      	adds	r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4a09      	ldr	r2, [pc, #36]	; (8008840 <USB_FlushRxFifo+0x40>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d901      	bls.n	8008824 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e006      	b.n	8008832 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f003 0310 	and.w	r3, r3, #16
 800882c:	2b10      	cmp	r3, #16
 800882e:	d0f0      	beq.n	8008812 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	00030d40 	.word	0x00030d40

08008844 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	68f9      	ldr	r1, [r7, #12]
 8008860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008864:	4313      	orrs	r3, r2
 8008866:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008890:	f043 0302 	orr.w	r3, r3, #2
 8008894:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008896:	2003      	movs	r0, #3
 8008898:	f7fa f8ca 	bl	8002a30 <HAL_Delay>

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3301      	adds	r3, #1
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4a13      	ldr	r2, [pc, #76]	; (800890c <USB_CoreReset+0x64>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d901      	bls.n	80088c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e01b      	b.n	80088fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	daf2      	bge.n	80088b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f043 0201 	orr.w	r2, r3, #1
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a09      	ldr	r2, [pc, #36]	; (800890c <USB_CoreReset+0x64>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d901      	bls.n	80088f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e006      	b.n	80088fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d0f0      	beq.n	80088de <USB_CoreReset+0x36>

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	00030d40 	.word	0x00030d40

08008910 <__libc_init_array>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	4e0d      	ldr	r6, [pc, #52]	; (8008948 <__libc_init_array+0x38>)
 8008914:	4c0d      	ldr	r4, [pc, #52]	; (800894c <__libc_init_array+0x3c>)
 8008916:	1ba4      	subs	r4, r4, r6
 8008918:	10a4      	asrs	r4, r4, #2
 800891a:	2500      	movs	r5, #0
 800891c:	42a5      	cmp	r5, r4
 800891e:	d109      	bne.n	8008934 <__libc_init_array+0x24>
 8008920:	4e0b      	ldr	r6, [pc, #44]	; (8008950 <__libc_init_array+0x40>)
 8008922:	4c0c      	ldr	r4, [pc, #48]	; (8008954 <__libc_init_array+0x44>)
 8008924:	f000 f820 	bl	8008968 <_init>
 8008928:	1ba4      	subs	r4, r4, r6
 800892a:	10a4      	asrs	r4, r4, #2
 800892c:	2500      	movs	r5, #0
 800892e:	42a5      	cmp	r5, r4
 8008930:	d105      	bne.n	800893e <__libc_init_array+0x2e>
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008938:	4798      	blx	r3
 800893a:	3501      	adds	r5, #1
 800893c:	e7ee      	b.n	800891c <__libc_init_array+0xc>
 800893e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008942:	4798      	blx	r3
 8008944:	3501      	adds	r5, #1
 8008946:	e7f2      	b.n	800892e <__libc_init_array+0x1e>
 8008948:	080089e0 	.word	0x080089e0
 800894c:	080089e0 	.word	0x080089e0
 8008950:	080089e0 	.word	0x080089e0
 8008954:	080089e4 	.word	0x080089e4

08008958 <memset>:
 8008958:	4402      	add	r2, r0
 800895a:	4603      	mov	r3, r0
 800895c:	4293      	cmp	r3, r2
 800895e:	d100      	bne.n	8008962 <memset+0xa>
 8008960:	4770      	bx	lr
 8008962:	f803 1b01 	strb.w	r1, [r3], #1
 8008966:	e7f9      	b.n	800895c <memset+0x4>

08008968 <_init>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr

08008974 <_fini>:
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	bf00      	nop
 8008978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897a:	bc08      	pop	{r3}
 800897c:	469e      	mov	lr, r3
 800897e:	4770      	bx	lr
