
DCMotorFullset.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b8  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082d0  080082d0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d8  080082d8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080082e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  20000020  08008300  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08008300  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b33  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ca5  00000000  00000000  00036b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  0003ac18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003000  00000000  00000000  0003bf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010730  00000000  00000000  0003ef80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001054c8  00000000  00000000  0004f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005504  00000000  00000000  00154bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000020 	.word	0x20000020
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008260 	.word	0x08008260

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000024 	.word	0x20000024
 80001fc:	08008260 	.word	0x08008260

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	0000      	movs	r0, r0
	...

08000d90 <Calibrated_PID>:
volatile float u0 = 0;
volatile float u1 = 0;

/* Private function -----------------------------------------------*/
volatile int32_t Calibrated_PID (volatile int32_t *count)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	float synchrocount = (float)*count;//*Pregain;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da4:	edc7 7a05 	vstr	s15, [r7, #20]
	float synchroduty;
	synchroduty = PID(setpoint, synchrocount, kp, ki, kd);
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <Calibrated_PID+0x80>)
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <Calibrated_PID+0x84>)
 8000db0:	ed93 7a00 	vldr	s14, [r3]
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <Calibrated_PID+0x88>)
 8000db6:	edd3 6a00 	vldr	s13, [r3]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <Calibrated_PID+0x8c>)
 8000dbc:	ed93 6a00 	vldr	s12, [r3]
 8000dc0:	eeb0 2a46 	vmov.f32	s4, s12
 8000dc4:	eef0 1a66 	vmov.f32	s3, s13
 8000dc8:	eeb0 1a47 	vmov.f32	s2, s14
 8000dcc:	edd7 0a05 	vldr	s1, [r7, #20]
 8000dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd4:	f000 f824 	bl	8000e20 <PID>
 8000dd8:	ed87 0a04 	vstr	s0, [r7, #16]
	int32_t duty = (int32_t)(synchroduty*Postgain);
 8000ddc:	6938      	ldr	r0, [r7, #16]
 8000dde:	f7ff fb73 	bl	80004c8 <__aeabi_f2d>
 8000de2:	a309      	add	r3, pc, #36	; (adr r3, 8000e08 <Calibrated_PID+0x78>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f7ff fbc6 	bl	8000578 <__aeabi_dmul>
 8000dec:	4603      	mov	r3, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	4618      	mov	r0, r3
 8000df2:	4621      	mov	r1, r4
 8000df4:	f7ff fdd2 	bl	800099c <__aeabi_d2iz>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60fb      	str	r3, [r7, #12]
	return duty;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	bf00      	nop
 8000e08:	33333333 	.word	0x33333333
 8000e0c:	3fd33333 	.word	0x3fd33333
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20000060 	.word	0x20000060
 8000e18:	20000064 	.word	0x20000064
 8000e1c:	20000068 	.word	0x20000068

08000e20 <PID>:

volatile float PID(float setpoint, float measure, float kp, float ki, float kd)
{
 8000e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e24:	b088      	sub	sp, #32
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e2c:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e30:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e34:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e38:	ed87 2a01 	vstr	s4, [r7, #4]
	float temp = 0;
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
	e2 = e1;
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <PID+0x158>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a4d      	ldr	r2, [pc, #308]	; (8000f7c <PID+0x15c>)
 8000e48:	6013      	str	r3, [r2, #0]
	e1 = e0;
 8000e4a:	4b4d      	ldr	r3, [pc, #308]	; (8000f80 <PID+0x160>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a4a      	ldr	r2, [pc, #296]	; (8000f78 <PID+0x158>)
 8000e50:	6013      	str	r3, [r2, #0]
	e0 = setpoint - measure;
 8000e52:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <PID+0x160>)
 8000e60:	edc3 7a00 	vstr	s15, [r3]
	u1 = u0;
 8000e64:	4b47      	ldr	r3, [pc, #284]	; (8000f84 <PID+0x164>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <PID+0x168>)
 8000e6a:	6013      	str	r3, [r2, #0]
	u0 = (u1 + kp*(e0 - e1) + ki*time*(e0 + e1)/2.0 + kd*(e0 - 2*e1 + e2)/time);
 8000e6c:	4b44      	ldr	r3, [pc, #272]	; (8000f80 <PID+0x160>)
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <PID+0x158>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e84:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <PID+0x168>)
 8000e86:	edd3 7a00 	vldr	s15, [r3]
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	ee17 0a90 	vmov	r0, s15
 8000e92:	f7ff fb19 	bl	80004c8 <__aeabi_f2d>
 8000e96:	4604      	mov	r4, r0
 8000e98:	460d      	mov	r5, r1
 8000e9a:	68b8      	ldr	r0, [r7, #8]
 8000e9c:	f7ff fb14 	bl	80004c8 <__aeabi_f2d>
 8000ea0:	a333      	add	r3, pc, #204	; (adr r3, 8000f70 <PID+0x150>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fb67 	bl	8000578 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4690      	mov	r8, r2
 8000eb0:	4699      	mov	r9, r3
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <PID+0x160>)
 8000eb4:	ed93 7a00 	vldr	s14, [r3]
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <PID+0x158>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec2:	ee17 0a90 	vmov	r0, s15
 8000ec6:	f7ff faff 	bl	80004c8 <__aeabi_f2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4640      	mov	r0, r8
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	f7ff fb51 	bl	8000578 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee6:	f7ff fc71 	bl	80007cc <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f7ff f98b 	bl	800020c <__adddf3>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460c      	mov	r4, r1
 8000efa:	4625      	mov	r5, r4
 8000efc:	461c      	mov	r4, r3
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <PID+0x160>)
 8000f00:	ed93 7a00 	vldr	s14, [r3]
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <PID+0x158>)
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <PID+0x15c>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f24:	ee17 0a90 	vmov	r0, s15
 8000f28:	f7ff face 	bl	80004c8 <__aeabi_f2d>
 8000f2c:	a310      	add	r3, pc, #64	; (adr r3, 8000f70 <PID+0x150>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fc4b 	bl	80007cc <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff f965 	bl	800020c <__adddf3>
 8000f42:	4603      	mov	r3, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	4618      	mov	r0, r3
 8000f48:	4621      	mov	r1, r4
 8000f4a:	f7ff fd4f 	bl	80009ec <__aeabi_d2f>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <PID+0x164>)
 8000f52:	601a      	str	r2, [r3, #0]
	//if (u0 < -150 ) u0 = -150;
	//if (u0>150 ) u0 =150;
	temp = u0;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <PID+0x164>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61fb      	str	r3, [r7, #28]
	return temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	ee07 3a90 	vmov	s15, r3
}
 8000f60:	eeb0 0a67 	vmov.f32	s0, s15
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f6c:	f3af 8000 	nop.w
 8000f70:	47ae147b 	.word	0x47ae147b
 8000f74:	3f947ae1 	.word	0x3f947ae1
 8000f78:	20000040 	.word	0x20000040
 8000f7c:	20000044 	.word	0x20000044
 8000f80:	2000003c 	.word	0x2000003c
 8000f84:	20000048 	.word	0x20000048
 8000f88:	2000004c 	.word	0x2000004c

08000f8c <EncoderCount>:

/* Private variables ---------------------------------------------------------*/

/* Private function -----------------------------------------------*/
volatile int32_t EncoderCount (TIM_HandleTypeDef *timer)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	volatile int32_t count;
	count = __HAL_TIM_GET_COUNTER(timer);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(timer, 0);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <EncoderPosCount>:

volatile int32_t EncoderPosCount (TIM_HandleTypeDef *timer)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	volatile int32_t count;
	count = __HAL_TIM_GET_COUNTER(timer);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	60fb      	str	r3, [r7, #12]
	return count;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <PWMGen2>:
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
		  }
}

void PWMGen2 (volatile int32_t *value, TIM_HandleTypeDef *timer, uint32_t timchannel, GPIO_TypeDef *gpioport, uint32_t gpiopin, GPIO_TypeDef *gpioport2, uint32_t gpiopin2)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
	if (*value<0)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	da3f      	bge.n	8001066 <PWMGen2+0x96>
		  {
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_SET);
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f001 fe28 	bl	8002c44 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(gpioport2, gpiopin2, GPIO_PIN_RESET);
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ffe:	f001 fe21 	bl	8002c44 <HAL_GPIO_WritePin>
			  int32_t duty = - *value + PWMOffset;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 800100a:	613b      	str	r3, [r7, #16]
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d104      	bne.n	800101c <PWMGen2+0x4c>
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_RESET);
			  HAL_GPIO_WritePin(gpioport2, gpiopin2, GPIO_PIN_SET);
			  int32_t duty =  *value + PWMOffset;
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
		  }
}
 800101a:	e062      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d104      	bne.n	800102c <PWMGen2+0x5c>
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
}
 800102a:	e05a      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b08      	cmp	r3, #8
 8001030:	d104      	bne.n	800103c <PWMGen2+0x6c>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800103a:	e052      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	d104      	bne.n	800104c <PWMGen2+0x7c>
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
}
 800104a:	e04a      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b10      	cmp	r3, #16
 8001050:	d104      	bne.n	800105c <PWMGen2+0x8c>
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	659a      	str	r2, [r3, #88]	; 0x58
}
 800105a:	e042      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001064:	e03d      	b.n	80010e2 <PWMGen2+0x112>
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_RESET);
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	b29b      	uxth	r3, r3
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	6838      	ldr	r0, [r7, #0]
 8001070:	f001 fde8 	bl	8002c44 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(gpioport2, gpiopin2, GPIO_PIN_SET);
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	b29b      	uxth	r3, r3
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800107e:	f001 fde1 	bl	8002c44 <HAL_GPIO_WritePin>
			  int32_t duty =  *value + PWMOffset;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	332d      	adds	r3, #45	; 0x2d
 8001088:	617b      	str	r3, [r7, #20]
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <PWMGen2+0xca>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001098:	e023      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b04      	cmp	r3, #4
 800109e:	d104      	bne.n	80010aa <PWMGen2+0xda>
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010a8:	e01b      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d104      	bne.n	80010ba <PWMGen2+0xea>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010b8:	e013      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	d104      	bne.n	80010ca <PWMGen2+0xfa>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010c8:	e00b      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b10      	cmp	r3, #16
 80010ce:	d104      	bne.n	80010da <PWMGen2+0x10a>
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80010d8:	e003      	b.n	80010e2 <PWMGen2+0x112>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <TransmitData>:
	HAL_UART_Transmit(&hlpuart1, &sum, 1, 1000);
	HAL_UART_Transmit(&hlpuart1, &etx, 1, 1000);
}

void TransmitData (float realtime, float measure, float pwm)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80010f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80010fa:	ed87 1a01 	vstr	s2, [r7, #4]
	uint8_t stx = STX, etx = ETX, head = Data;
 80010fe:	23fe      	movs	r3, #254	; 0xfe
 8001100:	74fb      	strb	r3, [r7, #19]
 8001102:	23ff      	movs	r3, #255	; 0xff
 8001104:	74bb      	strb	r3, [r7, #18]
 8001106:	2304      	movs	r3, #4
 8001108:	747b      	strb	r3, [r7, #17]
	uint8_t *temp;
	HAL_UART_Transmit(&hlpuart1, &stx, 1, 1000);
 800110a:	f107 0113 	add.w	r1, r7, #19
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	2201      	movs	r2, #1
 8001114:	4820      	ldr	r0, [pc, #128]	; (8001198 <TransmitData+0xac>)
 8001116:	f004 fccd 	bl	8005ab4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, &head, 1, 1000);
 800111a:	f107 0111 	add.w	r1, r7, #17
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	2201      	movs	r2, #1
 8001124:	481c      	ldr	r0, [pc, #112]	; (8001198 <TransmitData+0xac>)
 8001126:	f004 fcc5 	bl	8005ab4 <HAL_UART_Transmit>
	temp = Float2Char(realtime);
 800112a:	ed97 0a03 	vldr	s0, [r7, #12]
 800112e:	f000 f945 	bl	80013bc <Float2Char>
 8001132:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&hlpuart1, temp, 4, 1000);
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	2204      	movs	r2, #4
 800113a:	6979      	ldr	r1, [r7, #20]
 800113c:	4816      	ldr	r0, [pc, #88]	; (8001198 <TransmitData+0xac>)
 800113e:	f004 fcb9 	bl	8005ab4 <HAL_UART_Transmit>
	temp = Float2Char(measure);
 8001142:	ed97 0a02 	vldr	s0, [r7, #8]
 8001146:	f000 f939 	bl	80013bc <Float2Char>
 800114a:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&hlpuart1, temp, 4, 1000);
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	2204      	movs	r2, #4
 8001152:	6979      	ldr	r1, [r7, #20]
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <TransmitData+0xac>)
 8001156:	f004 fcad 	bl	8005ab4 <HAL_UART_Transmit>
	temp = Float2Char(pwm);
 800115a:	ed97 0a01 	vldr	s0, [r7, #4]
 800115e:	f000 f92d 	bl	80013bc <Float2Char>
 8001162:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&hlpuart1, temp, 4, 1000);
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	2204      	movs	r2, #4
 800116a:	6979      	ldr	r1, [r7, #20]
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <TransmitData+0xac>)
 800116e:	f004 fca1 	bl	8005ab4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, &txindex, 1, 1000);
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	2201      	movs	r2, #1
 8001178:	4908      	ldr	r1, [pc, #32]	; (800119c <TransmitData+0xb0>)
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <TransmitData+0xac>)
 800117c:	f004 fc9a 	bl	8005ab4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, &etx, 1, 1000);
 8001180:	f107 0112 	add.w	r1, r7, #18
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	2201      	movs	r2, #1
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <TransmitData+0xac>)
 800118c:	f004 fc92 	bl	8005ab4 <HAL_UART_Transmit>
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200005d0 	.word	0x200005d0
 800119c:	20000051 	.word	0x20000051

080011a0 <TransmitAndHandshake>:
 * @para measure: giá trị đo được hiện tại
 *
 * @return: Truyền thành công hay không
 */
uint8_t TransmitAndHandshake (float *buffer, float realtime, float measure, float pwm)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80011b0:	ed87 1a00 	vstr	s2, [r7]
	if (txnak || !txack)
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <TransmitAndHandshake+0xac>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d103      	bne.n	80011c4 <TransmitAndHandshake+0x24>
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <TransmitAndHandshake+0xb0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d114      	bne.n	80011ee <TransmitAndHandshake+0x4e>
	{
		TransmitData(*buffer, *(buffer+1), *(buffer + 2));
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3304      	adds	r3, #4
 80011ce:	ed93 7a00 	vldr	s14, [r3]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3308      	adds	r3, #8
 80011d6:	edd3 6a00 	vldr	s13, [r3]
 80011da:	eeb0 1a66 	vmov.f32	s2, s13
 80011de:	eef0 0a47 	vmov.f32	s1, s14
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	f7ff ff81 	bl	80010ec <TransmitData>
		return 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e02a      	b.n	8001244 <TransmitAndHandshake+0xa4>
	}
	else
	{
		txindex++;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <TransmitAndHandshake+0xb4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <TransmitAndHandshake+0xb4>)
 80011f8:	701a      	strb	r2, [r3, #0]
		if (txindex > 100) txindex = 0;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <TransmitAndHandshake+0xb4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d902      	bls.n	8001208 <TransmitAndHandshake+0x68>
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <TransmitAndHandshake+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
		TransmitData(realtime, measure, pwm);
 8001208:	ed97 1a00 	vldr	s2, [r7]
 800120c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001210:	ed97 0a02 	vldr	s0, [r7, #8]
 8001214:	f7ff ff6a 	bl	80010ec <TransmitData>
		*buffer = realtime;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	601a      	str	r2, [r3, #0]
		*(buffer+1) = measure;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
		*(buffer+2) = pwm;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3308      	adds	r3, #8
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	601a      	str	r2, [r3, #0]
		txack = 0;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <TransmitAndHandshake+0xb0>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <TransmitAndHandshake+0xb8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim6);
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <TransmitAndHandshake+0xb8>)
 800123e:	f003 fb2f 	bl	80048a0 <HAL_TIM_Base_Start_IT>
		return 1;
 8001242:	2301      	movs	r3, #1
	}
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000050 	.word	0x20000050
 8001250:	20000000 	.word	0x20000000
 8001254:	20000051 	.word	0x20000051
 8001258:	200006e8 	.word	0x200006e8

0800125c <ReceiveAndHandshake>:
	}
	return 0;
}

uint8_t ReceiveAndHandshake (uint8_t *buffer, uint8_t *instruction)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	if (*buffer != STX)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2bfe      	cmp	r3, #254	; 0xfe
 800126c:	d002      	beq.n	8001274 <ReceiveAndHandshake+0x18>
	{
		rxnak = 1;
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <ReceiveAndHandshake+0xc8>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
	}

	if (*(buffer + 6) != ETX)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3306      	adds	r3, #6
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d002      	beq.n	8001284 <ReceiveAndHandshake+0x28>
	{
		rxnak = 1;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <ReceiveAndHandshake+0xc8>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
	}

	if (!rxnak)
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <ReceiveAndHandshake+0xc8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d11a      	bne.n	80012c2 <ReceiveAndHandshake+0x66>
	{
		for (uint8_t i = 0; i<= 4; i++)
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e00b      	b.n	80012aa <ReceiveAndHandshake+0x4e>
			*(instruction+i) = *(buffer+i+1);
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	441a      	add	r2, r3
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	6839      	ldr	r1, [r7, #0]
 800129e:	440b      	add	r3, r1
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i<= 4; i++)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d9f0      	bls.n	8001292 <ReceiveAndHandshake+0x36>
		HAL_UART_Transmit(&hlpuart1, buffer, 7, 1000);
 80012b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b4:	2207      	movs	r2, #7
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <ReceiveAndHandshake+0xcc>)
 80012ba:	f004 fbfb 	bl	8005ab4 <HAL_UART_Transmit>
		return 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	e02b      	b.n	800131a <ReceiveAndHandshake+0xbe>
	}
	else
	{
		uint8_t nak = Nak, stx = STX, etx = ETX;
 80012c2:	23f0      	movs	r3, #240	; 0xf0
 80012c4:	73bb      	strb	r3, [r7, #14]
 80012c6:	23fe      	movs	r3, #254	; 0xfe
 80012c8:	737b      	strb	r3, [r7, #13]
 80012ca:	23ff      	movs	r3, #255	; 0xff
 80012cc:	733b      	strb	r3, [r7, #12]
		uint8_t dummy[4] = {0,0,0,0};
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&hlpuart1, &stx, 1, 1000);
 80012d2:	f107 010d 	add.w	r1, r7, #13
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	2201      	movs	r2, #1
 80012dc:	4812      	ldr	r0, [pc, #72]	; (8001328 <ReceiveAndHandshake+0xcc>)
 80012de:	f004 fbe9 	bl	8005ab4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &nak, 1, 1000);
 80012e2:	f107 010e 	add.w	r1, r7, #14
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	2201      	movs	r2, #1
 80012ec:	480e      	ldr	r0, [pc, #56]	; (8001328 <ReceiveAndHandshake+0xcc>)
 80012ee:	f004 fbe1 	bl	8005ab4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, dummy, 4, 1000);
 80012f2:	f107 0108 	add.w	r1, r7, #8
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	2204      	movs	r2, #4
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <ReceiveAndHandshake+0xcc>)
 80012fe:	f004 fbd9 	bl	8005ab4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &etx, 1, 1000);
 8001302:	f107 010c 	add.w	r1, r7, #12
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	2201      	movs	r2, #1
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <ReceiveAndHandshake+0xcc>)
 800130e:	f004 fbd1 	bl	8005ab4 <HAL_UART_Transmit>
		rxnak = 0;
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <ReceiveAndHandshake+0xc8>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
		return 0;
 8001318:	2300      	movs	r3, #0
	}
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000052 	.word	0x20000052
 8001328:	200005d0 	.word	0x200005d0

0800132c <ReceiveAck>:

uint8_t ReceiveAck (uint8_t *buffer)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if (*buffer != STX)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2bfe      	cmp	r3, #254	; 0xfe
 800133a:	d002      	beq.n	8001342 <ReceiveAck+0x16>
	{
		txnak = 1;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <ReceiveAck+0x80>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
	}

	if (*(buffer + 6) != ETX)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3306      	adds	r3, #6
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d002      	beq.n	8001352 <ReceiveAck+0x26>
	{
		txnak = 1;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <ReceiveAck+0x80>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
	}

	if (!txnak)
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <ReceiveAck+0x80>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d122      	bne.n	80013a0 <ReceiveAck+0x74>
	{
		if (*(buffer + 1) == Ack)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3301      	adds	r3, #1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2bf1      	cmp	r3, #241	; 0xf1
 8001362:	d113      	bne.n	800138c <ReceiveAck+0x60>
		{
			if (*(buffer+5) == txindex)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3305      	adds	r3, #5
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <ReceiveAck+0x84>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d107      	bne.n	8001382 <ReceiveAck+0x56>
			{
				txack = 1;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <ReceiveAck+0x88>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop_IT(&htim6);
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <ReceiveAck+0x8c>)
 800137a:	f003 fabb 	bl	80048f4 <HAL_TIM_Base_Stop_IT>
				return 1;
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <ReceiveAck+0x76>
			}
			else
			{
				txnak = 1;
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <ReceiveAck+0x80>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
				return 2;
 8001388:	2302      	movs	r3, #2
 800138a:	e00a      	b.n	80013a2 <ReceiveAck+0x76>
			}
		}
		else if (*(buffer + 1) == Nak)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2bf0      	cmp	r3, #240	; 0xf0
 8001394:	d104      	bne.n	80013a0 <ReceiveAck+0x74>
		{
			txnak = 1;
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <ReceiveAck+0x80>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
			return 2;
 800139c:	2302      	movs	r3, #2
 800139e:	e000      	b.n	80013a2 <ReceiveAck+0x76>
		}
	}
	//else
	{
		return 0;
 80013a0:	2300      	movs	r3, #0
	}
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000050 	.word	0x20000050
 80013b0:	20000051 	.word	0x20000051
 80013b4:	20000000 	.word	0x20000000
 80013b8:	200006e8 	.word	0x200006e8

080013bc <Float2Char>:

/**
 * Chuyển số thực thành số nguyên. Nhận vào số thực và trả về 4 byte số nguyên
 */
uint8_t* Float2Char (float floatNum)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t charNum[4];
	long *pLong;
	pLong = (long*)&floatNum;
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	60fb      	str	r3, [r7, #12]
	charNum[0] = *pLong>>24;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	161b      	asrs	r3, r3, #24
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <Float2Char+0x4c>)
 80013d4:	701a      	strb	r2, [r3, #0]
	charNum[1] = *pLong>>16;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	141b      	asrs	r3, r3, #16
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <Float2Char+0x4c>)
 80013e0:	705a      	strb	r2, [r3, #1]
	charNum[2] = *pLong>>8;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	121b      	asrs	r3, r3, #8
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <Float2Char+0x4c>)
 80013ec:	709a      	strb	r2, [r3, #2]
	charNum[3] = *pLong;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <Float2Char+0x4c>)
 80013f6:	70da      	strb	r2, [r3, #3]
	return charNum;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <Float2Char+0x4c>)
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000054 	.word	0x20000054

0800140c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
	//if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0)
	{
		//TransmitCommand(Measure, 1, Float);
		falsetransmit ^= 0x01;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_GPIO_EXTI_Callback+0x24>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f083 0301 	eor.w	r3, r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GPIO_EXTI_Callback+0x24>)
 8001422:	701a      	strb	r2, [r3, #0]
	}
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	20000058 	.word	0x20000058

08001434 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	if (__HAL_TIM_GET_IT_SOURCE(&htim4,TIM_IT_UPDATE))
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b01      	cmp	r3, #1
 8001448:	d168      	bne.n	800151c <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		//HAL_TIM_Base_Start(&htim5);
		switch (Motormode)
 800144a:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d002      	beq.n	8001458 <HAL_TIM_PeriodElapsedCallback+0x24>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d007      	beq.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x32>
		case Pos:
			Encount = EncoderPosCount(&htim2);
			break;

		default:
			break;
 8001456:	e00d      	b.n	8001474 <HAL_TIM_PeriodElapsedCallback+0x40>
			Encount = EncoderCount(&htim2);
 8001458:	4854      	ldr	r0, [pc, #336]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x178>)
 800145a:	f7ff fd97 	bl	8000f8c <EncoderCount>
 800145e:	4602      	mov	r2, r0
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001462:	601a      	str	r2, [r3, #0]
			break;
 8001464:	e006      	b.n	8001474 <HAL_TIM_PeriodElapsedCallback+0x40>
			Encount = EncoderPosCount(&htim2);
 8001466:	4851      	ldr	r0, [pc, #324]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001468:	f7ff fda3 	bl	8000fb2 <EncoderPosCount>
 800146c:	4602      	mov	r2, r0
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001470:	601a      	str	r2, [r3, #0]
			break;
 8001472:	bf00      	nop
		}

		Pwmduty = Calibrated_PID(&Encount);
 8001474:	484e      	ldr	r0, [pc, #312]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001476:	f7ff fc8b 	bl	8000d90 <Calibrated_PID>
 800147a:	4602      	mov	r2, r0
 800147c:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800147e:	601a      	str	r2, [r3, #0]
		if (Pwmduty < -45) Pwmduty = -45;
 8001480:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8001488:	da03      	bge.n	8001492 <HAL_TIM_PeriodElapsedCallback+0x5e>
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800148c:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8001490:	601a      	str	r2, [r3, #0]
		if (Pwmduty > 45) Pwmduty = 45;
 8001492:	4b48      	ldr	r3, [pc, #288]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b2d      	cmp	r3, #45	; 0x2d
 8001498:	dd02      	ble.n	80014a0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800149c:	222d      	movs	r2, #45	; 0x2d
 800149e:	601a      	str	r2, [r3, #0]


		float calibmea = 0;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
		switch (Motormode)
 80014a6:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d002      	beq.n	80014b4 <HAL_TIM_PeriodElapsedCallback+0x80>
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d00e      	beq.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0x9c>
			break;
		case Pos:
			calibmea = Encount/gainp; ///40.0;
			break;
		default:
			break;
 80014b2:	e01b      	b.n	80014ec <HAL_TIM_PeriodElapsedCallback+0xb8>
			calibmea = Encount/gainv;    //*(5.0/6.0);
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ca:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 80014ce:	e00d      	b.n	80014ec <HAL_TIM_PeriodElapsedCallback+0xb8>
			calibmea = Encount/gainp; ///40.0;
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x188>)
 80014de:	ed93 7a00 	vldr	s14, [r3]
 80014e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e6:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 80014ea:	bf00      	nop
		}

		txack = 1; txnak = 0;
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
		TransmitAndHandshake(InBuffer, realtime, calibmea, Pwmduty);
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	ee07 3a10 	vmov	s14, r3
 8001506:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800150a:	eeb0 1a47 	vmov.f32	s2, s14
 800150e:	edd7 0a03 	vldr	s1, [r7, #12]
 8001512:	eeb0 0a67 	vmov.f32	s0, s15
 8001516:	482d      	ldr	r0, [pc, #180]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001518:	f7ff fe42 	bl	80011a0 <TransmitAndHandshake>
		//uint32_t gettime = __HAL_TIM_GET_COUNTER(&htim5);
		//__HAL_TIM_SET_COUNTER(&htim5,0);
	}


	if (__HAL_TIM_GET_IT_SOURCE(&htim6,TIM_IT_UPDATE))
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d137      	bne.n	800159a <HAL_TIM_PeriodElapsedCallback+0x166>
	{
		float calibmea = 0;
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
		switch (Motormode)
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d002      	beq.n	800153e <HAL_TIM_PeriodElapsedCallback+0x10a>
 8001538:	2b02      	cmp	r3, #2
 800153a:	d00e      	beq.n	800155a <HAL_TIM_PeriodElapsedCallback+0x126>
			break;
		case Pos:
			calibmea = Encount/gainp; ///40.0;
			break;
		default:
			break;
 800153c:	e01b      	b.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x142>
			calibmea = Encount/gainv;    //*(5.0/6.0);
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800154c:	ed93 7a00 	vldr	s14, [r3]
 8001550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001554:	edc7 7a02 	vstr	s15, [r7, #8]
			break;
 8001558:	e00d      	b.n	8001576 <HAL_TIM_PeriodElapsedCallback+0x142>
			calibmea = Encount/gainp; ///40.0;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001570:	edc7 7a02 	vstr	s15, [r7, #8]
			break;
 8001574:	bf00      	nop
		}
		TransmitAndHandshake(InBuffer, realtime, calibmea, Pwmduty);
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	ee07 3a10 	vmov	s14, r3
 8001584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001588:	eeb0 1a47 	vmov.f32	s2, s14
 800158c:	edd7 0a02 	vldr	s1, [r7, #8]
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001596:	f7ff fe03 	bl	80011a0 <TransmitAndHandshake>
	}
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000007c 	.word	0x2000007c
 80015a8:	20000010 	.word	0x20000010
 80015ac:	2000073c 	.word	0x2000073c
 80015b0:	2000006c 	.word	0x2000006c
 80015b4:	20000070 	.word	0x20000070
 80015b8:	20000008 	.word	0x20000008
 80015bc:	2000000c 	.word	0x2000000c
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000050 	.word	0x20000050
 80015c8:	2000005c 	.word	0x2000005c
 80015cc:	20000074 	.word	0x20000074
 80015d0:	200006e8 	.word	0x200006e8

080015d4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	if (HAL_UART_GetError(&hlpuart1) == HAL_UART_ERROR_PE)
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <HAL_UART_ErrorCallback+0x24>)
 80015de:	f004 fd49 	bl	8006074 <HAL_UART_GetError>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d102      	bne.n	80015ee <HAL_UART_ErrorCallback+0x1a>
	{
		rxnak = 1;
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_UART_ErrorCallback+0x28>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
	}
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200005d0 	.word	0x200005d0
 80015fc:	20000052 	.word	0x20000052

08001600 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	if (ReceiveAck(Buffer))
 8001608:	4825      	ldr	r0, [pc, #148]	; (80016a0 <HAL_UART_RxCpltCallback+0xa0>)
 800160a:	f7ff fe8f 	bl	800132c <ReceiveAck>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_UART_RxCpltCallback+0x20>
	{
		HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 8001614:	2207      	movs	r2, #7
 8001616:	4922      	ldr	r1, [pc, #136]	; (80016a0 <HAL_UART_RxCpltCallback+0xa0>)
 8001618:	4822      	ldr	r0, [pc, #136]	; (80016a4 <HAL_UART_RxCpltCallback+0xa4>)
 800161a:	f004 fae3 	bl	8005be4 <HAL_UART_Receive_IT>
		return;
 800161e:	e03b      	b.n	8001698 <HAL_UART_RxCpltCallback+0x98>
	}

	if (!falsetransmit)
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_UART_RxCpltCallback+0xa8>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d104      	bne.n	8001632 <HAL_UART_RxCpltCallback+0x32>
	{
		ReceiveAndHandshake(Buffer, Instruction);
 8001628:	4920      	ldr	r1, [pc, #128]	; (80016ac <HAL_UART_RxCpltCallback+0xac>)
 800162a:	481d      	ldr	r0, [pc, #116]	; (80016a0 <HAL_UART_RxCpltCallback+0xa0>)
 800162c:	f7ff fe16 	bl	800125c <ReceiveAndHandshake>
 8001630:	e02d      	b.n	800168e <HAL_UART_RxCpltCallback+0x8e>
	}
	else
	{
		uint8_t nak = Nak, stx = STX, etx = ETX;
 8001632:	23f0      	movs	r3, #240	; 0xf0
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	23fe      	movs	r3, #254	; 0xfe
 8001638:	73bb      	strb	r3, [r7, #14]
 800163a:	23ff      	movs	r3, #255	; 0xff
 800163c:	737b      	strb	r3, [r7, #13]
		uint8_t dummy[4] = {1,0,0,0};
 800163e:	2301      	movs	r3, #1
 8001640:	723b      	strb	r3, [r7, #8]
 8001642:	2300      	movs	r3, #0
 8001644:	727b      	strb	r3, [r7, #9]
 8001646:	2300      	movs	r3, #0
 8001648:	72bb      	strb	r3, [r7, #10]
 800164a:	2300      	movs	r3, #0
 800164c:	72fb      	strb	r3, [r7, #11]
		HAL_UART_Transmit(&hlpuart1, &stx, 1, 1000);
 800164e:	f107 010e 	add.w	r1, r7, #14
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	2201      	movs	r2, #1
 8001658:	4812      	ldr	r0, [pc, #72]	; (80016a4 <HAL_UART_RxCpltCallback+0xa4>)
 800165a:	f004 fa2b 	bl	8005ab4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &nak, 1, 1000);
 800165e:	f107 010f 	add.w	r1, r7, #15
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	2201      	movs	r2, #1
 8001668:	480e      	ldr	r0, [pc, #56]	; (80016a4 <HAL_UART_RxCpltCallback+0xa4>)
 800166a:	f004 fa23 	bl	8005ab4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, dummy, 4, 1000);
 800166e:	f107 0108 	add.w	r1, r7, #8
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	2204      	movs	r2, #4
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <HAL_UART_RxCpltCallback+0xa4>)
 800167a:	f004 fa1b 	bl	8005ab4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&hlpuart1, &etx, 1, 1000);
 800167e:	f107 010d 	add.w	r1, r7, #13
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	2201      	movs	r2, #1
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <HAL_UART_RxCpltCallback+0xa4>)
 800168a:	f004 fa13 	bl	8005ab4 <HAL_UART_Transmit>
//				break;
//			}
//		}
//		break;
//	}
	HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 800168e:	2207      	movs	r2, #7
 8001690:	4903      	ldr	r1, [pc, #12]	; (80016a0 <HAL_UART_RxCpltCallback+0xa0>)
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <HAL_UART_RxCpltCallback+0xa4>)
 8001694:	f004 faa6 	bl	8005be4 <HAL_UART_Receive_IT>
}
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000728 	.word	0x20000728
 80016a4:	200005d0 	.word	0x200005d0
 80016a8:	20000058 	.word	0x20000058
 80016ac:	20000734 	.word	0x20000734

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b6:	f000 ff30 	bl	800251a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ba:	f000 f83b 	bl	8001734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016be:	f000 fb6b 	bl	8001d98 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80016c2:	f000 f8c1 	bl	8001848 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80016c6:	f000 f905 	bl	80018d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80016ca:	f000 f953 	bl	8001974 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80016ce:	f000 f99d 	bl	8001a0c <MX_TIM2_Init>
  MX_TIM3_Init();
 80016d2:	f000 f9ef 	bl	8001ab4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016d6:	f000 fa63 	bl	8001ba0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80016da:	f000 faaf 	bl	8001c3c <MX_TIM5_Init>
  MX_TIM6_Init();
 80016de:	f000 fafb 	bl	8001cd8 <MX_TIM6_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016e2:	f000 fb2f 	bl	8001d44 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Init(&htim2);
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <main+0x6c>)
 80016e8:	f003 f8ae 	bl	8004848 <HAL_TIM_Base_Init>
  HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 80016ec:	2207      	movs	r2, #7
 80016ee:	490c      	ldr	r1, [pc, #48]	; (8001720 <main+0x70>)
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <main+0x74>)
 80016f2:	f004 fa77 	bl	8005be4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 80016f6:	2207      	movs	r2, #7
 80016f8:	4909      	ldr	r1, [pc, #36]	; (8001720 <main+0x70>)
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <main+0x74>)
 80016fc:	f004 fa72 	bl	8005be4 <HAL_UART_Receive_IT>
	  PWMGen2(&Pwmduty, &htim3, TIM_CHANNEL_1, GPIOD, GPIO_PIN_0, GPIOD, GPIO_PIN_1);
 8001700:	2302      	movs	r3, #2
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <main+0x78>)
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	2301      	movs	r3, #1
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <main+0x78>)
 800170e:	2200      	movs	r2, #0
 8001710:	4906      	ldr	r1, [pc, #24]	; (800172c <main+0x7c>)
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <main+0x80>)
 8001714:	f7ff fc5c 	bl	8000fd0 <PWMGen2>
	  HAL_UART_Receive_IT(&hlpuart1, Buffer, 7);
 8001718:	e7ed      	b.n	80016f6 <main+0x46>
 800171a:	bf00      	nop
 800171c:	2000073c 	.word	0x2000073c
 8001720:	20000728 	.word	0x20000728
 8001724:	200005d0 	.word	0x200005d0
 8001728:	48000c00 	.word	0x48000c00
 800172c:	20000590 	.word	0x20000590
 8001730:	20000070 	.word	0x20000070

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0bc      	sub	sp, #240	; 0xf0
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800173e:	2244      	movs	r2, #68	; 0x44
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f006 fd84 	bl	8008250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2294      	movs	r2, #148	; 0x94
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f006 fd76 	bl	8008250 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001764:	2000      	movs	r0, #0
 8001766:	f001 fc05 	bl	8002f74 <HAL_PWREx_ControlVoltageScaling>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001770:	f000 fbe0 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001774:	2301      	movs	r3, #1
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800177a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800177e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001788:	2303      	movs	r3, #3
 800178a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001794:	231e      	movs	r3, #30
 8001796:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fca3 	bl	80030fc <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017bc:	f000 fbba 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c6:	2303      	movs	r3, #3
 80017c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017e4:	2105      	movs	r1, #5
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 f876 	bl	80038d8 <HAL_RCC_ClockConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017f2:	f000 fb9f 	bl	8001f34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80017f6:	f242 0325 	movw	r3, #8229	; 0x2025
 80017fa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017fc:	2300      	movs	r3, #0
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001800:	2300      	movs	r3, #0
 8001802:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001804:	2300      	movs	r3, #0
 8001806:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001808:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800180c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800180e:	2303      	movs	r3, #3
 8001810:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001812:	2301      	movs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001816:	230c      	movs	r3, #12
 8001818:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800181a:	2302      	movs	r3, #2
 800181c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001826:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800182a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fb02 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800183a:	f000 fb7b 	bl	8001f34 <Error_Handler>
  }
}
 800183e:	bf00      	nop
 8001840:	37f0      	adds	r7, #240	; 0xf0
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 800184e:	4a20      	ldr	r2, [pc, #128]	; (80018d0 <MX_LPUART1_UART_Init+0x88>)
 8001850:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 800185c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001860:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_ODD;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 800186a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800186e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 800188a:	2200      	movs	r2, #0
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 8001890:	2200      	movs	r2, #0
 8001892:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 8001896:	f004 f8bd 	bl	8005a14 <HAL_UART_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80018a0:	f000 fb48 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a4:	2100      	movs	r1, #0
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 80018a8:	f006 f94b 	bl	8007b42 <HAL_UARTEx_SetTxFifoThreshold>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_LPUART1_UART_Init+0x6e>
  {
    Error_Handler();
 80018b2:	f000 fb3f 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_LPUART1_UART_Init+0x84>)
 80018ba:	f006 f980 	bl	8007bbe <HAL_UARTEx_SetRxFifoThreshold>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80018c4:	f000 fb36 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200005d0 	.word	0x200005d0
 80018d0:	40008000 	.word	0x40008000

080018d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <MX_USART1_UART_Init+0x98>)
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <MX_USART1_UART_Init+0x9c>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <MX_USART1_UART_Init+0x98>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <MX_USART1_UART_Init+0x98>)
 80018e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <MX_USART1_UART_Init+0x98>)
 80018f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <MX_USART1_UART_Init+0x98>)
 80018f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80018fc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_USART1_UART_Init+0x98>)
 8001900:	220c      	movs	r2, #12
 8001902:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_USART1_UART_Init+0x98>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_USART1_UART_Init+0x98>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_USART1_UART_Init+0x98>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_USART1_UART_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_USART1_UART_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001922:	4812      	ldr	r0, [pc, #72]	; (800196c <MX_USART1_UART_Init+0x98>)
 8001924:	f004 f876 	bl	8005a14 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800192e:	f000 fb01 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001932:	2100      	movs	r1, #0
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <MX_USART1_UART_Init+0x98>)
 8001936:	f006 f904 	bl	8007b42 <HAL_UARTEx_SetTxFifoThreshold>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8001940:	f000 faf8 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001944:	2100      	movs	r1, #0
 8001946:	4809      	ldr	r0, [pc, #36]	; (800196c <MX_USART1_UART_Init+0x98>)
 8001948:	f006 f939 	bl	8007bbe <HAL_UARTEx_SetRxFifoThreshold>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8001952:	f000 faef 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_USART1_UART_Init+0x98>)
 8001958:	f006 f8ba 	bl	8007ad0 <HAL_UARTEx_DisableFifoMode>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8001962:	f000 fae7 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000065c 	.word	0x2000065c
 8001970:	40013800 	.word	0x40013800

08001974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 800197a:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <MX_USART3_UART_Init+0x94>)
 800197c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019bc:	4811      	ldr	r0, [pc, #68]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019be:	f004 f829 	bl	8005a14 <HAL_UART_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019c8:	f000 fab4 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019cc:	2100      	movs	r1, #0
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019d0:	f006 f8b7 	bl	8007b42 <HAL_UARTEx_SetTxFifoThreshold>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019da:	f000 faab 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019de:	2100      	movs	r1, #0
 80019e0:	4808      	ldr	r0, [pc, #32]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019e2:	f006 f8ec 	bl	8007bbe <HAL_UARTEx_SetRxFifoThreshold>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019ec:	f000 faa2 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_USART3_UART_Init+0x90>)
 80019f2:	f006 f86d 	bl	8007ad0 <HAL_UARTEx_DisableFifoMode>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019fc:	f000 fa9a 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200000bc 	.word	0x200000bc
 8001a08:	40004800 	.word	0x40004800

08001a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2224      	movs	r2, #36	; 0x24
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f006 fc18 	bl	8008250 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <MX_TIM2_Init+0xa4>)
 8001a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <MX_TIM2_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM2_Init+0xa4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <MX_TIM2_Init+0xa4>)
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM2_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_TIM2_Init+0xa4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a52:	2303      	movs	r3, #3
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM2_Init+0xa4>)
 8001a7e:	f002 ff99 	bl	80049b4 <HAL_TIM_Encoder_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a88:	f000 fa54 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_TIM2_Init+0xa4>)
 8001a9a:	f003 ff41 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001aa4:	f000 fa46 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000073c 	.word	0x2000073c

08001ab4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001ae8:	4a2c      	ldr	r2, [pc, #176]	; (8001b9c <MX_TIM3_Init+0xe8>)
 8001aea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001afa:	2263      	movs	r2, #99	; 0x63
 8001afc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b0a:	4823      	ldr	r0, [pc, #140]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001b0c:	f002 fe9c 	bl	8004848 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b16:	f000 fa0d 	bl	8001f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b24:	4619      	mov	r1, r3
 8001b26:	481c      	ldr	r0, [pc, #112]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001b28:	f003 fa0e 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b32:	f000 f9ff 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b36:	4818      	ldr	r0, [pc, #96]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001b38:	f002 ff07 	bl	800494a <HAL_TIM_PWM_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b42:	f000 f9f7 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4810      	ldr	r0, [pc, #64]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001b56:	f003 fee3 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b60:	f000 f9e8 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b64:	2360      	movs	r3, #96	; 0x60
 8001b66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	2200      	movs	r2, #0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001b7c:	f003 f8cc 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b86:	f000 f9d5 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b8a:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM3_Init+0xe4>)
 8001b8c:	f000 fb64 	bl	8002258 <HAL_TIM_MspPostInit>

}
 8001b90:	bf00      	nop
 8001b92:	3738      	adds	r7, #56	; 0x38
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000590 	.word	0x20000590
 8001b9c:	40000400 	.word	0x40000400

08001ba0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <MX_TIM4_Init+0x98>)
 8001bc2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bc6:	2227      	movs	r2, #39	; 0x27
 8001bc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bd2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001bd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001be6:	f002 fe2f 	bl	8004848 <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bf0:	f000 f9a0 	bl	8001f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001c02:	f003 f9a1 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c0c:	f000 f992 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_TIM4_Init+0x94>)
 8001c1e:	f003 fe7f 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f000 f984 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000007c 	.word	0x2000007c
 8001c38:	40000800 	.word	0x40000800

08001c3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <MX_TIM5_Init+0x98>)
 8001c5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001c62:	2227      	movs	r2, #39	; 0x27
 8001c64:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c72:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c80:	4813      	ldr	r0, [pc, #76]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001c82:	f002 fde1 	bl	8004848 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c8c:	f000 f952 	bl	8001f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c96:	f107 0310 	add.w	r3, r7, #16
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001c9e:	f003 f953 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ca8:	f000 f944 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_TIM5_Init+0x94>)
 8001cba:	f003 fe31 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001cc4:	f000 f936 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000550 	.word	0x20000550
 8001cd4:	40000c00 	.word	0x40000c00

08001cd8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_TIM6_Init+0x64>)
 8001cea:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <MX_TIM6_Init+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_TIM6_Init+0x64>)
 8001cf0:	2227      	movs	r2, #39	; 0x27
 8001cf2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_TIM6_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 799;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_TIM6_Init+0x64>)
 8001cfc:	f240 321f 	movw	r2, #799	; 0x31f
 8001d00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_TIM6_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <MX_TIM6_Init+0x64>)
 8001d0a:	f002 fd9d 	bl	8004848 <HAL_TIM_Base_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d14:	f000 f90e 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_TIM6_Init+0x64>)
 8001d26:	f003 fdfb 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d30:	f000 f900 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200006e8 	.word	0x200006e8
 8001d40:	40001000 	.word	0x40001000

08001d44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d52:	2206      	movs	r2, #6
 8001d54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d58:	2202      	movs	r2, #2
 8001d5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d80:	4804      	ldr	r0, [pc, #16]	; (8001d94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001d82:	f000 ff8f 	bl	8002ca4 <HAL_PCD_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001d8c:	f000 f8d2 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000148 	.word	0x20000148

08001d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dae:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a5a      	ldr	r2, [pc, #360]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	4a54      	ldr	r2, [pc, #336]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd2:	4b52      	ldr	r3, [pc, #328]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	4a4e      	ldr	r2, [pc, #312]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dea:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a42      	ldr	r2, [pc, #264]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a3c      	ldr	r2, [pc, #240]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <MX_GPIO_Init+0x184>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001e56:	f001 f941 	bl	80030dc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001e60:	482f      	ldr	r0, [pc, #188]	; (8001f20 <MX_GPIO_Init+0x188>)
 8001e62:	f000 feef 	bl	8002c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2120      	movs	r1, #32
 8001e6a:	482e      	ldr	r0, [pc, #184]	; (8001f24 <MX_GPIO_Init+0x18c>)
 8001e6c:	f000 feea 	bl	8002c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2103      	movs	r1, #3
 8001e74:	482c      	ldr	r0, [pc, #176]	; (8001f28 <MX_GPIO_Init+0x190>)
 8001e76:	f000 fee5 	bl	8002c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <MX_GPIO_Init+0x194>)
 8001e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e84:	2302      	movs	r3, #2
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4828      	ldr	r0, [pc, #160]	; (8001f30 <MX_GPIO_Init+0x198>)
 8001e90:	f000 fd46 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001e94:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	481c      	ldr	r0, [pc, #112]	; (8001f20 <MX_GPIO_Init+0x188>)
 8001eae:	f000 fd37 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4816      	ldr	r0, [pc, #88]	; (8001f24 <MX_GPIO_Init+0x18c>)
 8001eca:	f000 fd29 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ece:	2340      	movs	r3, #64	; 0x40
 8001ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4810      	ldr	r0, [pc, #64]	; (8001f24 <MX_GPIO_Init+0x18c>)
 8001ee2:	f000 fd1d 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4619      	mov	r1, r3
 8001efc:	480a      	ldr	r0, [pc, #40]	; (8001f28 <MX_GPIO_Init+0x190>)
 8001efe:	f000 fd0f 	bl	8002920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	2028      	movs	r0, #40	; 0x28
 8001f08:	f000 fc75 	bl	80027f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f0c:	2028      	movs	r0, #40	; 0x28
 8001f0e:	f000 fc8e 	bl	800282e <HAL_NVIC_EnableIRQ>

}
 8001f12:	bf00      	nop
 8001f14:	3730      	adds	r7, #48	; 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	48001800 	.word	0x48001800
 8001f28:	48000c00 	.word	0x48000c00
 8001f2c:	10110000 	.word	0x10110000
 8001f30:	48000800 	.word	0x48000800

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_MspInit+0x44>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_MspInit+0x44>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6613      	str	r3, [r2, #96]	; 0x60
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_MspInit+0x44>)
 8001f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_MspInit+0x44>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_MspInit+0x44>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_MspInit+0x44>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	; 0x38
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a50      	ldr	r2, [pc, #320]	; (80020ec <HAL_UART_MspInit+0x160>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d133      	bne.n	8002016 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fae:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	4a4f      	ldr	r2, [pc, #316]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	623b      	str	r3, [r7, #32]
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a49      	ldr	r2, [pc, #292]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8001fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8001fde:	f001 f87d 	bl	80030dc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001fe2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	483d      	ldr	r0, [pc, #244]	; (80020f4 <HAL_UART_MspInit+0x168>)
 8002000:	f000 fc8e 	bl	8002920 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2046      	movs	r0, #70	; 0x46
 800200a:	f000 fbf4 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800200e:	2046      	movs	r0, #70	; 0x46
 8002010:	f000 fc0d 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002014:	e066      	b.n	80020e4 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_UART_MspInit+0x16c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d133      	bne.n	8002088 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002020:	4b33      	ldr	r3, [pc, #204]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002024:	4a32      	ldr	r2, [pc, #200]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8002026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202a:	6613      	str	r3, [r2, #96]	; 0x60
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_UART_MspInit+0x164>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_UART_MspInit+0x164>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	4a2c      	ldr	r2, [pc, #176]	; (80020f0 <HAL_UART_MspInit+0x164>)
 800203e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002044:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8002050:	f001 f844 	bl	80030dc <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002054:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002066:	2307      	movs	r3, #7
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800206a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206e:	4619      	mov	r1, r3
 8002070:	4820      	ldr	r0, [pc, #128]	; (80020f4 <HAL_UART_MspInit+0x168>)
 8002072:	f000 fc55 	bl	8002920 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2025      	movs	r0, #37	; 0x25
 800207c:	f000 fbbb 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002080:	2025      	movs	r0, #37	; 0x25
 8002082:	f000 fbd4 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 8002086:	e02d      	b.n	80020e4 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <HAL_UART_MspInit+0x170>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d128      	bne.n	80020e4 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_UART_MspInit+0x164>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	6593      	str	r3, [r2, #88]	; 0x58
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_UART_MspInit+0x164>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_UART_MspInit+0x164>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_UART_MspInit+0x164>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_UART_MspInit+0x164>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020d4:	2307      	movs	r3, #7
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <HAL_UART_MspInit+0x174>)
 80020e0:	f000 fc1e 	bl	8002920 <HAL_GPIO_Init>
}
 80020e4:	bf00      	nop
 80020e6:	3738      	adds	r7, #56	; 0x38
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40008000 	.word	0x40008000
 80020f0:	40021000 	.word	0x40021000
 80020f4:	48001800 	.word	0x48001800
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40004800 	.word	0x40004800
 8002100:	48000c00 	.word	0x48000c00

08002104 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d128      	bne.n	8002178 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a15      	ldr	r2, [pc, #84]	; (8002180 <HAL_TIM_Encoder_MspInit+0x7c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_TIM_Encoder_MspInit+0x7c>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002156:	2303      	movs	r3, #3
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002166:	2301      	movs	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002174:	f000 fbd4 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <HAL_TIM_Base_MspInit+0xc0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10c      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6593      	str	r3, [r2, #88]	; 0x58
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80021ae:	e044      	b.n	800223a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <HAL_TIM_Base_MspInit+0xc8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d114      	bne.n	80021e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2101      	movs	r1, #1
 80021d6:	201e      	movs	r0, #30
 80021d8:	f000 fb0d 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021dc:	201e      	movs	r0, #30
 80021de:	f000 fb26 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 80021e2:	e02a      	b.n	800223a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_TIM_Base_MspInit+0xcc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10c      	bne.n	8002208 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6593      	str	r3, [r2, #88]	; 0x58
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
}
 8002206:	e018      	b.n	800223a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_TIM_Base_MspInit+0xd0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d113      	bne.n	800223a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 8002218:	f043 0310 	orr.w	r3, r3, #16
 800221c:	6593      	str	r3, [r2, #88]	; 0x58
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_TIM_Base_MspInit+0xc4>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2036      	movs	r0, #54	; 0x36
 8002230:	f000 fae1 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002234:	2036      	movs	r0, #54	; 0x36
 8002236:	f000 fafa 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40000400 	.word	0x40000400
 8002248:	40021000 	.word	0x40021000
 800224c:	40000800 	.word	0x40000800
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40001000 	.word	0x40001000

08002258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_TIM_MspPostInit+0x64>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d11b      	bne.n	80022b2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_TIM_MspPostInit+0x68>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_TIM_MspPostInit+0x68>)
 8002280:	f043 0310 	orr.w	r3, r3, #16
 8002284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_TIM_MspPostInit+0x68>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PE3     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002292:	2308      	movs	r3, #8
 8002294:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_TIM_MspPostInit+0x6c>)
 80022ae:	f000 fb37 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48001000 	.word	0x48001000

080022c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e8:	d154      	bne.n	8002394 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_PCD_MspInit+0xd4>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	4a2b      	ldr	r2, [pc, #172]	; (800239c <HAL_PCD_MspInit+0xd4>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_PCD_MspInit+0xd4>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002302:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002314:	230a      	movs	r3, #10
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002322:	f000 fafd 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4619      	mov	r1, r3
 800233a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233e:	f000 faef 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_PCD_MspInit+0xd4>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_PCD_MspInit+0xd4>)
 8002348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_PCD_MspInit+0xd4>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_PCD_MspInit+0xd4>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_PCD_MspInit+0xd4>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <HAL_PCD_MspInit+0xd4>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_PCD_MspInit+0xd4>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800237e:	f000 fe9d 	bl	80030bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_PCD_MspInit+0xd4>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <HAL_PCD_MspInit+0xd4>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800238e:	e001      	b.n	8002394 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002390:	f000 fe94 	bl	80030bc <HAL_PWREx_EnableVddUSB>
}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <MemManage_Handler+0x4>

080023ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <BusFault_Handler+0x4>

080023c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <UsageFault_Handler+0x4>

080023c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f4:	f000 f8e4 	bl	80025c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <TIM4_IRQHandler+0x10>)
 8002402:	f002 fb69 	bl	8004ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000007c 	.word	0x2000007c

08002410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <USART1_IRQHandler+0x10>)
 8002416:	f003 fcbd 	bl	8005d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000065c 	.word	0x2000065c

08002424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800242c:	f000 fc22 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM6_DAC_IRQHandler+0x10>)
 800243a:	f002 fb4d 	bl	8004ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200006e8 	.word	0x200006e8

08002448 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <LPUART1_IRQHandler+0x10>)
 800244e:	f003 fca1 	bl	8005d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200005d0 	.word	0x200005d0

0800245c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <SystemInit+0x64>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <SystemInit+0x64>)
 8002468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800246c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <SystemInit+0x68>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <SystemInit+0x68>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <SystemInit+0x68>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <SystemInit+0x68>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <SystemInit+0x68>)
 8002488:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800248c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002490:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <SystemInit+0x68>)
 8002494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002498:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <SystemInit+0x68>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <SystemInit+0x68>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <SystemInit+0x68>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SystemInit+0x64>)
 80024ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024b2:	609a      	str	r2, [r3, #8]
#endif
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00
 80024c4:	40021000 	.word	0x40021000

080024c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024ce:	e003      	b.n	80024d8 <LoopCopyDataInit>

080024d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024d6:	3104      	adds	r1, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024d8:	480b      	ldr	r0, [pc, #44]	; (8002508 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <LoopForever+0xe>)
	adds	r2, r0, r1
 80024dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024e0:	d3f6      	bcc.n	80024d0 <CopyDataInit>
	ldr	r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024e4:	e002      	b.n	80024ec <LoopFillZerobss>

080024e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024e8:	f842 3b04 	str.w	r3, [r2], #4

080024ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <LoopForever+0x16>)
	cmp	r2, r3
 80024ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024f0:	d3f9      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024f2:	f7ff ffb3 	bl	800245c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f005 fe87 	bl	8008208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024fa:	f7ff f8d9 	bl	80016b0 <main>

080024fe <LoopForever>:

LoopForever:
    b LoopForever
 80024fe:	e7fe      	b.n	80024fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002500:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002504:	080082e0 	.word	0x080082e0
	ldr	r0, =_sdata
 8002508:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800250c:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8002510:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8002514:	20000780 	.word	0x20000780

08002518 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC1_IRQHandler>

0800251a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002524:	2003      	movs	r0, #3
 8002526:	f000 f95b 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252a:	2000      	movs	r0, #0
 800252c:	f000 f80e 	bl	800254c <HAL_InitTick>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	e001      	b.n	8002540 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800253c:	f7ff fd02 	bl	8001f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002540:	79fb      	ldrb	r3, [r7, #7]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_InitTick+0x68>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d022      	beq.n	80025a6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_InitTick+0x6c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_InitTick+0x68>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800256c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f968 	bl	800284a <HAL_SYSTICK_Config>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10f      	bne.n	80025a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	d809      	bhi.n	800259a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002586:	2200      	movs	r2, #0
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	f04f 30ff 	mov.w	r0, #4294967295
 800258e:	f000 f932 	bl	80027f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_InitTick+0x70>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e007      	b.n	80025aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e004      	b.n	80025aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e001      	b.n	80025aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2000001c 	.word	0x2000001c
 80025b8:	20000014 	.word	0x20000014
 80025bc:	20000018 	.word	0x20000018

080025c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_IncTick+0x1c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_IncTick+0x20>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4413      	add	r3, r2
 80025ce:	4a03      	ldr	r2, [pc, #12]	; (80025dc <HAL_IncTick+0x1c>)
 80025d0:	6013      	str	r3, [r2, #0]
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	2000077c 	.word	0x2000077c
 80025e0:	2000001c 	.word	0x2000001c

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000077c 	.word	0x2000077c

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d004      	beq.n	8002620 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_Delay+0x40>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002620:	bf00      	nop
 8002622:	f7ff ffdf 	bl	80025e4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	429a      	cmp	r2, r3
 8002630:	d8f7      	bhi.n	8002622 <HAL_Delay+0x26>
  {
  }
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000001c 	.word	0x2000001c

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff29 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff3e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff31 	bl	80026a4 <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d005      	beq.n	8002886 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2204      	movs	r2, #4
 800287e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	e047      	b.n	8002916 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 020e 	bic.w	r2, r2, #14
 8002894:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f003 021c 	and.w	r2, r3, #28
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2101      	movs	r1, #1
 80028c4:	fa01 f202 	lsl.w	r2, r1, r2
 80028c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028d2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028f4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
    }
  }
  return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292e:	e166      	b.n	8002bfe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8158 	beq.w	8002bf8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x38>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b12      	cmp	r3, #18
 8002956:	d123      	bne.n	80029a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	6939      	ldr	r1, [r7, #16]
 800299c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d00b      	beq.n	80029f4 <HAL_GPIO_Init+0xd4>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d007      	beq.n	80029f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e8:	2b11      	cmp	r3, #17
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b12      	cmp	r3, #18
 80029f2:	d130      	bne.n	8002a56 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 0201 	and.w	r2, r3, #1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80b2 	beq.w	8002bf8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a94:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <HAL_GPIO_Init+0x2fc>)
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	4a60      	ldr	r2, [pc, #384]	; (8002c1c <HAL_GPIO_Init+0x2fc>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa0:	4b5e      	ldr	r3, [pc, #376]	; (8002c1c <HAL_GPIO_Init+0x2fc>)
 8002aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aac:	4a5c      	ldr	r2, [pc, #368]	; (8002c20 <HAL_GPIO_Init+0x300>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ad6:	d02b      	beq.n	8002b30 <HAL_GPIO_Init+0x210>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_GPIO_Init+0x304>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d025      	beq.n	8002b2c <HAL_GPIO_Init+0x20c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a51      	ldr	r2, [pc, #324]	; (8002c28 <HAL_GPIO_Init+0x308>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d01f      	beq.n	8002b28 <HAL_GPIO_Init+0x208>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a50      	ldr	r2, [pc, #320]	; (8002c2c <HAL_GPIO_Init+0x30c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d019      	beq.n	8002b24 <HAL_GPIO_Init+0x204>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a4f      	ldr	r2, [pc, #316]	; (8002c30 <HAL_GPIO_Init+0x310>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_GPIO_Init+0x200>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a4e      	ldr	r2, [pc, #312]	; (8002c34 <HAL_GPIO_Init+0x314>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00d      	beq.n	8002b1c <HAL_GPIO_Init+0x1fc>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a4d      	ldr	r2, [pc, #308]	; (8002c38 <HAL_GPIO_Init+0x318>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <HAL_GPIO_Init+0x1f8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <HAL_GPIO_Init+0x31c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_GPIO_Init+0x1f4>
 8002b10:	2307      	movs	r3, #7
 8002b12:	e00e      	b.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b14:	2308      	movs	r3, #8
 8002b16:	e00c      	b.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b18:	2306      	movs	r3, #6
 8002b1a:	e00a      	b.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	e008      	b.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e006      	b.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b24:	2303      	movs	r3, #3
 8002b26:	e004      	b.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e002      	b.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_GPIO_Init+0x212>
 8002b30:	2300      	movs	r3, #0
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	f002 0203 	and.w	r2, r2, #3
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	4093      	lsls	r3, r2
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b42:	4937      	ldr	r1, [pc, #220]	; (8002c20 <HAL_GPIO_Init+0x300>)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b50:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b74:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b9e:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bf2:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <HAL_GPIO_Init+0x320>)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f ae91 	bne.w	8002930 <HAL_GPIO_Init+0x10>
  }
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010000 	.word	0x40010000
 8002c24:	48000400 	.word	0x48000400
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	48000c00 	.word	0x48000c00
 8002c30:	48001000 	.word	0x48001000
 8002c34:	48001400 	.word	0x48001400
 8002c38:	48001800 	.word	0x48001800
 8002c3c:	48001c00 	.word	0x48001c00
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
 8002c50:	4613      	mov	r3, r2
 8002c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c54:	787b      	ldrb	r3, [r7, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fbba 	bl	800140c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca6:	b08f      	sub	sp, #60	; 0x3c
 8002ca8:	af0a      	add	r7, sp, #40	; 0x28
 8002caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e116      	b.n	8002ee4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff faf9 	bl	80022c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2203      	movs	r2, #3
 8002cda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f005 f85b 	bl	8007db0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	687e      	ldr	r6, [r7, #4]
 8002d02:	466d      	mov	r5, sp
 8002d04:	f106 0410 	add.w	r4, r6, #16
 8002d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d18:	1d33      	adds	r3, r6, #4
 8002d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1c:	6838      	ldr	r0, [r7, #0]
 8002d1e:	f004 fff5 	bl	8007d0c <USB_CoreInit>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0d7      	b.n	8002ee4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f005 f849 	bl	8007dd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e04a      	b.n	8002ddc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d46:	7bfa      	ldrb	r2, [r7, #15]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	333d      	adds	r3, #61	; 0x3d
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	333c      	adds	r3, #60	; 0x3c
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	b298      	uxth	r0, r3
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3342      	adds	r3, #66	; 0x42
 8002d82:	4602      	mov	r2, r0
 8002d84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	333f      	adds	r3, #63	; 0x3f
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3344      	adds	r3, #68	; 0x44
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3348      	adds	r3, #72	; 0x48
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3350      	adds	r3, #80	; 0x50
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d3af      	bcc.n	8002d46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e044      	b.n	8002e76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	3301      	adds	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3b5      	bcc.n	8002dec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	687e      	ldr	r6, [r7, #4]
 8002e88:	466d      	mov	r5, sp
 8002e8a:	f106 0410 	add.w	r4, r6, #16
 8002e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e9e:	1d33      	adds	r3, r6, #4
 8002ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f004 ffc0 	bl	8007e28 <USB_DevInit>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e014      	b.n	8002ee4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f80a 	bl	8002eec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f005 f946 	bl	800816e <USB_DevDisconnect>

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	f043 0303 	orr.w	r3, r3, #3
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f44:	d102      	bne.n	8002f4c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f4a:	e00b      	b.n	8002f64 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5a:	d102      	bne.n	8002f62 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f60:	e000      	b.n	8002f64 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f62:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40007000 	.word	0x40007000

08002f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d141      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f82:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d131      	bne.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f90:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f96:	4a46      	ldr	r2, [pc, #280]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa0:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fa8:	4a41      	ldr	r2, [pc, #260]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fb0:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2232      	movs	r2, #50	; 0x32
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	4a3f      	ldr	r2, [pc, #252]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc6:	e002      	b.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fda:	d102      	bne.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f2      	bne.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d158      	bne.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e057      	b.n	80030a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffa:	4a2d      	ldr	r2, [pc, #180]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003004:	e04d      	b.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300c:	d141      	bne.n	8003092 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800300e:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	d131      	bne.n	8003080 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003022:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2232      	movs	r2, #50	; 0x32
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	0c9b      	lsrs	r3, r3, #18
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003052:	e002      	b.n	800305a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3b01      	subs	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d102      	bne.n	800306e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f2      	bne.n	8003054 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307a:	d112      	bne.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e011      	b.n	80030a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003090:	e007      	b.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40007000 	.word	0x40007000
 80030b4:	20000014 	.word	0x20000014
 80030b8:	431bde83 	.word	0x431bde83

080030bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80030c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ca:	6053      	str	r3, [r2, #4]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40007000 	.word	0x40007000

080030dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6053      	str	r3, [r2, #4]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40007000 	.word	0x40007000

080030fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e3db      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310e:	4ba4      	ldr	r3, [pc, #656]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003118:	4ba1      	ldr	r3, [pc, #644]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80e1 	beq.w	80032f2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_RCC_OscConfig+0x4a>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	f040 8088 	bne.w	800324e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 8084 	bne.w	800324e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003146:	4b96      	ldr	r3, [pc, #600]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x62>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e3b3      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	4b8f      	ldr	r3, [pc, #572]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_RCC_OscConfig+0x7c>
 800316e:	4b8c      	ldr	r3, [pc, #560]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003176:	e005      	b.n	8003184 <HAL_RCC_OscConfig+0x88>
 8003178:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003184:	4293      	cmp	r3, r2
 8003186:	d223      	bcs.n	80031d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fd91 	bl	8003cb4 <RCC_SetFlashLatencyFromMSIRange>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e394      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319c:	4b80      	ldr	r3, [pc, #512]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7f      	ldr	r2, [pc, #508]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031a2:	f043 0308 	orr.w	r3, r3, #8
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b7d      	ldr	r3, [pc, #500]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	497a      	ldr	r1, [pc, #488]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ba:	4b79      	ldr	r3, [pc, #484]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	4975      	ldr	r1, [pc, #468]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
 80031ce:	e022      	b.n	8003216 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d0:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a72      	ldr	r2, [pc, #456]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031d6:	f043 0308 	orr.w	r3, r3, #8
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b70      	ldr	r3, [pc, #448]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	496d      	ldr	r1, [pc, #436]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ee:	4b6c      	ldr	r3, [pc, #432]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	4968      	ldr	r1, [pc, #416]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fd54 	bl	8003cb4 <RCC_SetFlashLatencyFromMSIRange>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e357      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003216:	f000 fc8b 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 800321a:	4601      	mov	r1, r0
 800321c:	4b60      	ldr	r3, [pc, #384]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	4a5f      	ldr	r2, [pc, #380]	; (80033a4 <HAL_RCC_OscConfig+0x2a8>)
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	fa21 f303 	lsr.w	r3, r1, r3
 8003232:	4a5d      	ldr	r2, [pc, #372]	; (80033a8 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_RCC_OscConfig+0x2b0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f986 	bl	800254c <HAL_InitTick>
 8003240:	4603      	mov	r3, r0
 8003242:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d052      	beq.n	80032f0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	e33b      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d032      	beq.n	80032bc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003256:	4b52      	ldr	r3, [pc, #328]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a51      	ldr	r2, [pc, #324]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003262:	f7ff f9bf 	bl	80025e4 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800326a:	f7ff f9bb 	bl	80025e4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e324      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327c:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003288:	4b45      	ldr	r3, [pc, #276]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a44      	ldr	r2, [pc, #272]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800328e:	f043 0308 	orr.w	r3, r3, #8
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	493f      	ldr	r1, [pc, #252]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032a6:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	493a      	ldr	r1, [pc, #232]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
 80032ba:	e01a      	b.n	80032f2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032bc:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c8:	f7ff f98c 	bl	80025e4 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d0:	f7ff f988 	bl	80025e4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e2f1      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032e2:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1d4>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d074      	beq.n	80033e8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x214>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d10e      	bne.n	8003328 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d10b      	bne.n	8003328 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d064      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2ea>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d160      	bne.n	80033e6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e2ce      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x244>
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e01d      	b.n	800337c <HAL_RCC_OscConfig+0x280>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x268>
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0x280>
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01c      	beq.n	80033be <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7ff f92e 	bl	80025e4 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338a:	e011      	b.n	80033b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7ff f92a 	bl	80025e4 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d90a      	bls.n	80033b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e293      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08008288 	.word	0x08008288
 80033a8:	20000014 	.word	0x20000014
 80033ac:	20000018 	.word	0x20000018
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b0:	4bae      	ldr	r3, [pc, #696]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0e7      	beq.n	800338c <HAL_RCC_OscConfig+0x290>
 80033bc:	e014      	b.n	80033e8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7ff f911 	bl	80025e4 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c6:	f7ff f90d 	bl	80025e4 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	; 0x64
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e276      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033d8:	4ba4      	ldr	r3, [pc, #656]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2ca>
 80033e4:	e000      	b.n	80033e8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d060      	beq.n	80034b6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d005      	beq.n	8003406 <HAL_RCC_OscConfig+0x30a>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b0c      	cmp	r3, #12
 80033fe:	d119      	bne.n	8003434 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d116      	bne.n	8003434 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003406:	4b99      	ldr	r3, [pc, #612]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x322>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e253      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b93      	ldr	r3, [pc, #588]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	498f      	ldr	r1, [pc, #572]	; (800366c <HAL_RCC_OscConfig+0x570>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003432:	e040      	b.n	80034b6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d023      	beq.n	8003484 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800343c:	4b8b      	ldr	r3, [pc, #556]	; (800366c <HAL_RCC_OscConfig+0x570>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a8a      	ldr	r2, [pc, #552]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7ff f8cc 	bl	80025e4 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7ff f8c8 	bl	80025e4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e231      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003462:	4b82      	ldr	r3, [pc, #520]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	4b7f      	ldr	r3, [pc, #508]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	061b      	lsls	r3, r3, #24
 800347c:	497b      	ldr	r1, [pc, #492]	; (800366c <HAL_RCC_OscConfig+0x570>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
 8003482:	e018      	b.n	80034b6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003484:	4b79      	ldr	r3, [pc, #484]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a78      	ldr	r2, [pc, #480]	; (800366c <HAL_RCC_OscConfig+0x570>)
 800348a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7ff f8a8 	bl	80025e4 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003498:	f7ff f8a4 	bl	80025e4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e20d      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034aa:	4b70      	ldr	r3, [pc, #448]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d03c      	beq.n	800353c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01c      	beq.n	8003504 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ca:	4b68      	ldr	r3, [pc, #416]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80034cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d0:	4a66      	ldr	r2, [pc, #408]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7ff f883 	bl	80025e4 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e2:	f7ff f87f 	bl	80025e4 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1e8      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f4:	4b5d      	ldr	r3, [pc, #372]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80034f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ef      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3e6>
 8003502:	e01b      	b.n	800353c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350a:	4a58      	ldr	r2, [pc, #352]	; (800366c <HAL_RCC_OscConfig+0x570>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7ff f866 	bl	80025e4 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351c:	f7ff f862 	bl	80025e4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1cb      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800352e:	4b4f      	ldr	r3, [pc, #316]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ef      	bne.n	800351c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a5 	beq.w	8003694 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10d      	bne.n	8003576 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_RCC_OscConfig+0x570>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	4a43      	ldr	r2, [pc, #268]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6593      	str	r3, [r2, #88]	; 0x58
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003572:	2301      	movs	r3, #1
 8003574:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_RCC_OscConfig+0x574>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d118      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003582:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_OscConfig+0x574>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3a      	ldr	r2, [pc, #232]	; (8003670 <HAL_RCC_OscConfig+0x574>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7ff f829 	bl	80025e4 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7ff f825 	bl	80025e4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e18e      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a8:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_RCC_OscConfig+0x574>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d108      	bne.n	80035ce <HAL_RCC_OscConfig+0x4d2>
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	4a2a      	ldr	r2, [pc, #168]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035cc:	e024      	b.n	8003618 <HAL_RCC_OscConfig+0x51c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d110      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4fc>
 80035d6:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	4a1f      	ldr	r2, [pc, #124]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035f6:	e00f      	b.n	8003618 <HAL_RCC_OscConfig+0x51c>
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_RCC_OscConfig+0x570>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <HAL_RCC_OscConfig+0x570>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d016      	beq.n	800364e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fe ffe0 	bl	80025e4 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fe ffdc 	bl	80025e4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e143      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x570>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ed      	beq.n	8003628 <HAL_RCC_OscConfig+0x52c>
 800364c:	e019      	b.n	8003682 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fe ffc9 	bl	80025e4 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003654:	e00e      	b.n	8003674 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fe ffc5 	bl	80025e4 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d905      	bls.n	8003674 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e12c      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003674:	4b96      	ldr	r3, [pc, #600]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e9      	bne.n	8003656 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003682:	7ffb      	ldrb	r3, [r7, #31]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003688:	4b91      	ldr	r3, [pc, #580]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	4a90      	ldr	r2, [pc, #576]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03c      	beq.n	800371a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036a8:	4b89      	ldr	r3, [pc, #548]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80036aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ae:	4a88      	ldr	r2, [pc, #544]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe ff94 	bl	80025e4 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036c0:	f7fe ff90 	bl	80025e4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e0f9      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036d2:	4b7f      	ldr	r3, [pc, #508]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80036d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <HAL_RCC_OscConfig+0x5c4>
 80036e0:	e01b      	b.n	800371a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036e2:	4b7b      	ldr	r3, [pc, #492]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80036e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e8:	4a79      	ldr	r2, [pc, #484]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f2:	f7fe ff77 	bl	80025e4 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036fa:	f7fe ff73 	bl	80025e4 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0dc      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800370c:	4b70      	ldr	r3, [pc, #448]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 800370e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ef      	bne.n	80036fa <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80d0 	beq.w	80038c4 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	f000 808d 	beq.w	8003846 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	2b02      	cmp	r3, #2
 8003732:	d15a      	bne.n	80037ea <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003734:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a65      	ldr	r2, [pc, #404]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 800373a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe ff50 	bl	80025e4 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe ff4c 	bl	80025e4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0b5      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375a:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003766:	4b5a      	ldr	r3, [pc, #360]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	4b5a      	ldr	r3, [pc, #360]	; (80038d4 <HAL_RCC_OscConfig+0x7d8>)
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003776:	3a01      	subs	r2, #1
 8003778:	0112      	lsls	r2, r2, #4
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003780:	0212      	lsls	r2, r2, #8
 8003782:	4311      	orrs	r1, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003788:	0852      	lsrs	r2, r2, #1
 800378a:	3a01      	subs	r2, #1
 800378c:	0552      	lsls	r2, r2, #21
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003794:	0852      	lsrs	r2, r2, #1
 8003796:	3a01      	subs	r2, #1
 8003798:	0652      	lsls	r2, r2, #25
 800379a:	4311      	orrs	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a0:	06d2      	lsls	r2, r2, #27
 80037a2:	430a      	orrs	r2, r1
 80037a4:	494a      	ldr	r1, [pc, #296]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037aa:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b6:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4a45      	ldr	r2, [pc, #276]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe ff0f 	bl	80025e4 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fe ff0b 	bl	80025e4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e074      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037dc:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x6ce>
 80037e8:	e06c      	b.n	80038c4 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a38      	ldr	r2, [pc, #224]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037f6:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d105      	bne.n	800380e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4a32      	ldr	r2, [pc, #200]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 8003808:	f023 0303 	bic.w	r3, r3, #3
 800380c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800380e:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 8003814:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe fee1 	bl	80025e4 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fe fedd 	bl	80025e4 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e046      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x72a>
 8003844:	e03e      	b.n	80038c4 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e039      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <HAL_RCC_OscConfig+0x7d4>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	429a      	cmp	r2, r3
 8003864:	d12c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	3b01      	subs	r3, #1
 8003872:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d123      	bne.n	80038c0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d11b      	bne.n	80038c0 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d113      	bne.n	80038c0 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	3b01      	subs	r3, #1
 80038a6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d109      	bne.n	80038c0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	019d800c 	.word	0x019d800c

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e10f      	b.n	8003b10 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f0:	4b89      	ldr	r3, [pc, #548]	; (8003b18 <HAL_RCC_ClockConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d910      	bls.n	8003920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b86      	ldr	r3, [pc, #536]	; (8003b18 <HAL_RCC_ClockConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 020f 	bic.w	r2, r3, #15
 8003906:	4984      	ldr	r1, [pc, #528]	; (8003b18 <HAL_RCC_ClockConfig+0x240>)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b82      	ldr	r3, [pc, #520]	; (8003b18 <HAL_RCC_ClockConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0f7      	b.n	8003b10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8089 	beq.w	8003a40 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d133      	bne.n	800399e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003936:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0e4      	b.n	8003b10 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003946:	f000 fa0f 	bl	8003d68 <RCC_GetSysClockFreqFromPLLSource>
 800394a:	4602      	mov	r2, r0
 800394c:	4b74      	ldr	r3, [pc, #464]	; (8003b20 <HAL_RCC_ClockConfig+0x248>)
 800394e:	429a      	cmp	r2, r3
 8003950:	d955      	bls.n	80039fe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003952:	4b72      	ldr	r3, [pc, #456]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800395e:	4b6f      	ldr	r3, [pc, #444]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003966:	4a6d      	ldr	r2, [pc, #436]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e044      	b.n	80039fe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d03e      	beq.n	80039fe <HAL_RCC_ClockConfig+0x126>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d13a      	bne.n	80039fe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003988:	4b64      	ldr	r3, [pc, #400]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003990:	4a62      	ldr	r2, [pc, #392]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e02f      	b.n	80039fe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d115      	bne.n	80039de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0ac      	b.n	8003b10 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039be:	4b57      	ldr	r3, [pc, #348]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0a0      	b.n	8003b10 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ce:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e098      	b.n	8003b10 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80039de:	f000 f8a7 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4b4e      	ldr	r3, [pc, #312]	; (8003b20 <HAL_RCC_ClockConfig+0x248>)
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d909      	bls.n	80039fe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ea:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f2:	4a4a      	ldr	r2, [pc, #296]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 80039f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4944      	ldr	r1, [pc, #272]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7fe fde8 	bl	80025e4 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7fe fde4 	bl	80025e4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e070      	b.n	8003b10 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4930      	ldr	r1, [pc, #192]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	d105      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a66:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a70:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_RCC_ClockConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d210      	bcs.n	8003aa2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a80:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <HAL_RCC_ClockConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 020f 	bic.w	r2, r3, #15
 8003a88:	4923      	ldr	r1, [pc, #140]	; (8003b18 <HAL_RCC_ClockConfig+0x240>)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a90:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <HAL_RCC_ClockConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e036      	b.n	8003b10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	4918      	ldr	r1, [pc, #96]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4910      	ldr	r1, [pc, #64]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae0:	f000 f826 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCC_ClockConfig+0x244>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <HAL_RCC_ClockConfig+0x24c>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	fa21 f303 	lsr.w	r3, r1, r3
 8003afc:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <HAL_RCC_ClockConfig+0x250>)
 8003afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_RCC_ClockConfig+0x254>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fd21 	bl	800254c <HAL_InitTick>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40022000 	.word	0x40022000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	04c4b400 	.word	0x04c4b400
 8003b24:	08008288 	.word	0x08008288
 8003b28:	20000014 	.word	0x20000014
 8003b2c:	20000018 	.word	0x20000018

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x34>
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d121      	bne.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d11e      	bne.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e005      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b80:	4b2c      	ldr	r3, [pc, #176]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b8c:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d102      	bne.n	8003bae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e004      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d133      	bne.n	8003c26 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa4>
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0xaa>
 8003bd2:	e005      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bd6:	617b      	str	r3, [r7, #20]
      break;
 8003bd8:	e005      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bdc:	617b      	str	r3, [r7, #20]
      break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	617b      	str	r3, [r7, #20]
      break;
 8003be4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be6:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	fb02 f203 	mul.w	r2, r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0e5b      	lsrs	r3, r3, #25
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	3301      	adds	r3, #1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c26:	69bb      	ldr	r3, [r7, #24]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3724      	adds	r7, #36	; 0x24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40021000 	.word	0x40021000
 8003c38:	080082a0 	.word	0x080082a0
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	007a1200 	.word	0x007a1200

08003c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c48:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000014 	.word	0x20000014

08003c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c60:	f7ff fff0 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c64:	4601      	mov	r1, r0
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c72:	5cd3      	ldrb	r3, [r2, r3]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08008298 	.word	0x08008298

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c8c:	f7ff ffda 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c90:	4601      	mov	r1, r0
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0adb      	lsrs	r3, r3, #11
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08008298 	.word	0x08008298

08003cb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ccc:	f7ff f932 	bl	8002f34 <HAL_PWREx_GetVoltageRange>
 8003cd0:	6178      	str	r0, [r7, #20]
 8003cd2:	e014      	b.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cec:	f7ff f922 	bl	8002f34 <HAL_PWREx_GetVoltageRange>
 8003cf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d04:	d10b      	bne.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d913      	bls.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2ba0      	cmp	r3, #160	; 0xa0
 8003d10:	d902      	bls.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d12:	2302      	movs	r3, #2
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	e00d      	b.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d18:	2301      	movs	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	e00a      	b.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b7f      	cmp	r3, #127	; 0x7f
 8003d22:	d902      	bls.n	8003d2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003d24:	2302      	movs	r3, #2
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	e004      	b.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b70      	cmp	r3, #112	; 0x70
 8003d2e:	d101      	bne.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d30:	2301      	movs	r3, #1
 8003d32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 020f 	bic.w	r2, r3, #15
 8003d3c:	4909      	ldr	r1, [pc, #36]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d001      	beq.n	8003d56 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40022000 	.word	0x40022000

08003d68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003d72:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d118      	bne.n	8003db0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e005      	b.n	8003da6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003da6:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dae:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003db0:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d002      	beq.n	8003dc6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d003      	beq.n	8003dcc <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003dc4:	e005      	b.n	8003dd2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003dc8:	613b      	str	r3, [r7, #16]
    break;
 8003dca:	e005      	b.n	8003dd8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003dce:	613b      	str	r3, [r7, #16]
    break;
 8003dd0:	e002      	b.n	8003dd8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	613b      	str	r3, [r7, #16]
    break;
 8003dd6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3301      	adds	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	fb02 f203 	mul.w	r2, r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	0e5b      	lsrs	r3, r3, #25
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	3301      	adds	r3, #1
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e18:	683b      	ldr	r3, [r7, #0]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	080082a0 	.word	0x080082a0
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e44:	2300      	movs	r3, #0
 8003e46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03d      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d00b      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d804      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d015      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003e68:	e01d      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003e6a:	2b60      	cmp	r3, #96	; 0x60
 8003e6c:	d01e      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d01c      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e72:	e018      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e74:	4b86      	ldr	r3, [pc, #536]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4a85      	ldr	r2, [pc, #532]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e80:	e015      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fafd 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e92:	e00c      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3320      	adds	r3, #32
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fbe4 	bl	8004668 <RCCEx_PLLSAI2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8003eaa:	e000      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb4:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eba:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec2:	4973      	ldr	r1, [pc, #460]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003eca:	e001      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d042      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee4:	d00f      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eea:	d805      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d011      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef4:	d017      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003ef6:	e01f      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efc:	d01f      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d01c      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f04:	e018      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f06:	4b62      	ldr	r3, [pc, #392]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a61      	ldr	r2, [pc, #388]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f12:	e015      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fab4 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f24:	e00c      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3320      	adds	r3, #32
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fb9b 	bl	8004668 <RCCEx_PLLSAI2_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f36:	e003      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	74fb      	strb	r3, [r7, #19]
      break;
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10b      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f46:	4b52      	ldr	r3, [pc, #328]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	494e      	ldr	r1, [pc, #312]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f5c:	e001      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 809f 	beq.w	80040ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f70:	2300      	movs	r3, #0
 8003f72:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f74:	4b46      	ldr	r3, [pc, #280]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	4b41      	ldr	r3, [pc, #260]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	4a40      	ldr	r2, [pc, #256]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6593      	str	r3, [r2, #88]	; 0x58
 8003f96:	4b3e      	ldr	r3, [pc, #248]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3a      	ldr	r2, [pc, #232]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb2:	f7fe fb17 	bl	80025e4 <HAL_GetTick>
 8003fb6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fb8:	e009      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fe fb13 	bl	80025e4 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d902      	bls.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	74fb      	strb	r3, [r7, #19]
        break;
 8003fcc:	e005      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fce:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ef      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d15b      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01f      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d019      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004008:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800402a:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d016      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fad2 	bl	80025e4 <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004042:	e00b      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004044:	f7fe face 	bl	80025e4 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d902      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	74fb      	strb	r3, [r7, #19]
            break;
 800405a:	e006      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ec      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10c      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	4903      	ldr	r1, [pc, #12]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004088:	e008      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	74bb      	strb	r3, [r7, #18]
 800408e:	e005      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004090:	40021000 	.word	0x40021000
 8004094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800409c:	7c7b      	ldrb	r3, [r7, #17]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d105      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a2:	4ba0      	ldr	r3, [pc, #640]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	4a9f      	ldr	r2, [pc, #636]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ba:	4b9a      	ldr	r3, [pc, #616]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f023 0203 	bic.w	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	4996      	ldr	r1, [pc, #600]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040dc:	4b91      	ldr	r3, [pc, #580]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f023 020c 	bic.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	498e      	ldr	r1, [pc, #568]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040fe:	4b89      	ldr	r3, [pc, #548]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	4985      	ldr	r1, [pc, #532]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004120:	4b80      	ldr	r3, [pc, #512]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412e:	497d      	ldr	r1, [pc, #500]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004142:	4b78      	ldr	r3, [pc, #480]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	4974      	ldr	r1, [pc, #464]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004164:	4b6f      	ldr	r3, [pc, #444]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	496c      	ldr	r1, [pc, #432]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004194:	4963      	ldr	r1, [pc, #396]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a8:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b6:	495b      	ldr	r1, [pc, #364]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ca:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	4952      	ldr	r1, [pc, #328]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ec:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	494a      	ldr	r1, [pc, #296]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800420e:	4b45      	ldr	r3, [pc, #276]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	4941      	ldr	r1, [pc, #260]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004230:	4b3c      	ldr	r3, [pc, #240]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004236:	f023 0203 	bic.w	r2, r3, #3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	4939      	ldr	r1, [pc, #228]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d028      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004260:	4930      	ldr	r1, [pc, #192]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004270:	d106      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004272:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427c:	60d3      	str	r3, [r2, #12]
 800427e:	e011      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f8f9 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800429a:	7cfb      	ldrb	r3, [r7, #19]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d04d      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b8:	d108      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c0:	4a18      	ldr	r2, [pc, #96]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042ca:	e012      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d2:	4a14      	ldr	r2, [pc, #80]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ea:	490e      	ldr	r1, [pc, #56]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fa:	d106      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a08      	ldr	r2, [pc, #32]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004306:	60d3      	str	r3, [r2, #12]
 8004308:	e020      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004312:	d109      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a02      	ldr	r2, [pc, #8]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431e:	60d3      	str	r3, [r2, #12]
 8004320:	e014      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004330:	d10c      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f8a5 	bl	8004488 <RCCEx_PLLSAI1_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d028      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004358:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004366:	4947      	ldr	r1, [pc, #284]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004376:	d106      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004378:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a41      	ldr	r2, [pc, #260]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800437e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004382:	60d3      	str	r3, [r2, #12]
 8004384:	e011      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438e:	d10c      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	2101      	movs	r1, #1
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f876 	bl	8004488 <RCCEx_PLLSAI1_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80043a6:	7cfb      	ldrb	r3, [r7, #19]
 80043a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01e      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b6:	4b33      	ldr	r3, [pc, #204]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c6:	492f      	ldr	r1, [pc, #188]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3304      	adds	r3, #4
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f851 	bl	8004488 <RCCEx_PLLSAI1_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ea:	7cfb      	ldrb	r3, [r7, #19]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004406:	f023 0204 	bic.w	r2, r3, #4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004410:	491c      	ldr	r1, [pc, #112]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004424:	4b17      	ldr	r3, [pc, #92]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800442a:	f023 0218 	bic.w	r2, r3, #24
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	4913      	ldr	r1, [pc, #76]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800444a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800444e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004458:	490a      	ldr	r1, [pc, #40]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004466:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004476:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004478:	7cbb      	ldrb	r3, [r7, #18]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000

08004488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004496:	4b70      	ldr	r3, [pc, #448]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00e      	beq.n	80044c0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044a2:	4b6d      	ldr	r3, [pc, #436]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0203 	and.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d103      	bne.n	80044ba <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
       ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d13f      	bne.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
 80044be:	e03c      	b.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d00c      	beq.n	80044e2 <RCCEx_PLLSAI1_Config+0x5a>
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d013      	beq.n	80044f4 <RCCEx_PLLSAI1_Config+0x6c>
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d120      	bne.n	8004512 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044d0:	4b61      	ldr	r3, [pc, #388]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11d      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e0:	e01a      	b.n	8004518 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044e2:	4b5d      	ldr	r3, [pc, #372]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d116      	bne.n	800451c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f2:	e013      	b.n	800451c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044f4:	4b58      	ldr	r3, [pc, #352]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004500:	4b55      	ldr	r3, [pc, #340]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004510:	e006      	b.n	8004520 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
      break;
 8004516:	e004      	b.n	8004522 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004518:	bf00      	nop
 800451a:	e002      	b.n	8004522 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800451c:	bf00      	nop
 800451e:	e000      	b.n	8004522 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004520:	bf00      	nop
    }

    if(status == HAL_OK)
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004528:	4b4b      	ldr	r3, [pc, #300]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f023 0203 	bic.w	r2, r3, #3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4948      	ldr	r1, [pc, #288]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004536:	4313      	orrs	r3, r2
 8004538:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 8086 	bne.w	800464e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004542:	4b45      	ldr	r3, [pc, #276]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a44      	ldr	r2, [pc, #272]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800454c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454e:	f7fe f849 	bl	80025e4 <HAL_GetTick>
 8004552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004554:	e009      	b.n	800456a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004556:	f7fe f845 	bl	80025e4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d902      	bls.n	800456a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	73fb      	strb	r3, [r7, #15]
        break;
 8004568:	e005      	b.n	8004576 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456a:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ef      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d168      	bne.n	800464e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d113      	bne.n	80045aa <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004582:	4b35      	ldr	r3, [pc, #212]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	4b35      	ldr	r3, [pc, #212]	; (800465c <RCCEx_PLLSAI1_Config+0x1d4>)
 8004588:	4013      	ands	r3, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6892      	ldr	r2, [r2, #8]
 800458e:	0211      	lsls	r1, r2, #8
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68d2      	ldr	r2, [r2, #12]
 8004594:	06d2      	lsls	r2, r2, #27
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6852      	ldr	r2, [r2, #4]
 800459c:	3a01      	subs	r2, #1
 800459e:	0112      	lsls	r2, r2, #4
 80045a0:	430a      	orrs	r2, r1
 80045a2:	492d      	ldr	r1, [pc, #180]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]
 80045a8:	e02d      	b.n	8004606 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d115      	bne.n	80045dc <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b0:	4b29      	ldr	r3, [pc, #164]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6892      	ldr	r2, [r2, #8]
 80045bc:	0211      	lsls	r1, r2, #8
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6912      	ldr	r2, [r2, #16]
 80045c2:	0852      	lsrs	r2, r2, #1
 80045c4:	3a01      	subs	r2, #1
 80045c6:	0552      	lsls	r2, r2, #21
 80045c8:	4311      	orrs	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6852      	ldr	r2, [r2, #4]
 80045ce:	3a01      	subs	r2, #1
 80045d0:	0112      	lsls	r2, r2, #4
 80045d2:	430a      	orrs	r2, r1
 80045d4:	4920      	ldr	r1, [pc, #128]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	610b      	str	r3, [r1, #16]
 80045da:	e014      	b.n	8004606 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045dc:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	4b20      	ldr	r3, [pc, #128]	; (8004664 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6892      	ldr	r2, [r2, #8]
 80045e8:	0211      	lsls	r1, r2, #8
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6952      	ldr	r2, [r2, #20]
 80045ee:	0852      	lsrs	r2, r2, #1
 80045f0:	3a01      	subs	r2, #1
 80045f2:	0652      	lsls	r2, r2, #25
 80045f4:	4311      	orrs	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6852      	ldr	r2, [r2, #4]
 80045fa:	3a01      	subs	r2, #1
 80045fc:	0112      	lsls	r2, r2, #4
 80045fe:	430a      	orrs	r2, r1
 8004600:	4915      	ldr	r1, [pc, #84]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a13      	ldr	r2, [pc, #76]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 800460c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004610:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fd ffe7 	bl	80025e4 <HAL_GetTick>
 8004616:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004618:	e009      	b.n	800462e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800461a:	f7fd ffe3 	bl	80025e4 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d902      	bls.n	800462e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	73fb      	strb	r3, [r7, #15]
          break;
 800462c:	e005      	b.n	800463a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ef      	beq.n	800461a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	4903      	ldr	r1, [pc, #12]	; (8004658 <RCCEx_PLLSAI1_Config+0x1d0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	07ff800f 	.word	0x07ff800f
 8004660:	ff9f800f 	.word	0xff9f800f
 8004664:	f9ff800f 	.word	0xf9ff800f

08004668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004676:	4b70      	ldr	r3, [pc, #448]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00e      	beq.n	80046a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004682:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0203 	and.w	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d103      	bne.n	800469a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
       ||
 8004696:	2b00      	cmp	r3, #0
 8004698:	d13f      	bne.n	800471a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
 800469e:	e03c      	b.n	800471a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d00c      	beq.n	80046c2 <RCCEx_PLLSAI2_Config+0x5a>
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d013      	beq.n	80046d4 <RCCEx_PLLSAI2_Config+0x6c>
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d120      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046b0:	4b61      	ldr	r3, [pc, #388]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11d      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c0:	e01a      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046c2:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d116      	bne.n	80046fc <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d2:	e013      	b.n	80046fc <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046d4:	4b58      	ldr	r3, [pc, #352]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10f      	bne.n	8004700 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046e0:	4b55      	ldr	r3, [pc, #340]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046f0:	e006      	b.n	8004700 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
      break;
 80046f6:	e004      	b.n	8004702 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80046f8:	bf00      	nop
 80046fa:	e002      	b.n	8004702 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80046fc:	bf00      	nop
 80046fe:	e000      	b.n	8004702 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004700:	bf00      	nop
    }

    if(status == HAL_OK)
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d108      	bne.n	800471a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004708:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f023 0203 	bic.w	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4948      	ldr	r1, [pc, #288]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 8086 	bne.w	800482e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004722:	4b45      	ldr	r3, [pc, #276]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a44      	ldr	r2, [pc, #272]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472e:	f7fd ff59 	bl	80025e4 <HAL_GetTick>
 8004732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004734:	e009      	b.n	800474a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004736:	f7fd ff55 	bl	80025e4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d902      	bls.n	800474a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	73fb      	strb	r3, [r7, #15]
        break;
 8004748:	e005      	b.n	8004756 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ef      	bne.n	8004736 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d168      	bne.n	800482e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d113      	bne.n	800478a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004762:	4b35      	ldr	r3, [pc, #212]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	4b35      	ldr	r3, [pc, #212]	; (800483c <RCCEx_PLLSAI2_Config+0x1d4>)
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6892      	ldr	r2, [r2, #8]
 800476e:	0211      	lsls	r1, r2, #8
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68d2      	ldr	r2, [r2, #12]
 8004774:	06d2      	lsls	r2, r2, #27
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6852      	ldr	r2, [r2, #4]
 800477c:	3a01      	subs	r2, #1
 800477e:	0112      	lsls	r2, r2, #4
 8004780:	430a      	orrs	r2, r1
 8004782:	492d      	ldr	r1, [pc, #180]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	614b      	str	r3, [r1, #20]
 8004788:	e02d      	b.n	80047e6 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d115      	bne.n	80047bc <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004790:	4b29      	ldr	r3, [pc, #164]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004796:	4013      	ands	r3, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6892      	ldr	r2, [r2, #8]
 800479c:	0211      	lsls	r1, r2, #8
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6912      	ldr	r2, [r2, #16]
 80047a2:	0852      	lsrs	r2, r2, #1
 80047a4:	3a01      	subs	r2, #1
 80047a6:	0552      	lsls	r2, r2, #21
 80047a8:	4311      	orrs	r1, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6852      	ldr	r2, [r2, #4]
 80047ae:	3a01      	subs	r2, #1
 80047b0:	0112      	lsls	r2, r2, #4
 80047b2:	430a      	orrs	r2, r1
 80047b4:	4920      	ldr	r1, [pc, #128]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	614b      	str	r3, [r1, #20]
 80047ba:	e014      	b.n	80047e6 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047bc:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	4b20      	ldr	r3, [pc, #128]	; (8004844 <RCCEx_PLLSAI2_Config+0x1dc>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6892      	ldr	r2, [r2, #8]
 80047c8:	0211      	lsls	r1, r2, #8
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6952      	ldr	r2, [r2, #20]
 80047ce:	0852      	lsrs	r2, r2, #1
 80047d0:	3a01      	subs	r2, #1
 80047d2:	0652      	lsls	r2, r2, #25
 80047d4:	4311      	orrs	r1, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6852      	ldr	r2, [r2, #4]
 80047da:	3a01      	subs	r2, #1
 80047dc:	0112      	lsls	r2, r2, #4
 80047de:	430a      	orrs	r2, r1
 80047e0:	4915      	ldr	r1, [pc, #84]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a13      	ldr	r2, [pc, #76]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f2:	f7fd fef7 	bl	80025e4 <HAL_GetTick>
 80047f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047f8:	e009      	b.n	800480e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047fa:	f7fd fef3 	bl	80025e4 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d902      	bls.n	800480e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	73fb      	strb	r3, [r7, #15]
          break;
 800480c:	e005      	b.n	800481a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0ef      	beq.n	80047fa <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <RCCEx_PLLSAI2_Config+0x1d0>)
 800482a:	4313      	orrs	r3, r2
 800482c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	07ff800f 	.word	0x07ff800f
 8004840:	ff9f800f 	.word	0xff9f800f
 8004844:	f9ff800f 	.word	0xf9ff800f

08004848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e01d      	b.n	8004896 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fd fc88 	bl	8002184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 fc40 	bl	800510c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_TIM_Base_Start_IT+0x50>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d00b      	beq.n	80048e2 <HAL_TIM_Base_Start_IT+0x42>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d007      	beq.n	80048e2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	00010007 	.word	0x00010007

080048f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	f241 1311 	movw	r3, #4369	; 0x1111
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10f      	bne.n	800493c <HAL_TIM_Base_Stop_IT+0x48>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a1a      	ldr	r2, [r3, #32]
 8004922:	f240 4344 	movw	r3, #1092	; 0x444
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d107      	bne.n	800493c <HAL_TIM_Base_Stop_IT+0x48>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e01d      	b.n	8004998 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f815 	bl	80049a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 fbbf 	bl	800510c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e083      	b.n	8004ad0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fd fb91 	bl	8002104 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80049f8:	f023 0307 	bic.w	r3, r3, #7
 80049fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f000 fb7f 	bl	800510c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4313      	orrs	r3, r2
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a54:	f023 030c 	bic.w	r3, r3, #12
 8004a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	4313      	orrs	r3, r2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	011a      	lsls	r2, r3, #4
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	031b      	lsls	r3, r3, #12
 8004a84:	4313      	orrs	r3, r2
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d122      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d11b      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0202 	mvn.w	r2, #2
 8004b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fad7 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fac9 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fada 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0204 	mvn.w	r2, #4
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 faad 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa9f 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fab0 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d122      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d11b      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0208 	mvn.w	r2, #8
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa83 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa75 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa86 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d122      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0210 	mvn.w	r2, #16
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2208      	movs	r2, #8
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa59 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa4b 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa5c 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d10e      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d107      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0201 	mvn.w	r2, #1
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc fbec 	bl	8001434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d10e      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b80      	cmp	r3, #128	; 0x80
 8004c76:	d107      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 feb2 	bl	80059ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c96:	d10e      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d107      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fea5 	bl	8005a00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d10e      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d107      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa0a 	bl	80050f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d10e      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d107      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f06f 0220 	mvn.w	r2, #32
 8004d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fe65 	bl	80059d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e105      	b.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b14      	cmp	r3, #20
 8004d46:	f200 80f0 	bhi.w	8004f2a <HAL_TIM_PWM_ConfigChannel+0x212>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004da5 	.word	0x08004da5
 8004d54:	08004f2b 	.word	0x08004f2b
 8004d58:	08004f2b 	.word	0x08004f2b
 8004d5c:	08004f2b 	.word	0x08004f2b
 8004d60:	08004de5 	.word	0x08004de5
 8004d64:	08004f2b 	.word	0x08004f2b
 8004d68:	08004f2b 	.word	0x08004f2b
 8004d6c:	08004f2b 	.word	0x08004f2b
 8004d70:	08004e27 	.word	0x08004e27
 8004d74:	08004f2b 	.word	0x08004f2b
 8004d78:	08004f2b 	.word	0x08004f2b
 8004d7c:	08004f2b 	.word	0x08004f2b
 8004d80:	08004e67 	.word	0x08004e67
 8004d84:	08004f2b 	.word	0x08004f2b
 8004d88:	08004f2b 	.word	0x08004f2b
 8004d8c:	08004f2b 	.word	0x08004f2b
 8004d90:	08004ea9 	.word	0x08004ea9
 8004d94:	08004f2b 	.word	0x08004f2b
 8004d98:	08004f2b 	.word	0x08004f2b
 8004d9c:	08004f2b 	.word	0x08004f2b
 8004da0:	08004ee9 	.word	0x08004ee9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fa48 	bl	8005240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0208 	orr.w	r2, r2, #8
 8004dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6999      	ldr	r1, [r3, #24]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	619a      	str	r2, [r3, #24]
      break;
 8004de2:	e0a3      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fab8 	bl	8005360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	021a      	lsls	r2, r3, #8
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	619a      	str	r2, [r3, #24]
      break;
 8004e24:	e082      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fb21 	bl	8005474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0208 	orr.w	r2, r2, #8
 8004e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0204 	bic.w	r2, r2, #4
 8004e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69d9      	ldr	r1, [r3, #28]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	61da      	str	r2, [r3, #28]
      break;
 8004e64:	e062      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fb89 	bl	8005584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	021a      	lsls	r2, r3, #8
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	61da      	str	r2, [r3, #28]
      break;
 8004ea6:	e041      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fbd2 	bl	8005658 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0208 	orr.w	r2, r2, #8
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0204 	bic.w	r2, r2, #4
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ee6:	e021      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fc16 	bl	8005720 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	021a      	lsls	r2, r3, #8
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f28:	e000      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004f2a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop

08004f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIM_ConfigClockSource+0x18>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e0a8      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x16a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d067      	beq.n	800506c <HAL_TIM_ConfigClockSource+0x124>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d80b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x70>
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d073      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x144>
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d802      	bhi.n	8004fae <HAL_TIM_ConfigClockSource+0x66>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d06f      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fac:	e078      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d06c      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x144>
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d06a      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004fb6:	e073      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004fb8:	2b70      	cmp	r3, #112	; 0x70
 8004fba:	d00d      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0x90>
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d804      	bhi.n	8004fca <HAL_TIM_ConfigClockSource+0x82>
 8004fc0:	2b50      	cmp	r3, #80	; 0x50
 8004fc2:	d033      	beq.n	800502c <HAL_TIM_ConfigClockSource+0xe4>
 8004fc4:	2b60      	cmp	r3, #96	; 0x60
 8004fc6:	d041      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004fc8:	e06a      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fce:	d066      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x156>
 8004fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd4:	d017      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004fd6:	e063      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6899      	ldr	r1, [r3, #8]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f000 fc7a 	bl	80058e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ffa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	609a      	str	r2, [r3, #8]
      break;
 8005004:	e04c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6899      	ldr	r1, [r3, #8]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f000 fc63 	bl	80058e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005028:	609a      	str	r2, [r3, #8]
      break;
 800502a:	e039      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	461a      	mov	r2, r3
 800503a:	f000 fbd7 	bl	80057ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2150      	movs	r1, #80	; 0x50
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fc30 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800504a:	e029      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	461a      	mov	r2, r3
 800505a:	f000 fbf6 	bl	800584a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2160      	movs	r1, #96	; 0x60
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fc20 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800506a:	e019      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6859      	ldr	r1, [r3, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	461a      	mov	r2, r3
 800507a:	f000 fbb7 	bl	80057ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2140      	movs	r1, #64	; 0x40
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fc10 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800508a:	e009      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 fc07 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800509c:	e000      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800509e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a40      	ldr	r2, [pc, #256]	; (8005220 <TIM_Base_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d00f      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3d      	ldr	r2, [pc, #244]	; (8005224 <TIM_Base_SetConfig+0x118>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3c      	ldr	r2, [pc, #240]	; (8005228 <TIM_Base_SetConfig+0x11c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3b      	ldr	r2, [pc, #236]	; (800522c <TIM_Base_SetConfig+0x120>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3a      	ldr	r2, [pc, #232]	; (8005230 <TIM_Base_SetConfig+0x124>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2f      	ldr	r2, [pc, #188]	; (8005220 <TIM_Base_SetConfig+0x114>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01f      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d01b      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2c      	ldr	r2, [pc, #176]	; (8005224 <TIM_Base_SetConfig+0x118>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2b      	ldr	r2, [pc, #172]	; (8005228 <TIM_Base_SetConfig+0x11c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2a      	ldr	r2, [pc, #168]	; (800522c <TIM_Base_SetConfig+0x120>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a29      	ldr	r2, [pc, #164]	; (8005230 <TIM_Base_SetConfig+0x124>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a28      	ldr	r2, [pc, #160]	; (8005234 <TIM_Base_SetConfig+0x128>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a27      	ldr	r2, [pc, #156]	; (8005238 <TIM_Base_SetConfig+0x12c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a26      	ldr	r2, [pc, #152]	; (800523c <TIM_Base_SetConfig+0x130>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a10      	ldr	r2, [pc, #64]	; (8005220 <TIM_Base_SetConfig+0x114>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00f      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a12      	ldr	r2, [pc, #72]	; (8005230 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a11      	ldr	r2, [pc, #68]	; (8005234 <TIM_Base_SetConfig+0x128>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d007      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <TIM_Base_SetConfig+0x12c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0f      	ldr	r2, [pc, #60]	; (800523c <TIM_Base_SetConfig+0x130>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d103      	bne.n	800520c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	615a      	str	r2, [r3, #20]
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40013400 	.word	0x40013400
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800

08005240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0201 	bic.w	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 0302 	bic.w	r3, r3, #2
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a2c      	ldr	r2, [pc, #176]	; (800534c <TIM_OC1_SetConfig+0x10c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00f      	beq.n	80052c0 <TIM_OC1_SetConfig+0x80>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a2b      	ldr	r2, [pc, #172]	; (8005350 <TIM_OC1_SetConfig+0x110>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_OC1_SetConfig+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <TIM_OC1_SetConfig+0x114>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_OC1_SetConfig+0x80>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a29      	ldr	r2, [pc, #164]	; (8005358 <TIM_OC1_SetConfig+0x118>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC1_SetConfig+0x80>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a28      	ldr	r2, [pc, #160]	; (800535c <TIM_OC1_SetConfig+0x11c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10c      	bne.n	80052da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0308 	bic.w	r3, r3, #8
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 0304 	bic.w	r3, r3, #4
 80052d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <TIM_OC1_SetConfig+0x10c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00f      	beq.n	8005302 <TIM_OC1_SetConfig+0xc2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <TIM_OC1_SetConfig+0x110>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00b      	beq.n	8005302 <TIM_OC1_SetConfig+0xc2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a19      	ldr	r2, [pc, #100]	; (8005354 <TIM_OC1_SetConfig+0x114>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d007      	beq.n	8005302 <TIM_OC1_SetConfig+0xc2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a18      	ldr	r2, [pc, #96]	; (8005358 <TIM_OC1_SetConfig+0x118>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_OC1_SetConfig+0xc2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a17      	ldr	r2, [pc, #92]	; (800535c <TIM_OC1_SetConfig+0x11c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d111      	bne.n	8005326 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40013400 	.word	0x40013400
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800

08005360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f023 0210 	bic.w	r2, r3, #16
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0320 	bic.w	r3, r3, #32
 80053ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a28      	ldr	r2, [pc, #160]	; (8005460 <TIM_OC2_SetConfig+0x100>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC2_SetConfig+0x6c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a27      	ldr	r2, [pc, #156]	; (8005464 <TIM_OC2_SetConfig+0x104>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10d      	bne.n	80053e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <TIM_OC2_SetConfig+0x100>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00f      	beq.n	8005410 <TIM_OC2_SetConfig+0xb0>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <TIM_OC2_SetConfig+0x104>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <TIM_OC2_SetConfig+0xb0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <TIM_OC2_SetConfig+0x108>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_OC2_SetConfig+0xb0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <TIM_OC2_SetConfig+0x10c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_OC2_SetConfig+0xb0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a19      	ldr	r2, [pc, #100]	; (8005470 <TIM_OC2_SetConfig+0x110>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d113      	bne.n	8005438 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a27      	ldr	r2, [pc, #156]	; (8005570 <TIM_OC3_SetConfig+0xfc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_OC3_SetConfig+0x6a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <TIM_OC3_SetConfig+0x100>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d10d      	bne.n	80054fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <TIM_OC3_SetConfig+0xfc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_OC3_SetConfig+0xae>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <TIM_OC3_SetConfig+0x100>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_OC3_SetConfig+0xae>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1a      	ldr	r2, [pc, #104]	; (8005578 <TIM_OC3_SetConfig+0x104>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_OC3_SetConfig+0xae>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a19      	ldr	r2, [pc, #100]	; (800557c <TIM_OC3_SetConfig+0x108>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_OC3_SetConfig+0xae>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <TIM_OC3_SetConfig+0x10c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d113      	bne.n	800554a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	621a      	str	r2, [r3, #32]
}
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40013400 	.word	0x40013400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800

08005584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	031b      	lsls	r3, r3, #12
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <TIM_OC4_SetConfig+0xc0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00f      	beq.n	8005608 <TIM_OC4_SetConfig+0x84>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a17      	ldr	r2, [pc, #92]	; (8005648 <TIM_OC4_SetConfig+0xc4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_OC4_SetConfig+0x84>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a16      	ldr	r2, [pc, #88]	; (800564c <TIM_OC4_SetConfig+0xc8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC4_SetConfig+0x84>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a15      	ldr	r2, [pc, #84]	; (8005650 <TIM_OC4_SetConfig+0xcc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC4_SetConfig+0x84>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a14      	ldr	r2, [pc, #80]	; (8005654 <TIM_OC4_SetConfig+0xd0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d109      	bne.n	800561c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800560e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	019b      	lsls	r3, r3, #6
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40013400 	.word	0x40013400
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800

08005658 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800569c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a17      	ldr	r2, [pc, #92]	; (800570c <TIM_OC5_SetConfig+0xb4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_OC5_SetConfig+0x7a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <TIM_OC5_SetConfig+0xb8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_OC5_SetConfig+0x7a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a15      	ldr	r2, [pc, #84]	; (8005714 <TIM_OC5_SetConfig+0xbc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_OC5_SetConfig+0x7a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a14      	ldr	r2, [pc, #80]	; (8005718 <TIM_OC5_SetConfig+0xc0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_OC5_SetConfig+0x7a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a13      	ldr	r2, [pc, #76]	; (800571c <TIM_OC5_SetConfig+0xc4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d109      	bne.n	80056e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	40012c00 	.word	0x40012c00
 8005710:	40013400 	.word	0x40013400
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800

08005720 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	051b      	lsls	r3, r3, #20
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <TIM_OC6_SetConfig+0xb8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <TIM_OC6_SetConfig+0x7c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a17      	ldr	r2, [pc, #92]	; (80057dc <TIM_OC6_SetConfig+0xbc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_OC6_SetConfig+0x7c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a16      	ldr	r2, [pc, #88]	; (80057e0 <TIM_OC6_SetConfig+0xc0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_OC6_SetConfig+0x7c>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <TIM_OC6_SetConfig+0xc4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC6_SetConfig+0x7c>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <TIM_OC6_SetConfig+0xc8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d109      	bne.n	80057b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	029b      	lsls	r3, r3, #10
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40013400 	.word	0x40013400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800

080057ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 030a 	bic.w	r3, r3, #10
 8005828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f023 0210 	bic.w	r2, r3, #16
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f043 0307 	orr.w	r3, r3, #7
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	609a      	str	r2, [r3, #8]
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	021a      	lsls	r2, r3, #8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	431a      	orrs	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4313      	orrs	r3, r2
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	609a      	str	r2, [r3, #8]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005934:	2302      	movs	r3, #2
 8005936:	e045      	b.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005996:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40013400 	.word	0x40013400

080059d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e042      	b.n	8005aac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fc faa7 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2224      	movs	r2, #36	; 0x24
 8005a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb1a 	bl	8006090 <UART_SetConfig>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e022      	b.n	8005aac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 fcce 	bl	8007410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 fd55 	bl	8007554 <UART_CheckIdleState>
 8005aaa:	4603      	mov	r3, r0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	f040 8084 	bne.w	8005bd8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_UART_Transmit+0x28>
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e07c      	b.n	8005bda <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_UART_Transmit+0x3a>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e075      	b.n	8005bda <HAL_UART_Transmit+0x126>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2221      	movs	r2, #33	; 0x21
 8005b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005b06:	f7fc fd6d 	bl	80025e4 <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b24:	d108      	bne.n	8005b38 <HAL_UART_Transmit+0x84>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e003      	b.n	8005b40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b40:	e02d      	b.n	8005b9e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f001 fd49 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e03e      	b.n	8005bda <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	881a      	ldrh	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b6e:	b292      	uxth	r2, r2
 8005b70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	3302      	adds	r3, #2
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e008      	b.n	8005b8c <HAL_UART_Transmit+0xd8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	b292      	uxth	r2, r2
 8005b84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1cb      	bne.n	8005b42 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2140      	movs	r1, #64	; 0x40
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f001 fd15 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_UART_Transmit+0x110>
    {
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e00a      	b.n	8005bda <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	f040 80bc 	bne.w	8005d76 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_UART_Receive_IT+0x26>
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e0b4      	b.n	8005d78 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_UART_Receive_IT+0x38>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0ad      	b.n	8005d78 <HAL_UART_Receive_IT+0x194>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d10e      	bne.n	8005c68 <HAL_UART_Receive_IT+0x84>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <HAL_UART_Receive_IT+0x7a>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c5c:	e02d      	b.n	8005cba <HAL_UART_Receive_IT+0xd6>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	22ff      	movs	r2, #255	; 0xff
 8005c62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c66:	e028      	b.n	8005cba <HAL_UART_Receive_IT+0xd6>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10d      	bne.n	8005c8c <HAL_UART_Receive_IT+0xa8>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <HAL_UART_Receive_IT+0x9e>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	22ff      	movs	r2, #255	; 0xff
 8005c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c80:	e01b      	b.n	8005cba <HAL_UART_Receive_IT+0xd6>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	227f      	movs	r2, #127	; 0x7f
 8005c86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c8a:	e016      	b.n	8005cba <HAL_UART_Receive_IT+0xd6>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c94:	d10d      	bne.n	8005cb2 <HAL_UART_Receive_IT+0xce>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <HAL_UART_Receive_IT+0xc4>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	227f      	movs	r2, #127	; 0x7f
 8005ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ca6:	e008      	b.n	8005cba <HAL_UART_Receive_IT+0xd6>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	223f      	movs	r2, #63	; 0x3f
 8005cac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cb0:	e003      	b.n	8005cba <HAL_UART_Receive_IT+0xd6>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2222      	movs	r2, #34	; 0x22
 8005cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0201 	orr.w	r2, r2, #1
 8005cd8:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce2:	d12a      	bne.n	8005d3a <HAL_UART_Receive_IT+0x156>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d324      	bcc.n	8005d3a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf8:	d107      	bne.n	8005d0a <HAL_UART_Receive_IT+0x126>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <HAL_UART_Receive_IT+0x1a0>)
 8005d06:	66da      	str	r2, [r3, #108]	; 0x6c
 8005d08:	e002      	b.n	8005d10 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <HAL_UART_Receive_IT+0x1a4>)
 8005d0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d26:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	e01b      	b.n	8005d72 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d42:	d107      	bne.n	8005d54 <HAL_UART_Receive_IT+0x170>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4a0f      	ldr	r2, [pc, #60]	; (8005d8c <HAL_UART_Receive_IT+0x1a8>)
 8005d50:	66da      	str	r2, [r3, #108]	; 0x6c
 8005d52:	e002      	b.n	8005d5a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a0e      	ldr	r2, [pc, #56]	; (8005d90 <HAL_UART_Receive_IT+0x1ac>)
 8005d58:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005d70:	601a      	str	r2, [r3, #0]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e000      	b.n	8005d78 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005d76:	2302      	movs	r3, #2
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	08007989 	.word	0x08007989
 8005d88:	0800787d 	.word	0x0800787d
 8005d8c:	080077cd 	.word	0x080077cd
 8005d90:	0800771f 	.word	0x0800771f

08005d94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d118      	bne.n	8005df4 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d013      	beq.n	8005df4 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <HAL_UART_IRQHandler+0x60>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 812e 	beq.w	8006046 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4798      	blx	r3
      }
      return;
 8005df2:	e128      	b.n	8006046 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80d1 	beq.w	8005f9e <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4b96      	ldr	r3, [pc, #600]	; (8006058 <HAL_UART_IRQHandler+0x2c4>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 80c6 	beq.w	8005f9e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d010      	beq.n	8005e3e <HAL_UART_IRQHandler+0xaa>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00b      	beq.n	8005e3e <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	f043 0201 	orr.w	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d010      	beq.n	8005e6a <HAL_UART_IRQHandler+0xd6>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2202      	movs	r2, #2
 8005e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e60:	f043 0204 	orr.w	r2, r3, #4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_UART_IRQHandler+0x102>
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2204      	movs	r2, #4
 8005e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f043 0202 	orr.w	r2, r3, #2
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4b6a      	ldr	r3, [pc, #424]	; (8006058 <HAL_UART_IRQHandler+0x2c4>)
 8005eae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <HAL_UART_IRQHandler+0x138>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2208      	movs	r2, #8
 8005eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec2:	f043 0208 	orr.w	r2, r3, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80b9 	beq.w	800604a <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d011      	beq.n	8005f06 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <HAL_UART_IRQHandler+0x172>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d004      	beq.n	8005f26 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d031      	beq.n	8005f8a <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fba6 	bl	8007678 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d123      	bne.n	8005f82 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f48:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d013      	beq.n	8005f7a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f56:	4a41      	ldr	r2, [pc, #260]	; (800605c <HAL_UART_IRQHandler+0x2c8>)
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fc fc7f 	bl	8002862 <HAL_DMA_Abort_IT>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d017      	beq.n	8005f9a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	e00f      	b.n	8005f9a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fb fb2a 	bl	80015d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f80:	e00b      	b.n	8005f9a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb fb26 	bl	80015d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f88:	e007      	b.n	8005f9a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fb fb22 	bl	80015d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005f98:	e057      	b.n	800604a <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9a:	bf00      	nop
    return;
 8005f9c:	e055      	b.n	800604a <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x230>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fd69 	bl	8007a94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fc2:	e045      	b.n	8006050 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d012      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x260>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d031      	beq.n	800604e <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
    }
    return;
 8005ff2:	e02c      	b.n	800604e <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_UART_IRQHandler+0x27c>
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 fb6e 	bl	80076ea <UART_EndTransmit_IT>
    return;
 800600e:	e01f      	b.n	8006050 <HAL_UART_IRQHandler+0x2bc>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <HAL_UART_IRQHandler+0x298>
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 fd49 	bl	8007abc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800602a:	e011      	b.n	8006050 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <HAL_UART_IRQHandler+0x2bc>
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	da09      	bge.n	8006050 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 fd33 	bl	8007aa8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006042:	bf00      	nop
 8006044:	e004      	b.n	8006050 <HAL_UART_IRQHandler+0x2bc>
      return;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <HAL_UART_IRQHandler+0x2bc>
    return;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <HAL_UART_IRQHandler+0x2bc>
    return;
 800604e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	10000001 	.word	0x10000001
 800605c:	080076bf 	.word	0x080076bf

08006060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006090:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006094:	b088      	sub	sp, #32
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4bac      	ldr	r3, [pc, #688]	; (8006380 <UART_SetConfig+0x2f0>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6812      	ldr	r2, [r2, #0]
 80060d6:	69f9      	ldr	r1, [r7, #28]
 80060d8:	430b      	orrs	r3, r1
 80060da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4aa1      	ldr	r2, [pc, #644]	; (8006384 <UART_SetConfig+0x2f4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	4313      	orrs	r3, r2
 800610a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006116:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	69f9      	ldr	r1, [r7, #28]
 8006120:	430b      	orrs	r3, r1
 8006122:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	f023 010f 	bic.w	r1, r3, #15
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a92      	ldr	r2, [pc, #584]	; (8006388 <UART_SetConfig+0x2f8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d121      	bne.n	8006188 <UART_SetConfig+0xf8>
 8006144:	4b91      	ldr	r3, [pc, #580]	; (800638c <UART_SetConfig+0x2fc>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	2b03      	cmp	r3, #3
 8006150:	d816      	bhi.n	8006180 <UART_SetConfig+0xf0>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <UART_SetConfig+0xc8>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	08006169 	.word	0x08006169
 800615c:	08006175 	.word	0x08006175
 8006160:	0800616f 	.word	0x0800616f
 8006164:	0800617b 	.word	0x0800617b
 8006168:	2301      	movs	r3, #1
 800616a:	76fb      	strb	r3, [r7, #27]
 800616c:	e0e8      	b.n	8006340 <UART_SetConfig+0x2b0>
 800616e:	2302      	movs	r3, #2
 8006170:	76fb      	strb	r3, [r7, #27]
 8006172:	e0e5      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006174:	2304      	movs	r3, #4
 8006176:	76fb      	strb	r3, [r7, #27]
 8006178:	e0e2      	b.n	8006340 <UART_SetConfig+0x2b0>
 800617a:	2308      	movs	r3, #8
 800617c:	76fb      	strb	r3, [r7, #27]
 800617e:	e0df      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006180:	2310      	movs	r3, #16
 8006182:	76fb      	strb	r3, [r7, #27]
 8006184:	bf00      	nop
 8006186:	e0db      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a80      	ldr	r2, [pc, #512]	; (8006390 <UART_SetConfig+0x300>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d134      	bne.n	80061fc <UART_SetConfig+0x16c>
 8006192:	4b7e      	ldr	r3, [pc, #504]	; (800638c <UART_SetConfig+0x2fc>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d829      	bhi.n	80061f4 <UART_SetConfig+0x164>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <UART_SetConfig+0x118>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061dd 	.word	0x080061dd
 80061ac:	080061f5 	.word	0x080061f5
 80061b0:	080061f5 	.word	0x080061f5
 80061b4:	080061f5 	.word	0x080061f5
 80061b8:	080061e9 	.word	0x080061e9
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	080061f5 	.word	0x080061f5
 80061c8:	080061e3 	.word	0x080061e3
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061f5 	.word	0x080061f5
 80061d8:	080061ef 	.word	0x080061ef
 80061dc:	2300      	movs	r3, #0
 80061de:	76fb      	strb	r3, [r7, #27]
 80061e0:	e0ae      	b.n	8006340 <UART_SetConfig+0x2b0>
 80061e2:	2302      	movs	r3, #2
 80061e4:	76fb      	strb	r3, [r7, #27]
 80061e6:	e0ab      	b.n	8006340 <UART_SetConfig+0x2b0>
 80061e8:	2304      	movs	r3, #4
 80061ea:	76fb      	strb	r3, [r7, #27]
 80061ec:	e0a8      	b.n	8006340 <UART_SetConfig+0x2b0>
 80061ee:	2308      	movs	r3, #8
 80061f0:	76fb      	strb	r3, [r7, #27]
 80061f2:	e0a5      	b.n	8006340 <UART_SetConfig+0x2b0>
 80061f4:	2310      	movs	r3, #16
 80061f6:	76fb      	strb	r3, [r7, #27]
 80061f8:	bf00      	nop
 80061fa:	e0a1      	b.n	8006340 <UART_SetConfig+0x2b0>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a64      	ldr	r2, [pc, #400]	; (8006394 <UART_SetConfig+0x304>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d120      	bne.n	8006248 <UART_SetConfig+0x1b8>
 8006206:	4b61      	ldr	r3, [pc, #388]	; (800638c <UART_SetConfig+0x2fc>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006210:	2b10      	cmp	r3, #16
 8006212:	d00f      	beq.n	8006234 <UART_SetConfig+0x1a4>
 8006214:	2b10      	cmp	r3, #16
 8006216:	d802      	bhi.n	800621e <UART_SetConfig+0x18e>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <UART_SetConfig+0x198>
 800621c:	e010      	b.n	8006240 <UART_SetConfig+0x1b0>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d005      	beq.n	800622e <UART_SetConfig+0x19e>
 8006222:	2b30      	cmp	r3, #48	; 0x30
 8006224:	d009      	beq.n	800623a <UART_SetConfig+0x1aa>
 8006226:	e00b      	b.n	8006240 <UART_SetConfig+0x1b0>
 8006228:	2300      	movs	r3, #0
 800622a:	76fb      	strb	r3, [r7, #27]
 800622c:	e088      	b.n	8006340 <UART_SetConfig+0x2b0>
 800622e:	2302      	movs	r3, #2
 8006230:	76fb      	strb	r3, [r7, #27]
 8006232:	e085      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006234:	2304      	movs	r3, #4
 8006236:	76fb      	strb	r3, [r7, #27]
 8006238:	e082      	b.n	8006340 <UART_SetConfig+0x2b0>
 800623a:	2308      	movs	r3, #8
 800623c:	76fb      	strb	r3, [r7, #27]
 800623e:	e07f      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006240:	2310      	movs	r3, #16
 8006242:	76fb      	strb	r3, [r7, #27]
 8006244:	bf00      	nop
 8006246:	e07b      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a52      	ldr	r2, [pc, #328]	; (8006398 <UART_SetConfig+0x308>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d120      	bne.n	8006294 <UART_SetConfig+0x204>
 8006252:	4b4e      	ldr	r3, [pc, #312]	; (800638c <UART_SetConfig+0x2fc>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d00f      	beq.n	8006280 <UART_SetConfig+0x1f0>
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	d802      	bhi.n	800626a <UART_SetConfig+0x1da>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <UART_SetConfig+0x1e4>
 8006268:	e010      	b.n	800628c <UART_SetConfig+0x1fc>
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d005      	beq.n	800627a <UART_SetConfig+0x1ea>
 800626e:	2bc0      	cmp	r3, #192	; 0xc0
 8006270:	d009      	beq.n	8006286 <UART_SetConfig+0x1f6>
 8006272:	e00b      	b.n	800628c <UART_SetConfig+0x1fc>
 8006274:	2300      	movs	r3, #0
 8006276:	76fb      	strb	r3, [r7, #27]
 8006278:	e062      	b.n	8006340 <UART_SetConfig+0x2b0>
 800627a:	2302      	movs	r3, #2
 800627c:	76fb      	strb	r3, [r7, #27]
 800627e:	e05f      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006280:	2304      	movs	r3, #4
 8006282:	76fb      	strb	r3, [r7, #27]
 8006284:	e05c      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006286:	2308      	movs	r3, #8
 8006288:	76fb      	strb	r3, [r7, #27]
 800628a:	e059      	b.n	8006340 <UART_SetConfig+0x2b0>
 800628c:	2310      	movs	r3, #16
 800628e:	76fb      	strb	r3, [r7, #27]
 8006290:	bf00      	nop
 8006292:	e055      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a40      	ldr	r2, [pc, #256]	; (800639c <UART_SetConfig+0x30c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d124      	bne.n	80062e8 <UART_SetConfig+0x258>
 800629e:	4b3b      	ldr	r3, [pc, #236]	; (800638c <UART_SetConfig+0x2fc>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ac:	d012      	beq.n	80062d4 <UART_SetConfig+0x244>
 80062ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b2:	d802      	bhi.n	80062ba <UART_SetConfig+0x22a>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <UART_SetConfig+0x238>
 80062b8:	e012      	b.n	80062e0 <UART_SetConfig+0x250>
 80062ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062be:	d006      	beq.n	80062ce <UART_SetConfig+0x23e>
 80062c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c4:	d009      	beq.n	80062da <UART_SetConfig+0x24a>
 80062c6:	e00b      	b.n	80062e0 <UART_SetConfig+0x250>
 80062c8:	2300      	movs	r3, #0
 80062ca:	76fb      	strb	r3, [r7, #27]
 80062cc:	e038      	b.n	8006340 <UART_SetConfig+0x2b0>
 80062ce:	2302      	movs	r3, #2
 80062d0:	76fb      	strb	r3, [r7, #27]
 80062d2:	e035      	b.n	8006340 <UART_SetConfig+0x2b0>
 80062d4:	2304      	movs	r3, #4
 80062d6:	76fb      	strb	r3, [r7, #27]
 80062d8:	e032      	b.n	8006340 <UART_SetConfig+0x2b0>
 80062da:	2308      	movs	r3, #8
 80062dc:	76fb      	strb	r3, [r7, #27]
 80062de:	e02f      	b.n	8006340 <UART_SetConfig+0x2b0>
 80062e0:	2310      	movs	r3, #16
 80062e2:	76fb      	strb	r3, [r7, #27]
 80062e4:	bf00      	nop
 80062e6:	e02b      	b.n	8006340 <UART_SetConfig+0x2b0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a25      	ldr	r2, [pc, #148]	; (8006384 <UART_SetConfig+0x2f4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d124      	bne.n	800633c <UART_SetConfig+0x2ac>
 80062f2:	4b26      	ldr	r3, [pc, #152]	; (800638c <UART_SetConfig+0x2fc>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006300:	d012      	beq.n	8006328 <UART_SetConfig+0x298>
 8006302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006306:	d802      	bhi.n	800630e <UART_SetConfig+0x27e>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <UART_SetConfig+0x28c>
 800630c:	e012      	b.n	8006334 <UART_SetConfig+0x2a4>
 800630e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006312:	d006      	beq.n	8006322 <UART_SetConfig+0x292>
 8006314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006318:	d009      	beq.n	800632e <UART_SetConfig+0x29e>
 800631a:	e00b      	b.n	8006334 <UART_SetConfig+0x2a4>
 800631c:	2300      	movs	r3, #0
 800631e:	76fb      	strb	r3, [r7, #27]
 8006320:	e00e      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006322:	2302      	movs	r3, #2
 8006324:	76fb      	strb	r3, [r7, #27]
 8006326:	e00b      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006328:	2304      	movs	r3, #4
 800632a:	76fb      	strb	r3, [r7, #27]
 800632c:	e008      	b.n	8006340 <UART_SetConfig+0x2b0>
 800632e:	2308      	movs	r3, #8
 8006330:	76fb      	strb	r3, [r7, #27]
 8006332:	e005      	b.n	8006340 <UART_SetConfig+0x2b0>
 8006334:	2310      	movs	r3, #16
 8006336:	76fb      	strb	r3, [r7, #27]
 8006338:	bf00      	nop
 800633a:	e001      	b.n	8006340 <UART_SetConfig+0x2b0>
 800633c:	2310      	movs	r3, #16
 800633e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a0f      	ldr	r2, [pc, #60]	; (8006384 <UART_SetConfig+0x2f4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	f040 842d 	bne.w	8006ba6 <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800634c:	7efb      	ldrb	r3, [r7, #27]
 800634e:	2b08      	cmp	r3, #8
 8006350:	f200 816b 	bhi.w	800662a <UART_SetConfig+0x59a>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <UART_SetConfig+0x2cc>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	080063a1 	.word	0x080063a1
 8006360:	0800662b 	.word	0x0800662b
 8006364:	08006443 	.word	0x08006443
 8006368:	0800662b 	.word	0x0800662b
 800636c:	080064db 	.word	0x080064db
 8006370:	0800662b 	.word	0x0800662b
 8006374:	0800662b 	.word	0x0800662b
 8006378:	0800662b 	.word	0x0800662b
 800637c:	0800657d 	.word	0x0800657d
 8006380:	cfff69f3 	.word	0xcfff69f3
 8006384:	40008000 	.word	0x40008000
 8006388:	40013800 	.word	0x40013800
 800638c:	40021000 	.word	0x40021000
 8006390:	40004400 	.word	0x40004400
 8006394:	40004800 	.word	0x40004800
 8006398:	40004c00 	.word	0x40004c00
 800639c:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80063a0:	f7fd fc5c 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 80063a4:	4602      	mov	r2, r0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d044      	beq.n	8006438 <UART_SetConfig+0x3a8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d03e      	beq.n	8006434 <UART_SetConfig+0x3a4>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d038      	beq.n	8006430 <UART_SetConfig+0x3a0>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d032      	beq.n	800642c <UART_SetConfig+0x39c>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d02c      	beq.n	8006428 <UART_SetConfig+0x398>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d026      	beq.n	8006424 <UART_SetConfig+0x394>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d020      	beq.n	8006420 <UART_SetConfig+0x390>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b07      	cmp	r3, #7
 80063e4:	d01a      	beq.n	800641c <UART_SetConfig+0x38c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d014      	beq.n	8006418 <UART_SetConfig+0x388>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b09      	cmp	r3, #9
 80063f4:	d00e      	beq.n	8006414 <UART_SetConfig+0x384>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b0a      	cmp	r3, #10
 80063fc:	d008      	beq.n	8006410 <UART_SetConfig+0x380>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b0b      	cmp	r3, #11
 8006404:	d102      	bne.n	800640c <UART_SetConfig+0x37c>
 8006406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800640a:	e016      	b.n	800643a <UART_SetConfig+0x3aa>
 800640c:	2301      	movs	r3, #1
 800640e:	e014      	b.n	800643a <UART_SetConfig+0x3aa>
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	e012      	b.n	800643a <UART_SetConfig+0x3aa>
 8006414:	2340      	movs	r3, #64	; 0x40
 8006416:	e010      	b.n	800643a <UART_SetConfig+0x3aa>
 8006418:	2320      	movs	r3, #32
 800641a:	e00e      	b.n	800643a <UART_SetConfig+0x3aa>
 800641c:	2310      	movs	r3, #16
 800641e:	e00c      	b.n	800643a <UART_SetConfig+0x3aa>
 8006420:	230c      	movs	r3, #12
 8006422:	e00a      	b.n	800643a <UART_SetConfig+0x3aa>
 8006424:	230a      	movs	r3, #10
 8006426:	e008      	b.n	800643a <UART_SetConfig+0x3aa>
 8006428:	2308      	movs	r3, #8
 800642a:	e006      	b.n	800643a <UART_SetConfig+0x3aa>
 800642c:	2306      	movs	r3, #6
 800642e:	e004      	b.n	800643a <UART_SetConfig+0x3aa>
 8006430:	2304      	movs	r3, #4
 8006432:	e002      	b.n	800643a <UART_SetConfig+0x3aa>
 8006434:	2302      	movs	r3, #2
 8006436:	e000      	b.n	800643a <UART_SetConfig+0x3aa>
 8006438:	2301      	movs	r3, #1
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8006440:	e0f6      	b.n	8006630 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	d044      	beq.n	80064d4 <UART_SetConfig+0x444>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b01      	cmp	r3, #1
 8006450:	d03e      	beq.n	80064d0 <UART_SetConfig+0x440>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	2b02      	cmp	r3, #2
 8006458:	d038      	beq.n	80064cc <UART_SetConfig+0x43c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b03      	cmp	r3, #3
 8006460:	d032      	beq.n	80064c8 <UART_SetConfig+0x438>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	2b04      	cmp	r3, #4
 8006468:	d02c      	beq.n	80064c4 <UART_SetConfig+0x434>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	2b05      	cmp	r3, #5
 8006470:	d026      	beq.n	80064c0 <UART_SetConfig+0x430>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	2b06      	cmp	r3, #6
 8006478:	d020      	beq.n	80064bc <UART_SetConfig+0x42c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	2b07      	cmp	r3, #7
 8006480:	d01a      	beq.n	80064b8 <UART_SetConfig+0x428>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	2b08      	cmp	r3, #8
 8006488:	d014      	beq.n	80064b4 <UART_SetConfig+0x424>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2b09      	cmp	r3, #9
 8006490:	d00e      	beq.n	80064b0 <UART_SetConfig+0x420>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	2b0a      	cmp	r3, #10
 8006498:	d008      	beq.n	80064ac <UART_SetConfig+0x41c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	2b0b      	cmp	r3, #11
 80064a0:	d102      	bne.n	80064a8 <UART_SetConfig+0x418>
 80064a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80064a6:	e016      	b.n	80064d6 <UART_SetConfig+0x446>
 80064a8:	4ba1      	ldr	r3, [pc, #644]	; (8006730 <UART_SetConfig+0x6a0>)
 80064aa:	e014      	b.n	80064d6 <UART_SetConfig+0x446>
 80064ac:	4ba1      	ldr	r3, [pc, #644]	; (8006734 <UART_SetConfig+0x6a4>)
 80064ae:	e012      	b.n	80064d6 <UART_SetConfig+0x446>
 80064b0:	4ba1      	ldr	r3, [pc, #644]	; (8006738 <UART_SetConfig+0x6a8>)
 80064b2:	e010      	b.n	80064d6 <UART_SetConfig+0x446>
 80064b4:	4ba1      	ldr	r3, [pc, #644]	; (800673c <UART_SetConfig+0x6ac>)
 80064b6:	e00e      	b.n	80064d6 <UART_SetConfig+0x446>
 80064b8:	4ba1      	ldr	r3, [pc, #644]	; (8006740 <UART_SetConfig+0x6b0>)
 80064ba:	e00c      	b.n	80064d6 <UART_SetConfig+0x446>
 80064bc:	4ba1      	ldr	r3, [pc, #644]	; (8006744 <UART_SetConfig+0x6b4>)
 80064be:	e00a      	b.n	80064d6 <UART_SetConfig+0x446>
 80064c0:	4ba1      	ldr	r3, [pc, #644]	; (8006748 <UART_SetConfig+0x6b8>)
 80064c2:	e008      	b.n	80064d6 <UART_SetConfig+0x446>
 80064c4:	4ba1      	ldr	r3, [pc, #644]	; (800674c <UART_SetConfig+0x6bc>)
 80064c6:	e006      	b.n	80064d6 <UART_SetConfig+0x446>
 80064c8:	4ba1      	ldr	r3, [pc, #644]	; (8006750 <UART_SetConfig+0x6c0>)
 80064ca:	e004      	b.n	80064d6 <UART_SetConfig+0x446>
 80064cc:	4ba1      	ldr	r3, [pc, #644]	; (8006754 <UART_SetConfig+0x6c4>)
 80064ce:	e002      	b.n	80064d6 <UART_SetConfig+0x446>
 80064d0:	4ba1      	ldr	r3, [pc, #644]	; (8006758 <UART_SetConfig+0x6c8>)
 80064d2:	e000      	b.n	80064d6 <UART_SetConfig+0x446>
 80064d4:	4b96      	ldr	r3, [pc, #600]	; (8006730 <UART_SetConfig+0x6a0>)
 80064d6:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80064d8:	e0aa      	b.n	8006630 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80064da:	f7fd fb29 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 80064de:	4602      	mov	r2, r0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d044      	beq.n	8006572 <UART_SetConfig+0x4e2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d03e      	beq.n	800656e <UART_SetConfig+0x4de>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d038      	beq.n	800656a <UART_SetConfig+0x4da>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d032      	beq.n	8006566 <UART_SetConfig+0x4d6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2b04      	cmp	r3, #4
 8006506:	d02c      	beq.n	8006562 <UART_SetConfig+0x4d2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b05      	cmp	r3, #5
 800650e:	d026      	beq.n	800655e <UART_SetConfig+0x4ce>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b06      	cmp	r3, #6
 8006516:	d020      	beq.n	800655a <UART_SetConfig+0x4ca>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b07      	cmp	r3, #7
 800651e:	d01a      	beq.n	8006556 <UART_SetConfig+0x4c6>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	2b08      	cmp	r3, #8
 8006526:	d014      	beq.n	8006552 <UART_SetConfig+0x4c2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	2b09      	cmp	r3, #9
 800652e:	d00e      	beq.n	800654e <UART_SetConfig+0x4be>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	2b0a      	cmp	r3, #10
 8006536:	d008      	beq.n	800654a <UART_SetConfig+0x4ba>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b0b      	cmp	r3, #11
 800653e:	d102      	bne.n	8006546 <UART_SetConfig+0x4b6>
 8006540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006544:	e016      	b.n	8006574 <UART_SetConfig+0x4e4>
 8006546:	2301      	movs	r3, #1
 8006548:	e014      	b.n	8006574 <UART_SetConfig+0x4e4>
 800654a:	2380      	movs	r3, #128	; 0x80
 800654c:	e012      	b.n	8006574 <UART_SetConfig+0x4e4>
 800654e:	2340      	movs	r3, #64	; 0x40
 8006550:	e010      	b.n	8006574 <UART_SetConfig+0x4e4>
 8006552:	2320      	movs	r3, #32
 8006554:	e00e      	b.n	8006574 <UART_SetConfig+0x4e4>
 8006556:	2310      	movs	r3, #16
 8006558:	e00c      	b.n	8006574 <UART_SetConfig+0x4e4>
 800655a:	230c      	movs	r3, #12
 800655c:	e00a      	b.n	8006574 <UART_SetConfig+0x4e4>
 800655e:	230a      	movs	r3, #10
 8006560:	e008      	b.n	8006574 <UART_SetConfig+0x4e4>
 8006562:	2308      	movs	r3, #8
 8006564:	e006      	b.n	8006574 <UART_SetConfig+0x4e4>
 8006566:	2306      	movs	r3, #6
 8006568:	e004      	b.n	8006574 <UART_SetConfig+0x4e4>
 800656a:	2304      	movs	r3, #4
 800656c:	e002      	b.n	8006574 <UART_SetConfig+0x4e4>
 800656e:	2302      	movs	r3, #2
 8006570:	e000      	b.n	8006574 <UART_SetConfig+0x4e4>
 8006572:	2301      	movs	r3, #1
 8006574:	fbb2 f3f3 	udiv	r3, r2, r3
 8006578:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800657a:	e059      	b.n	8006630 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	d04e      	beq.n	8006622 <UART_SetConfig+0x592>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b01      	cmp	r3, #1
 800658a:	d047      	beq.n	800661c <UART_SetConfig+0x58c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	2b02      	cmp	r3, #2
 8006592:	d040      	beq.n	8006616 <UART_SetConfig+0x586>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2b03      	cmp	r3, #3
 800659a:	d039      	beq.n	8006610 <UART_SetConfig+0x580>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d032      	beq.n	800660a <UART_SetConfig+0x57a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d02b      	beq.n	8006604 <UART_SetConfig+0x574>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b06      	cmp	r3, #6
 80065b2:	d024      	beq.n	80065fe <UART_SetConfig+0x56e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b07      	cmp	r3, #7
 80065ba:	d01d      	beq.n	80065f8 <UART_SetConfig+0x568>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d016      	beq.n	80065f2 <UART_SetConfig+0x562>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b09      	cmp	r3, #9
 80065ca:	d00f      	beq.n	80065ec <UART_SetConfig+0x55c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b0a      	cmp	r3, #10
 80065d2:	d008      	beq.n	80065e6 <UART_SetConfig+0x556>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	2b0b      	cmp	r3, #11
 80065da:	d101      	bne.n	80065e0 <UART_SetConfig+0x550>
 80065dc:	2380      	movs	r3, #128	; 0x80
 80065de:	e022      	b.n	8006626 <UART_SetConfig+0x596>
 80065e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e4:	e01f      	b.n	8006626 <UART_SetConfig+0x596>
 80065e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065ea:	e01c      	b.n	8006626 <UART_SetConfig+0x596>
 80065ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f0:	e019      	b.n	8006626 <UART_SetConfig+0x596>
 80065f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f6:	e016      	b.n	8006626 <UART_SetConfig+0x596>
 80065f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065fc:	e013      	b.n	8006626 <UART_SetConfig+0x596>
 80065fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006602:	e010      	b.n	8006626 <UART_SetConfig+0x596>
 8006604:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006608:	e00d      	b.n	8006626 <UART_SetConfig+0x596>
 800660a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800660e:	e00a      	b.n	8006626 <UART_SetConfig+0x596>
 8006610:	f241 5355 	movw	r3, #5461	; 0x1555
 8006614:	e007      	b.n	8006626 <UART_SetConfig+0x596>
 8006616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800661a:	e004      	b.n	8006626 <UART_SetConfig+0x596>
 800661c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006620:	e001      	b.n	8006626 <UART_SetConfig+0x596>
 8006622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006626:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8006628:	e002      	b.n	8006630 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	74fb      	strb	r3, [r7, #19]
        break;
 800662e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 86c2 	beq.w	80073bc <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	4413      	add	r3, r2
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	429a      	cmp	r2, r3
 8006646:	d305      	bcc.n	8006654 <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	429a      	cmp	r2, r3
 8006652:	d903      	bls.n	800665c <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	74fb      	strb	r3, [r7, #19]
 8006658:	f000 beb0 	b.w	80073bc <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 800665c:	7efb      	ldrb	r3, [r7, #27]
 800665e:	2b08      	cmp	r3, #8
 8006660:	f200 828c 	bhi.w	8006b7c <UART_SetConfig+0xaec>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0x5dc>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006691 	.word	0x08006691
 8006670:	08006b7d 	.word	0x08006b7d
 8006674:	080067fb 	.word	0x080067fb
 8006678:	08006b7d 	.word	0x08006b7d
 800667c:	080068f1 	.word	0x080068f1
 8006680:	08006b7d 	.word	0x08006b7d
 8006684:	08006b7d 	.word	0x08006b7d
 8006688:	08006b7d 	.word	0x08006b7d
 800668c:	08006a2d 	.word	0x08006a2d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006690:	f7fd fae4 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8006694:	4603      	mov	r3, r0
 8006696:	4618      	mov	r0, r3
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d07e      	beq.n	80067a2 <UART_SetConfig+0x712>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d075      	beq.n	8006798 <UART_SetConfig+0x708>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d06c      	beq.n	800678e <UART_SetConfig+0x6fe>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d063      	beq.n	8006784 <UART_SetConfig+0x6f4>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d05a      	beq.n	800677a <UART_SetConfig+0x6ea>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	d051      	beq.n	8006770 <UART_SetConfig+0x6e0>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	2b06      	cmp	r3, #6
 80066d2:	d048      	beq.n	8006766 <UART_SetConfig+0x6d6>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	2b07      	cmp	r3, #7
 80066da:	d03f      	beq.n	800675c <UART_SetConfig+0x6cc>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d01f      	beq.n	8006724 <UART_SetConfig+0x694>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	2b09      	cmp	r3, #9
 80066ea:	d016      	beq.n	800671a <UART_SetConfig+0x68a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	2b0a      	cmp	r3, #10
 80066f2:	d00d      	beq.n	8006710 <UART_SetConfig+0x680>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	2b0b      	cmp	r3, #11
 80066fa:	d104      	bne.n	8006706 <UART_SetConfig+0x676>
 80066fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006700:	f04f 0400 	mov.w	r4, #0
 8006704:	e051      	b.n	80067aa <UART_SetConfig+0x71a>
 8006706:	f04f 0301 	mov.w	r3, #1
 800670a:	f04f 0400 	mov.w	r4, #0
 800670e:	e04c      	b.n	80067aa <UART_SetConfig+0x71a>
 8006710:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006714:	f04f 0400 	mov.w	r4, #0
 8006718:	e047      	b.n	80067aa <UART_SetConfig+0x71a>
 800671a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800671e:	f04f 0400 	mov.w	r4, #0
 8006722:	e042      	b.n	80067aa <UART_SetConfig+0x71a>
 8006724:	f04f 0320 	mov.w	r3, #32
 8006728:	f04f 0400 	mov.w	r4, #0
 800672c:	e03d      	b.n	80067aa <UART_SetConfig+0x71a>
 800672e:	bf00      	nop
 8006730:	00f42400 	.word	0x00f42400
 8006734:	0001e848 	.word	0x0001e848
 8006738:	0003d090 	.word	0x0003d090
 800673c:	0007a120 	.word	0x0007a120
 8006740:	000f4240 	.word	0x000f4240
 8006744:	00145855 	.word	0x00145855
 8006748:	00186a00 	.word	0x00186a00
 800674c:	001e8480 	.word	0x001e8480
 8006750:	0028b0aa 	.word	0x0028b0aa
 8006754:	003d0900 	.word	0x003d0900
 8006758:	007a1200 	.word	0x007a1200
 800675c:	f04f 0310 	mov.w	r3, #16
 8006760:	f04f 0400 	mov.w	r4, #0
 8006764:	e021      	b.n	80067aa <UART_SetConfig+0x71a>
 8006766:	f04f 030c 	mov.w	r3, #12
 800676a:	f04f 0400 	mov.w	r4, #0
 800676e:	e01c      	b.n	80067aa <UART_SetConfig+0x71a>
 8006770:	f04f 030a 	mov.w	r3, #10
 8006774:	f04f 0400 	mov.w	r4, #0
 8006778:	e017      	b.n	80067aa <UART_SetConfig+0x71a>
 800677a:	f04f 0308 	mov.w	r3, #8
 800677e:	f04f 0400 	mov.w	r4, #0
 8006782:	e012      	b.n	80067aa <UART_SetConfig+0x71a>
 8006784:	f04f 0306 	mov.w	r3, #6
 8006788:	f04f 0400 	mov.w	r4, #0
 800678c:	e00d      	b.n	80067aa <UART_SetConfig+0x71a>
 800678e:	f04f 0304 	mov.w	r3, #4
 8006792:	f04f 0400 	mov.w	r4, #0
 8006796:	e008      	b.n	80067aa <UART_SetConfig+0x71a>
 8006798:	f04f 0302 	mov.w	r3, #2
 800679c:	f04f 0400 	mov.w	r4, #0
 80067a0:	e003      	b.n	80067aa <UART_SetConfig+0x71a>
 80067a2:	f04f 0301 	mov.w	r3, #1
 80067a6:	f04f 0400 	mov.w	r4, #0
 80067aa:	461a      	mov	r2, r3
 80067ac:	4623      	mov	r3, r4
 80067ae:	f7fa f96d 	bl	8000a8c <__aeabi_uldivmod>
 80067b2:	4603      	mov	r3, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	4619      	mov	r1, r3
 80067b8:	4622      	mov	r2, r4
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	f04f 0400 	mov.w	r4, #0
 80067c2:	0214      	lsls	r4, r2, #8
 80067c4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067c8:	020b      	lsls	r3, r1, #8
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6852      	ldr	r2, [r2, #4]
 80067ce:	0852      	lsrs	r2, r2, #1
 80067d0:	4611      	mov	r1, r2
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	eb13 0b01 	adds.w	fp, r3, r1
 80067da:	eb44 0c02 	adc.w	ip, r4, r2
 80067de:	4658      	mov	r0, fp
 80067e0:	4661      	mov	r1, ip
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f04f 0400 	mov.w	r4, #0
 80067ea:	461a      	mov	r2, r3
 80067ec:	4623      	mov	r3, r4
 80067ee:	f7fa f94d 	bl	8000a8c <__aeabi_uldivmod>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80067f8:	e1c3      	b.n	8006b82 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d05b      	beq.n	80068ba <UART_SetConfig+0x82a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2b01      	cmp	r3, #1
 8006808:	d053      	beq.n	80068b2 <UART_SetConfig+0x822>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	2b02      	cmp	r3, #2
 8006810:	d04b      	beq.n	80068aa <UART_SetConfig+0x81a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b03      	cmp	r3, #3
 8006818:	d043      	beq.n	80068a2 <UART_SetConfig+0x812>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b04      	cmp	r3, #4
 8006820:	d03b      	beq.n	800689a <UART_SetConfig+0x80a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b05      	cmp	r3, #5
 8006828:	d033      	beq.n	8006892 <UART_SetConfig+0x802>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b06      	cmp	r3, #6
 8006830:	d02b      	beq.n	800688a <UART_SetConfig+0x7fa>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b07      	cmp	r3, #7
 8006838:	d023      	beq.n	8006882 <UART_SetConfig+0x7f2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b08      	cmp	r3, #8
 8006840:	d01b      	beq.n	800687a <UART_SetConfig+0x7ea>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	2b09      	cmp	r3, #9
 8006848:	d013      	beq.n	8006872 <UART_SetConfig+0x7e2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	2b0a      	cmp	r3, #10
 8006850:	d00b      	beq.n	800686a <UART_SetConfig+0x7da>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b0b      	cmp	r3, #11
 8006858:	d103      	bne.n	8006862 <UART_SetConfig+0x7d2>
 800685a:	4bad      	ldr	r3, [pc, #692]	; (8006b10 <UART_SetConfig+0xa80>)
 800685c:	f04f 0400 	mov.w	r4, #0
 8006860:	e02e      	b.n	80068c0 <UART_SetConfig+0x830>
 8006862:	4bac      	ldr	r3, [pc, #688]	; (8006b14 <UART_SetConfig+0xa84>)
 8006864:	f04f 0400 	mov.w	r4, #0
 8006868:	e02a      	b.n	80068c0 <UART_SetConfig+0x830>
 800686a:	4bab      	ldr	r3, [pc, #684]	; (8006b18 <UART_SetConfig+0xa88>)
 800686c:	f04f 0400 	mov.w	r4, #0
 8006870:	e026      	b.n	80068c0 <UART_SetConfig+0x830>
 8006872:	4baa      	ldr	r3, [pc, #680]	; (8006b1c <UART_SetConfig+0xa8c>)
 8006874:	f04f 0400 	mov.w	r4, #0
 8006878:	e022      	b.n	80068c0 <UART_SetConfig+0x830>
 800687a:	4ba9      	ldr	r3, [pc, #676]	; (8006b20 <UART_SetConfig+0xa90>)
 800687c:	f04f 0400 	mov.w	r4, #0
 8006880:	e01e      	b.n	80068c0 <UART_SetConfig+0x830>
 8006882:	4ba8      	ldr	r3, [pc, #672]	; (8006b24 <UART_SetConfig+0xa94>)
 8006884:	f04f 0400 	mov.w	r4, #0
 8006888:	e01a      	b.n	80068c0 <UART_SetConfig+0x830>
 800688a:	a49d      	add	r4, pc, #628	; (adr r4, 8006b00 <UART_SetConfig+0xa70>)
 800688c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006890:	e016      	b.n	80068c0 <UART_SetConfig+0x830>
 8006892:	4ba5      	ldr	r3, [pc, #660]	; (8006b28 <UART_SetConfig+0xa98>)
 8006894:	f04f 0400 	mov.w	r4, #0
 8006898:	e012      	b.n	80068c0 <UART_SetConfig+0x830>
 800689a:	4ba4      	ldr	r3, [pc, #656]	; (8006b2c <UART_SetConfig+0xa9c>)
 800689c:	f04f 0400 	mov.w	r4, #0
 80068a0:	e00e      	b.n	80068c0 <UART_SetConfig+0x830>
 80068a2:	a499      	add	r4, pc, #612	; (adr r4, 8006b08 <UART_SetConfig+0xa78>)
 80068a4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80068a8:	e00a      	b.n	80068c0 <UART_SetConfig+0x830>
 80068aa:	4ba1      	ldr	r3, [pc, #644]	; (8006b30 <UART_SetConfig+0xaa0>)
 80068ac:	f04f 0400 	mov.w	r4, #0
 80068b0:	e006      	b.n	80068c0 <UART_SetConfig+0x830>
 80068b2:	4ba0      	ldr	r3, [pc, #640]	; (8006b34 <UART_SetConfig+0xaa4>)
 80068b4:	f04f 0400 	mov.w	r4, #0
 80068b8:	e002      	b.n	80068c0 <UART_SetConfig+0x830>
 80068ba:	4b96      	ldr	r3, [pc, #600]	; (8006b14 <UART_SetConfig+0xa84>)
 80068bc:	f04f 0400 	mov.w	r4, #0
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6852      	ldr	r2, [r2, #4]
 80068c4:	0852      	lsrs	r2, r2, #1
 80068c6:	4611      	mov	r1, r2
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	eb13 0b01 	adds.w	fp, r3, r1
 80068d0:	eb44 0c02 	adc.w	ip, r4, r2
 80068d4:	4658      	mov	r0, fp
 80068d6:	4661      	mov	r1, ip
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f04f 0400 	mov.w	r4, #0
 80068e0:	461a      	mov	r2, r3
 80068e2:	4623      	mov	r3, r4
 80068e4:	f7fa f8d2 	bl	8000a8c <__aeabi_uldivmod>
 80068e8:	4603      	mov	r3, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80068ee:	e148      	b.n	8006b82 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f0:	f7fd f91e 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 80068f4:	4603      	mov	r3, r0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f04f 0100 	mov.w	r1, #0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d067      	beq.n	80069d4 <UART_SetConfig+0x944>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	2b01      	cmp	r3, #1
 800690a:	d05e      	beq.n	80069ca <UART_SetConfig+0x93a>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	2b02      	cmp	r3, #2
 8006912:	d055      	beq.n	80069c0 <UART_SetConfig+0x930>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	2b03      	cmp	r3, #3
 800691a:	d04c      	beq.n	80069b6 <UART_SetConfig+0x926>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	2b04      	cmp	r3, #4
 8006922:	d043      	beq.n	80069ac <UART_SetConfig+0x91c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	2b05      	cmp	r3, #5
 800692a:	d03a      	beq.n	80069a2 <UART_SetConfig+0x912>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2b06      	cmp	r3, #6
 8006932:	d031      	beq.n	8006998 <UART_SetConfig+0x908>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b07      	cmp	r3, #7
 800693a:	d028      	beq.n	800698e <UART_SetConfig+0x8fe>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	2b08      	cmp	r3, #8
 8006942:	d01f      	beq.n	8006984 <UART_SetConfig+0x8f4>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	2b09      	cmp	r3, #9
 800694a:	d016      	beq.n	800697a <UART_SetConfig+0x8ea>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2b0a      	cmp	r3, #10
 8006952:	d00d      	beq.n	8006970 <UART_SetConfig+0x8e0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	2b0b      	cmp	r3, #11
 800695a:	d104      	bne.n	8006966 <UART_SetConfig+0x8d6>
 800695c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006960:	f04f 0400 	mov.w	r4, #0
 8006964:	e03a      	b.n	80069dc <UART_SetConfig+0x94c>
 8006966:	f04f 0301 	mov.w	r3, #1
 800696a:	f04f 0400 	mov.w	r4, #0
 800696e:	e035      	b.n	80069dc <UART_SetConfig+0x94c>
 8006970:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006974:	f04f 0400 	mov.w	r4, #0
 8006978:	e030      	b.n	80069dc <UART_SetConfig+0x94c>
 800697a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800697e:	f04f 0400 	mov.w	r4, #0
 8006982:	e02b      	b.n	80069dc <UART_SetConfig+0x94c>
 8006984:	f04f 0320 	mov.w	r3, #32
 8006988:	f04f 0400 	mov.w	r4, #0
 800698c:	e026      	b.n	80069dc <UART_SetConfig+0x94c>
 800698e:	f04f 0310 	mov.w	r3, #16
 8006992:	f04f 0400 	mov.w	r4, #0
 8006996:	e021      	b.n	80069dc <UART_SetConfig+0x94c>
 8006998:	f04f 030c 	mov.w	r3, #12
 800699c:	f04f 0400 	mov.w	r4, #0
 80069a0:	e01c      	b.n	80069dc <UART_SetConfig+0x94c>
 80069a2:	f04f 030a 	mov.w	r3, #10
 80069a6:	f04f 0400 	mov.w	r4, #0
 80069aa:	e017      	b.n	80069dc <UART_SetConfig+0x94c>
 80069ac:	f04f 0308 	mov.w	r3, #8
 80069b0:	f04f 0400 	mov.w	r4, #0
 80069b4:	e012      	b.n	80069dc <UART_SetConfig+0x94c>
 80069b6:	f04f 0306 	mov.w	r3, #6
 80069ba:	f04f 0400 	mov.w	r4, #0
 80069be:	e00d      	b.n	80069dc <UART_SetConfig+0x94c>
 80069c0:	f04f 0304 	mov.w	r3, #4
 80069c4:	f04f 0400 	mov.w	r4, #0
 80069c8:	e008      	b.n	80069dc <UART_SetConfig+0x94c>
 80069ca:	f04f 0302 	mov.w	r3, #2
 80069ce:	f04f 0400 	mov.w	r4, #0
 80069d2:	e003      	b.n	80069dc <UART_SetConfig+0x94c>
 80069d4:	f04f 0301 	mov.w	r3, #1
 80069d8:	f04f 0400 	mov.w	r4, #0
 80069dc:	461a      	mov	r2, r3
 80069de:	4623      	mov	r3, r4
 80069e0:	f7fa f854 	bl	8000a8c <__aeabi_uldivmod>
 80069e4:	4603      	mov	r3, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	4619      	mov	r1, r3
 80069ea:	4622      	mov	r2, r4
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	f04f 0400 	mov.w	r4, #0
 80069f4:	0214      	lsls	r4, r2, #8
 80069f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80069fa:	020b      	lsls	r3, r1, #8
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6852      	ldr	r2, [r2, #4]
 8006a00:	0852      	lsrs	r2, r2, #1
 8006a02:	4611      	mov	r1, r2
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	eb13 0b01 	adds.w	fp, r3, r1
 8006a0c:	eb44 0c02 	adc.w	ip, r4, r2
 8006a10:	4658      	mov	r0, fp
 8006a12:	4661      	mov	r1, ip
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f04f 0400 	mov.w	r4, #0
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4623      	mov	r3, r4
 8006a20:	f7fa f834 	bl	8000a8c <__aeabi_uldivmod>
 8006a24:	4603      	mov	r3, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a2a:	e0aa      	b.n	8006b82 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8087 	beq.w	8006b44 <UART_SetConfig+0xab4>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d05b      	beq.n	8006af6 <UART_SetConfig+0xa66>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d052      	beq.n	8006aec <UART_SetConfig+0xa5c>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d04a      	beq.n	8006ae4 <UART_SetConfig+0xa54>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d041      	beq.n	8006ada <UART_SetConfig+0xa4a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d039      	beq.n	8006ad2 <UART_SetConfig+0xa42>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d031      	beq.n	8006aca <UART_SetConfig+0xa3a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d028      	beq.n	8006ac0 <UART_SetConfig+0xa30>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d01f      	beq.n	8006ab6 <UART_SetConfig+0xa26>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	2b09      	cmp	r3, #9
 8006a7c:	d016      	beq.n	8006aac <UART_SetConfig+0xa1c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	2b0a      	cmp	r3, #10
 8006a84:	d00d      	beq.n	8006aa2 <UART_SetConfig+0xa12>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	2b0b      	cmp	r3, #11
 8006a8c:	d104      	bne.n	8006a98 <UART_SetConfig+0xa08>
 8006a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a92:	f04f 0400 	mov.w	r4, #0
 8006a96:	e059      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006a98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006a9c:	f04f 0400 	mov.w	r4, #0
 8006aa0:	e054      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	e04f      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ab0:	f04f 0400 	mov.w	r4, #0
 8006ab4:	e04a      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006ab6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006aba:	f04f 0400 	mov.w	r4, #0
 8006abe:	e045      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006ac0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ac4:	f04f 0400 	mov.w	r4, #0
 8006ac8:	e040      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <UART_SetConfig+0xaa8>)
 8006acc:	f04f 0400 	mov.w	r4, #0
 8006ad0:	e03c      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006ad2:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <UART_SetConfig+0xaac>)
 8006ad4:	f04f 0400 	mov.w	r4, #0
 8006ad8:	e038      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006ada:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ade:	f04f 0400 	mov.w	r4, #0
 8006ae2:	e033      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006ae4:	4b16      	ldr	r3, [pc, #88]	; (8006b40 <UART_SetConfig+0xab0>)
 8006ae6:	f04f 0400 	mov.w	r4, #0
 8006aea:	e02f      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006aec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006af0:	f04f 0400 	mov.w	r4, #0
 8006af4:	e02a      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006afa:	f04f 0400 	mov.w	r4, #0
 8006afe:	e025      	b.n	8006b4c <UART_SetConfig+0xabc>
 8006b00:	14585500 	.word	0x14585500
 8006b04:	00000000 	.word	0x00000000
 8006b08:	28b0aa00 	.word	0x28b0aa00
 8006b0c:	00000000 	.word	0x00000000
 8006b10:	00f42400 	.word	0x00f42400
 8006b14:	f4240000 	.word	0xf4240000
 8006b18:	01e84800 	.word	0x01e84800
 8006b1c:	03d09000 	.word	0x03d09000
 8006b20:	07a12000 	.word	0x07a12000
 8006b24:	0f424000 	.word	0x0f424000
 8006b28:	186a0000 	.word	0x186a0000
 8006b2c:	1e848000 	.word	0x1e848000
 8006b30:	3d090000 	.word	0x3d090000
 8006b34:	7a120000 	.word	0x7a120000
 8006b38:	000aaa00 	.word	0x000aaa00
 8006b3c:	000ccc00 	.word	0x000ccc00
 8006b40:	00155500 	.word	0x00155500
 8006b44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006b48:	f04f 0400 	mov.w	r4, #0
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6852      	ldr	r2, [r2, #4]
 8006b50:	0852      	lsrs	r2, r2, #1
 8006b52:	4611      	mov	r1, r2
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	eb13 0b01 	adds.w	fp, r3, r1
 8006b5c:	eb44 0c02 	adc.w	ip, r4, r2
 8006b60:	4658      	mov	r0, fp
 8006b62:	4661      	mov	r1, ip
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f04f 0400 	mov.w	r4, #0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4623      	mov	r3, r4
 8006b70:	f7f9 ff8c 	bl	8000a8c <__aeabi_uldivmod>
 8006b74:	4603      	mov	r3, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8006b7a:	e002      	b.n	8006b82 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	74fb      	strb	r3, [r7, #19]
            break;
 8006b80:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b88:	d309      	bcc.n	8006b9e <UART_SetConfig+0xb0e>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b90:	d205      	bcs.n	8006b9e <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	f000 bc0f 	b.w	80073bc <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	74fb      	strb	r3, [r7, #19]
 8006ba2:	f000 bc0b 	b.w	80073bc <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bae:	f040 81ff 	bne.w	8006fb0 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 8006bb2:	7efb      	ldrb	r3, [r7, #27]
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	f200 81db 	bhi.w	8006f70 <UART_SetConfig+0xee0>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <UART_SetConfig+0xb30>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006c9b 	.word	0x08006c9b
 8006bc8:	08006d51 	.word	0x08006d51
 8006bcc:	08006f71 	.word	0x08006f71
 8006bd0:	08006df9 	.word	0x08006df9
 8006bd4:	08006f71 	.word	0x08006f71
 8006bd8:	08006f71 	.word	0x08006f71
 8006bdc:	08006f71 	.word	0x08006f71
 8006be0:	08006eaf 	.word	0x08006eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006be4:	f7fd f83a 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8006be8:	4602      	mov	r2, r0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d044      	beq.n	8006c7c <UART_SetConfig+0xbec>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d03e      	beq.n	8006c78 <UART_SetConfig+0xbe8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d038      	beq.n	8006c74 <UART_SetConfig+0xbe4>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d032      	beq.n	8006c70 <UART_SetConfig+0xbe0>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d02c      	beq.n	8006c6c <UART_SetConfig+0xbdc>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d026      	beq.n	8006c68 <UART_SetConfig+0xbd8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	2b06      	cmp	r3, #6
 8006c20:	d020      	beq.n	8006c64 <UART_SetConfig+0xbd4>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	2b07      	cmp	r3, #7
 8006c28:	d01a      	beq.n	8006c60 <UART_SetConfig+0xbd0>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d014      	beq.n	8006c5c <UART_SetConfig+0xbcc>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	2b09      	cmp	r3, #9
 8006c38:	d00e      	beq.n	8006c58 <UART_SetConfig+0xbc8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	2b0a      	cmp	r3, #10
 8006c40:	d008      	beq.n	8006c54 <UART_SetConfig+0xbc4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	2b0b      	cmp	r3, #11
 8006c48:	d102      	bne.n	8006c50 <UART_SetConfig+0xbc0>
 8006c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c4e:	e016      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e014      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	e012      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c58:	2340      	movs	r3, #64	; 0x40
 8006c5a:	e010      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	e00e      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c60:	2310      	movs	r3, #16
 8006c62:	e00c      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c64:	230c      	movs	r3, #12
 8006c66:	e00a      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c68:	230a      	movs	r3, #10
 8006c6a:	e008      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	e006      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c70:	2306      	movs	r3, #6
 8006c72:	e004      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c74:	2304      	movs	r3, #4
 8006c76:	e002      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e000      	b.n	8006c7e <UART_SetConfig+0xbee>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c82:	005a      	lsls	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	441a      	add	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c98:	e16d      	b.n	8006f76 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9a:	f7fc fff5 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d044      	beq.n	8006d32 <UART_SetConfig+0xca2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d03e      	beq.n	8006d2e <UART_SetConfig+0xc9e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d038      	beq.n	8006d2a <UART_SetConfig+0xc9a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d032      	beq.n	8006d26 <UART_SetConfig+0xc96>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d02c      	beq.n	8006d22 <UART_SetConfig+0xc92>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	2b05      	cmp	r3, #5
 8006cce:	d026      	beq.n	8006d1e <UART_SetConfig+0xc8e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	2b06      	cmp	r3, #6
 8006cd6:	d020      	beq.n	8006d1a <UART_SetConfig+0xc8a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	2b07      	cmp	r3, #7
 8006cde:	d01a      	beq.n	8006d16 <UART_SetConfig+0xc86>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d014      	beq.n	8006d12 <UART_SetConfig+0xc82>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d00e      	beq.n	8006d0e <UART_SetConfig+0xc7e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	2b0a      	cmp	r3, #10
 8006cf6:	d008      	beq.n	8006d0a <UART_SetConfig+0xc7a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	2b0b      	cmp	r3, #11
 8006cfe:	d102      	bne.n	8006d06 <UART_SetConfig+0xc76>
 8006d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d04:	e016      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e014      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d0a:	2380      	movs	r3, #128	; 0x80
 8006d0c:	e012      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	e010      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d12:	2320      	movs	r3, #32
 8006d14:	e00e      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d16:	2310      	movs	r3, #16
 8006d18:	e00c      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d1a:	230c      	movs	r3, #12
 8006d1c:	e00a      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d1e:	230a      	movs	r3, #10
 8006d20:	e008      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d22:	2308      	movs	r3, #8
 8006d24:	e006      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d26:	2306      	movs	r3, #6
 8006d28:	e004      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d2a:	2304      	movs	r3, #4
 8006d2c:	e002      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e000      	b.n	8006d34 <UART_SetConfig+0xca4>
 8006d32:	2301      	movs	r3, #1
 8006d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d38:	005a      	lsls	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	441a      	add	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006d4e:	e112      	b.n	8006f76 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d043      	beq.n	8006de0 <UART_SetConfig+0xd50>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d03d      	beq.n	8006ddc <UART_SetConfig+0xd4c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d037      	beq.n	8006dd8 <UART_SetConfig+0xd48>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d031      	beq.n	8006dd4 <UART_SetConfig+0xd44>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d02b      	beq.n	8006dd0 <UART_SetConfig+0xd40>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	d025      	beq.n	8006dcc <UART_SetConfig+0xd3c>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2b06      	cmp	r3, #6
 8006d86:	d01f      	beq.n	8006dc8 <UART_SetConfig+0xd38>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	2b07      	cmp	r3, #7
 8006d8e:	d019      	beq.n	8006dc4 <UART_SetConfig+0xd34>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d013      	beq.n	8006dc0 <UART_SetConfig+0xd30>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	d00d      	beq.n	8006dbc <UART_SetConfig+0xd2c>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b0a      	cmp	r3, #10
 8006da6:	d007      	beq.n	8006db8 <UART_SetConfig+0xd28>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b0b      	cmp	r3, #11
 8006dae:	d101      	bne.n	8006db4 <UART_SetConfig+0xd24>
 8006db0:	4b8c      	ldr	r3, [pc, #560]	; (8006fe4 <UART_SetConfig+0xf54>)
 8006db2:	e016      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006db4:	4b8c      	ldr	r3, [pc, #560]	; (8006fe8 <UART_SetConfig+0xf58>)
 8006db6:	e014      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006db8:	4b8c      	ldr	r3, [pc, #560]	; (8006fec <UART_SetConfig+0xf5c>)
 8006dba:	e012      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006dbc:	4b8c      	ldr	r3, [pc, #560]	; (8006ff0 <UART_SetConfig+0xf60>)
 8006dbe:	e010      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006dc0:	4b8c      	ldr	r3, [pc, #560]	; (8006ff4 <UART_SetConfig+0xf64>)
 8006dc2:	e00e      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006dc4:	4b8c      	ldr	r3, [pc, #560]	; (8006ff8 <UART_SetConfig+0xf68>)
 8006dc6:	e00c      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006dc8:	4b8c      	ldr	r3, [pc, #560]	; (8006ffc <UART_SetConfig+0xf6c>)
 8006dca:	e00a      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006dcc:	4b8c      	ldr	r3, [pc, #560]	; (8007000 <UART_SetConfig+0xf70>)
 8006dce:	e008      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006dd0:	4b8c      	ldr	r3, [pc, #560]	; (8007004 <UART_SetConfig+0xf74>)
 8006dd2:	e006      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006dd4:	4b8c      	ldr	r3, [pc, #560]	; (8007008 <UART_SetConfig+0xf78>)
 8006dd6:	e004      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006dd8:	4b8c      	ldr	r3, [pc, #560]	; (800700c <UART_SetConfig+0xf7c>)
 8006dda:	e002      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006ddc:	4b8c      	ldr	r3, [pc, #560]	; (8007010 <UART_SetConfig+0xf80>)
 8006dde:	e000      	b.n	8006de2 <UART_SetConfig+0xd52>
 8006de0:	4b81      	ldr	r3, [pc, #516]	; (8006fe8 <UART_SetConfig+0xf58>)
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6852      	ldr	r2, [r2, #4]
 8006de6:	0852      	lsrs	r2, r2, #1
 8006de8:	441a      	add	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006df6:	e0be      	b.n	8006f76 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df8:	f7fc fe9a 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d044      	beq.n	8006e90 <UART_SetConfig+0xe00>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d03e      	beq.n	8006e8c <UART_SetConfig+0xdfc>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d038      	beq.n	8006e88 <UART_SetConfig+0xdf8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d032      	beq.n	8006e84 <UART_SetConfig+0xdf4>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d02c      	beq.n	8006e80 <UART_SetConfig+0xdf0>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d026      	beq.n	8006e7c <UART_SetConfig+0xdec>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d020      	beq.n	8006e78 <UART_SetConfig+0xde8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	2b07      	cmp	r3, #7
 8006e3c:	d01a      	beq.n	8006e74 <UART_SetConfig+0xde4>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d014      	beq.n	8006e70 <UART_SetConfig+0xde0>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	2b09      	cmp	r3, #9
 8006e4c:	d00e      	beq.n	8006e6c <UART_SetConfig+0xddc>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	2b0a      	cmp	r3, #10
 8006e54:	d008      	beq.n	8006e68 <UART_SetConfig+0xdd8>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	2b0b      	cmp	r3, #11
 8006e5c:	d102      	bne.n	8006e64 <UART_SetConfig+0xdd4>
 8006e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e62:	e016      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e014      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e68:	2380      	movs	r3, #128	; 0x80
 8006e6a:	e012      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	e010      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e70:	2320      	movs	r3, #32
 8006e72:	e00e      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e74:	2310      	movs	r3, #16
 8006e76:	e00c      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	e00a      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e7c:	230a      	movs	r3, #10
 8006e7e:	e008      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e80:	2308      	movs	r3, #8
 8006e82:	e006      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e84:	2306      	movs	r3, #6
 8006e86:	e004      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	e002      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e000      	b.n	8006e92 <UART_SetConfig+0xe02>
 8006e90:	2301      	movs	r3, #1
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	005a      	lsls	r2, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	441a      	add	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006eac:	e063      	b.n	8006f76 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d04f      	beq.n	8006f56 <UART_SetConfig+0xec6>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d048      	beq.n	8006f50 <UART_SetConfig+0xec0>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d041      	beq.n	8006f4a <UART_SetConfig+0xeba>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d03a      	beq.n	8006f44 <UART_SetConfig+0xeb4>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d033      	beq.n	8006f3e <UART_SetConfig+0xeae>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d02c      	beq.n	8006f38 <UART_SetConfig+0xea8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	2b06      	cmp	r3, #6
 8006ee4:	d025      	beq.n	8006f32 <UART_SetConfig+0xea2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	2b07      	cmp	r3, #7
 8006eec:	d01e      	beq.n	8006f2c <UART_SetConfig+0xe9c>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d017      	beq.n	8006f26 <UART_SetConfig+0xe96>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	2b09      	cmp	r3, #9
 8006efc:	d010      	beq.n	8006f20 <UART_SetConfig+0xe90>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	2b0a      	cmp	r3, #10
 8006f04:	d009      	beq.n	8006f1a <UART_SetConfig+0xe8a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	2b0b      	cmp	r3, #11
 8006f0c:	d102      	bne.n	8006f14 <UART_SetConfig+0xe84>
 8006f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f12:	e022      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f18:	e01f      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f1e:	e01c      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f24:	e019      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f2a:	e016      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f30:	e013      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f32:	f241 5354 	movw	r3, #5460	; 0x1554
 8006f36:	e010      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f38:	f641 1398 	movw	r3, #6552	; 0x1998
 8006f3c:	e00d      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f42:	e00a      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f44:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006f48:	e007      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f4e:	e004      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f54:	e001      	b.n	8006f5a <UART_SetConfig+0xeca>
 8006f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6852      	ldr	r2, [r2, #4]
 8006f5e:	0852      	lsrs	r2, r2, #1
 8006f60:	441a      	add	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f6e:	e002      	b.n	8006f76 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	74fb      	strb	r3, [r7, #19]
        break;
 8006f74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b0f      	cmp	r3, #15
 8006f7a:	d916      	bls.n	8006faa <UART_SetConfig+0xf1a>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f82:	d212      	bcs.n	8006faa <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f023 030f 	bic.w	r3, r3, #15
 8006f8c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	897b      	ldrh	r3, [r7, #10]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	897a      	ldrh	r2, [r7, #10]
 8006fa6:	60da      	str	r2, [r3, #12]
 8006fa8:	e208      	b.n	80073bc <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	74fb      	strb	r3, [r7, #19]
 8006fae:	e205      	b.n	80073bc <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8006fb0:	7efb      	ldrb	r3, [r7, #27]
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	f200 81f1 	bhi.w	800739a <UART_SetConfig+0x130a>
 8006fb8:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <UART_SetConfig+0xf30>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08007015 	.word	0x08007015
 8006fc4:	080070c9 	.word	0x080070c9
 8006fc8:	0800717d 	.word	0x0800717d
 8006fcc:	0800739b 	.word	0x0800739b
 8006fd0:	08007227 	.word	0x08007227
 8006fd4:	0800739b 	.word	0x0800739b
 8006fd8:	0800739b 	.word	0x0800739b
 8006fdc:	0800739b 	.word	0x0800739b
 8006fe0:	080072db 	.word	0x080072db
 8006fe4:	0001e848 	.word	0x0001e848
 8006fe8:	01e84800 	.word	0x01e84800
 8006fec:	0003d090 	.word	0x0003d090
 8006ff0:	0007a120 	.word	0x0007a120
 8006ff4:	000f4240 	.word	0x000f4240
 8006ff8:	001e8480 	.word	0x001e8480
 8006ffc:	0028b0aa 	.word	0x0028b0aa
 8007000:	0030d400 	.word	0x0030d400
 8007004:	003d0900 	.word	0x003d0900
 8007008:	00516154 	.word	0x00516154
 800700c:	007a1200 	.word	0x007a1200
 8007010:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007014:	f7fc fe22 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8007018:	4602      	mov	r2, r0
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b00      	cmp	r3, #0
 8007020:	d044      	beq.n	80070ac <UART_SetConfig+0x101c>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	2b01      	cmp	r3, #1
 8007028:	d03e      	beq.n	80070a8 <UART_SetConfig+0x1018>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	2b02      	cmp	r3, #2
 8007030:	d038      	beq.n	80070a4 <UART_SetConfig+0x1014>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	2b03      	cmp	r3, #3
 8007038:	d032      	beq.n	80070a0 <UART_SetConfig+0x1010>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	2b04      	cmp	r3, #4
 8007040:	d02c      	beq.n	800709c <UART_SetConfig+0x100c>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	2b05      	cmp	r3, #5
 8007048:	d026      	beq.n	8007098 <UART_SetConfig+0x1008>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	2b06      	cmp	r3, #6
 8007050:	d020      	beq.n	8007094 <UART_SetConfig+0x1004>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	2b07      	cmp	r3, #7
 8007058:	d01a      	beq.n	8007090 <UART_SetConfig+0x1000>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	2b08      	cmp	r3, #8
 8007060:	d014      	beq.n	800708c <UART_SetConfig+0xffc>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	2b09      	cmp	r3, #9
 8007068:	d00e      	beq.n	8007088 <UART_SetConfig+0xff8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	2b0a      	cmp	r3, #10
 8007070:	d008      	beq.n	8007084 <UART_SetConfig+0xff4>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	2b0b      	cmp	r3, #11
 8007078:	d102      	bne.n	8007080 <UART_SetConfig+0xff0>
 800707a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800707e:	e016      	b.n	80070ae <UART_SetConfig+0x101e>
 8007080:	2301      	movs	r3, #1
 8007082:	e014      	b.n	80070ae <UART_SetConfig+0x101e>
 8007084:	2380      	movs	r3, #128	; 0x80
 8007086:	e012      	b.n	80070ae <UART_SetConfig+0x101e>
 8007088:	2340      	movs	r3, #64	; 0x40
 800708a:	e010      	b.n	80070ae <UART_SetConfig+0x101e>
 800708c:	2320      	movs	r3, #32
 800708e:	e00e      	b.n	80070ae <UART_SetConfig+0x101e>
 8007090:	2310      	movs	r3, #16
 8007092:	e00c      	b.n	80070ae <UART_SetConfig+0x101e>
 8007094:	230c      	movs	r3, #12
 8007096:	e00a      	b.n	80070ae <UART_SetConfig+0x101e>
 8007098:	230a      	movs	r3, #10
 800709a:	e008      	b.n	80070ae <UART_SetConfig+0x101e>
 800709c:	2308      	movs	r3, #8
 800709e:	e006      	b.n	80070ae <UART_SetConfig+0x101e>
 80070a0:	2306      	movs	r3, #6
 80070a2:	e004      	b.n	80070ae <UART_SetConfig+0x101e>
 80070a4:	2304      	movs	r3, #4
 80070a6:	e002      	b.n	80070ae <UART_SetConfig+0x101e>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e000      	b.n	80070ae <UART_SetConfig+0x101e>
 80070ac:	2301      	movs	r3, #1
 80070ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	085b      	lsrs	r3, r3, #1
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80070c6:	e16b      	b.n	80073a0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c8:	f7fc fdde 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 80070cc:	4602      	mov	r2, r0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d044      	beq.n	8007160 <UART_SetConfig+0x10d0>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d03e      	beq.n	800715c <UART_SetConfig+0x10cc>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d038      	beq.n	8007158 <UART_SetConfig+0x10c8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d032      	beq.n	8007154 <UART_SetConfig+0x10c4>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d02c      	beq.n	8007150 <UART_SetConfig+0x10c0>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	d026      	beq.n	800714c <UART_SetConfig+0x10bc>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	2b06      	cmp	r3, #6
 8007104:	d020      	beq.n	8007148 <UART_SetConfig+0x10b8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b07      	cmp	r3, #7
 800710c:	d01a      	beq.n	8007144 <UART_SetConfig+0x10b4>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b08      	cmp	r3, #8
 8007114:	d014      	beq.n	8007140 <UART_SetConfig+0x10b0>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	2b09      	cmp	r3, #9
 800711c:	d00e      	beq.n	800713c <UART_SetConfig+0x10ac>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b0a      	cmp	r3, #10
 8007124:	d008      	beq.n	8007138 <UART_SetConfig+0x10a8>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b0b      	cmp	r3, #11
 800712c:	d102      	bne.n	8007134 <UART_SetConfig+0x10a4>
 800712e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007132:	e016      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007134:	2301      	movs	r3, #1
 8007136:	e014      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	e012      	b.n	8007162 <UART_SetConfig+0x10d2>
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	e010      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007140:	2320      	movs	r3, #32
 8007142:	e00e      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007144:	2310      	movs	r3, #16
 8007146:	e00c      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007148:	230c      	movs	r3, #12
 800714a:	e00a      	b.n	8007162 <UART_SetConfig+0x10d2>
 800714c:	230a      	movs	r3, #10
 800714e:	e008      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007150:	2308      	movs	r3, #8
 8007152:	e006      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007154:	2306      	movs	r3, #6
 8007156:	e004      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007158:	2304      	movs	r3, #4
 800715a:	e002      	b.n	8007162 <UART_SetConfig+0x10d2>
 800715c:	2302      	movs	r3, #2
 800715e:	e000      	b.n	8007162 <UART_SetConfig+0x10d2>
 8007160:	2301      	movs	r3, #1
 8007162:	fbb2 f2f3 	udiv	r2, r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	fbb2 f3f3 	udiv	r3, r2, r3
 8007176:	b29b      	uxth	r3, r3
 8007178:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800717a:	e111      	b.n	80073a0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d044      	beq.n	800720e <UART_SetConfig+0x117e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b01      	cmp	r3, #1
 800718a:	d03e      	beq.n	800720a <UART_SetConfig+0x117a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	2b02      	cmp	r3, #2
 8007192:	d038      	beq.n	8007206 <UART_SetConfig+0x1176>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	2b03      	cmp	r3, #3
 800719a:	d032      	beq.n	8007202 <UART_SetConfig+0x1172>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d02c      	beq.n	80071fe <UART_SetConfig+0x116e>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2b05      	cmp	r3, #5
 80071aa:	d026      	beq.n	80071fa <UART_SetConfig+0x116a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	2b06      	cmp	r3, #6
 80071b2:	d020      	beq.n	80071f6 <UART_SetConfig+0x1166>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	2b07      	cmp	r3, #7
 80071ba:	d01a      	beq.n	80071f2 <UART_SetConfig+0x1162>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d014      	beq.n	80071ee <UART_SetConfig+0x115e>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d00e      	beq.n	80071ea <UART_SetConfig+0x115a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	2b0a      	cmp	r3, #10
 80071d2:	d008      	beq.n	80071e6 <UART_SetConfig+0x1156>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	2b0b      	cmp	r3, #11
 80071da:	d102      	bne.n	80071e2 <UART_SetConfig+0x1152>
 80071dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80071e0:	e016      	b.n	8007210 <UART_SetConfig+0x1180>
 80071e2:	4b80      	ldr	r3, [pc, #512]	; (80073e4 <UART_SetConfig+0x1354>)
 80071e4:	e014      	b.n	8007210 <UART_SetConfig+0x1180>
 80071e6:	4b80      	ldr	r3, [pc, #512]	; (80073e8 <UART_SetConfig+0x1358>)
 80071e8:	e012      	b.n	8007210 <UART_SetConfig+0x1180>
 80071ea:	4b80      	ldr	r3, [pc, #512]	; (80073ec <UART_SetConfig+0x135c>)
 80071ec:	e010      	b.n	8007210 <UART_SetConfig+0x1180>
 80071ee:	4b80      	ldr	r3, [pc, #512]	; (80073f0 <UART_SetConfig+0x1360>)
 80071f0:	e00e      	b.n	8007210 <UART_SetConfig+0x1180>
 80071f2:	4b80      	ldr	r3, [pc, #512]	; (80073f4 <UART_SetConfig+0x1364>)
 80071f4:	e00c      	b.n	8007210 <UART_SetConfig+0x1180>
 80071f6:	4b80      	ldr	r3, [pc, #512]	; (80073f8 <UART_SetConfig+0x1368>)
 80071f8:	e00a      	b.n	8007210 <UART_SetConfig+0x1180>
 80071fa:	4b80      	ldr	r3, [pc, #512]	; (80073fc <UART_SetConfig+0x136c>)
 80071fc:	e008      	b.n	8007210 <UART_SetConfig+0x1180>
 80071fe:	4b80      	ldr	r3, [pc, #512]	; (8007400 <UART_SetConfig+0x1370>)
 8007200:	e006      	b.n	8007210 <UART_SetConfig+0x1180>
 8007202:	4b80      	ldr	r3, [pc, #512]	; (8007404 <UART_SetConfig+0x1374>)
 8007204:	e004      	b.n	8007210 <UART_SetConfig+0x1180>
 8007206:	4b80      	ldr	r3, [pc, #512]	; (8007408 <UART_SetConfig+0x1378>)
 8007208:	e002      	b.n	8007210 <UART_SetConfig+0x1180>
 800720a:	4b80      	ldr	r3, [pc, #512]	; (800740c <UART_SetConfig+0x137c>)
 800720c:	e000      	b.n	8007210 <UART_SetConfig+0x1180>
 800720e:	4b75      	ldr	r3, [pc, #468]	; (80073e4 <UART_SetConfig+0x1354>)
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6852      	ldr	r2, [r2, #4]
 8007214:	0852      	lsrs	r2, r2, #1
 8007216:	441a      	add	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	b29b      	uxth	r3, r3
 8007222:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8007224:	e0bc      	b.n	80073a0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007226:	f7fc fc83 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 800722a:	4602      	mov	r2, r0
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d044      	beq.n	80072be <UART_SetConfig+0x122e>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	2b01      	cmp	r3, #1
 800723a:	d03e      	beq.n	80072ba <UART_SetConfig+0x122a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	2b02      	cmp	r3, #2
 8007242:	d038      	beq.n	80072b6 <UART_SetConfig+0x1226>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	2b03      	cmp	r3, #3
 800724a:	d032      	beq.n	80072b2 <UART_SetConfig+0x1222>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	2b04      	cmp	r3, #4
 8007252:	d02c      	beq.n	80072ae <UART_SetConfig+0x121e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	2b05      	cmp	r3, #5
 800725a:	d026      	beq.n	80072aa <UART_SetConfig+0x121a>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b06      	cmp	r3, #6
 8007262:	d020      	beq.n	80072a6 <UART_SetConfig+0x1216>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	2b07      	cmp	r3, #7
 800726a:	d01a      	beq.n	80072a2 <UART_SetConfig+0x1212>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b08      	cmp	r3, #8
 8007272:	d014      	beq.n	800729e <UART_SetConfig+0x120e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	2b09      	cmp	r3, #9
 800727a:	d00e      	beq.n	800729a <UART_SetConfig+0x120a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b0a      	cmp	r3, #10
 8007282:	d008      	beq.n	8007296 <UART_SetConfig+0x1206>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b0b      	cmp	r3, #11
 800728a:	d102      	bne.n	8007292 <UART_SetConfig+0x1202>
 800728c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007290:	e016      	b.n	80072c0 <UART_SetConfig+0x1230>
 8007292:	2301      	movs	r3, #1
 8007294:	e014      	b.n	80072c0 <UART_SetConfig+0x1230>
 8007296:	2380      	movs	r3, #128	; 0x80
 8007298:	e012      	b.n	80072c0 <UART_SetConfig+0x1230>
 800729a:	2340      	movs	r3, #64	; 0x40
 800729c:	e010      	b.n	80072c0 <UART_SetConfig+0x1230>
 800729e:	2320      	movs	r3, #32
 80072a0:	e00e      	b.n	80072c0 <UART_SetConfig+0x1230>
 80072a2:	2310      	movs	r3, #16
 80072a4:	e00c      	b.n	80072c0 <UART_SetConfig+0x1230>
 80072a6:	230c      	movs	r3, #12
 80072a8:	e00a      	b.n	80072c0 <UART_SetConfig+0x1230>
 80072aa:	230a      	movs	r3, #10
 80072ac:	e008      	b.n	80072c0 <UART_SetConfig+0x1230>
 80072ae:	2308      	movs	r3, #8
 80072b0:	e006      	b.n	80072c0 <UART_SetConfig+0x1230>
 80072b2:	2306      	movs	r3, #6
 80072b4:	e004      	b.n	80072c0 <UART_SetConfig+0x1230>
 80072b6:	2304      	movs	r3, #4
 80072b8:	e002      	b.n	80072c0 <UART_SetConfig+0x1230>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e000      	b.n	80072c0 <UART_SetConfig+0x1230>
 80072be:	2301      	movs	r3, #1
 80072c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	441a      	add	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80072d8:	e062      	b.n	80073a0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d04e      	beq.n	8007380 <UART_SetConfig+0x12f0>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d047      	beq.n	800737a <UART_SetConfig+0x12ea>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d040      	beq.n	8007374 <UART_SetConfig+0x12e4>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d039      	beq.n	800736e <UART_SetConfig+0x12de>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d032      	beq.n	8007368 <UART_SetConfig+0x12d8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	2b05      	cmp	r3, #5
 8007308:	d02b      	beq.n	8007362 <UART_SetConfig+0x12d2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	2b06      	cmp	r3, #6
 8007310:	d024      	beq.n	800735c <UART_SetConfig+0x12cc>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	2b07      	cmp	r3, #7
 8007318:	d01d      	beq.n	8007356 <UART_SetConfig+0x12c6>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	2b08      	cmp	r3, #8
 8007320:	d016      	beq.n	8007350 <UART_SetConfig+0x12c0>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	2b09      	cmp	r3, #9
 8007328:	d00f      	beq.n	800734a <UART_SetConfig+0x12ba>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b0a      	cmp	r3, #10
 8007330:	d008      	beq.n	8007344 <UART_SetConfig+0x12b4>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	2b0b      	cmp	r3, #11
 8007338:	d101      	bne.n	800733e <UART_SetConfig+0x12ae>
 800733a:	2380      	movs	r3, #128	; 0x80
 800733c:	e022      	b.n	8007384 <UART_SetConfig+0x12f4>
 800733e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007342:	e01f      	b.n	8007384 <UART_SetConfig+0x12f4>
 8007344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007348:	e01c      	b.n	8007384 <UART_SetConfig+0x12f4>
 800734a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800734e:	e019      	b.n	8007384 <UART_SetConfig+0x12f4>
 8007350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007354:	e016      	b.n	8007384 <UART_SetConfig+0x12f4>
 8007356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800735a:	e013      	b.n	8007384 <UART_SetConfig+0x12f4>
 800735c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007360:	e010      	b.n	8007384 <UART_SetConfig+0x12f4>
 8007362:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007366:	e00d      	b.n	8007384 <UART_SetConfig+0x12f4>
 8007368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800736c:	e00a      	b.n	8007384 <UART_SetConfig+0x12f4>
 800736e:	f241 5355 	movw	r3, #5461	; 0x1555
 8007372:	e007      	b.n	8007384 <UART_SetConfig+0x12f4>
 8007374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007378:	e004      	b.n	8007384 <UART_SetConfig+0x12f4>
 800737a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800737e:	e001      	b.n	8007384 <UART_SetConfig+0x12f4>
 8007380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6852      	ldr	r2, [r2, #4]
 8007388:	0852      	lsrs	r2, r2, #1
 800738a:	441a      	add	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	b29b      	uxth	r3, r3
 8007396:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8007398:	e002      	b.n	80073a0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	74fb      	strb	r3, [r7, #19]
        break;
 800739e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	d908      	bls.n	80073b8 <UART_SetConfig+0x1328>
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ac:	d204      	bcs.n	80073b8 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	60da      	str	r2, [r3, #12]
 80073b6:	e001      	b.n	80073bc <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80073d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80073e4:	00f42400 	.word	0x00f42400
 80073e8:	0001e848 	.word	0x0001e848
 80073ec:	0003d090 	.word	0x0003d090
 80073f0:	0007a120 	.word	0x0007a120
 80073f4:	000f4240 	.word	0x000f4240
 80073f8:	00145855 	.word	0x00145855
 80073fc:	00186a00 	.word	0x00186a00
 8007400:	001e8480 	.word	0x001e8480
 8007404:	0028b0aa 	.word	0x0028b0aa
 8007408:	003d0900 	.word	0x003d0900
 800740c:	007a1200 	.word	0x007a1200

08007410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	f003 0310 	and.w	r3, r3, #16
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01a      	beq.n	8007526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800750e:	d10a      	bne.n	8007526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af02      	add	r7, sp, #8
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007564:	f7fb f83e 	bl	80025e4 <HAL_GetTick>
 8007568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d10e      	bne.n	8007596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f82c 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e022      	b.n	80075dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d10e      	bne.n	80075c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f816 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e00c      	b.n	80075dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f4:	e02c      	b.n	8007650 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d028      	beq.n	8007650 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fe:	f7fa fff1 	bl	80025e4 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	429a      	cmp	r2, r3
 800760c:	d302      	bcc.n	8007614 <UART_WaitOnFlagUntilTimeout+0x30>
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11d      	bne.n	8007650 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007622:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0201 	bic.w	r2, r2, #1
 8007632:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2220      	movs	r2, #32
 8007640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e00f      	b.n	8007670 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69da      	ldr	r2, [r3, #28]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4013      	ands	r3, r2
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	429a      	cmp	r2, r3
 800765e:	bf0c      	ite	eq
 8007660:	2301      	moveq	r3, #1
 8007662:	2300      	movne	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	429a      	cmp	r2, r3
 800766c:	d0c3      	beq.n	80075f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800768e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800769e:	f023 0301 	bic.w	r3, r3, #1
 80076a2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7f9 ff79 	bl	80015d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007700:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fe fca5 	bl	8006060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800772c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007734:	2b22      	cmp	r3, #34	; 0x22
 8007736:	d13b      	bne.n	80077b0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800773e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007740:	89bb      	ldrh	r3, [r7, #12]
 8007742:	b2d9      	uxtb	r1, r3
 8007744:	89fb      	ldrh	r3, [r7, #14]
 8007746:	b2da      	uxtb	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774c:	400a      	ands	r2, r1
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d124      	bne.n	80077c4 <UART_RxISR_8BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007788:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7f9 ff29 	bl	8001600 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077ae:	e009      	b.n	80077c4 <UART_RxISR_8BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	8b1b      	ldrh	r3, [r3, #24]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0208 	orr.w	r2, r2, #8
 80077c0:	b292      	uxth	r2, r2
 80077c2:	831a      	strh	r2, [r3, #24]
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e2:	2b22      	cmp	r3, #34	; 0x22
 80077e4:	d13b      	bne.n	800785e <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077ec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80077f4:	89ba      	ldrh	r2, [r7, #12]
 80077f6:	89fb      	ldrh	r3, [r7, #14]
 80077f8:	4013      	ands	r3, r2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007804:	1c9a      	adds	r2, r3, #2
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007822:	b29b      	uxth	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d124      	bne.n	8007872 <UART_RxISR_16BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007836:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0201 	bic.w	r2, r2, #1
 8007846:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7f9 fed2 	bl	8001600 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800785c:	e009      	b.n	8007872 <UART_RxISR_16BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	8b1b      	ldrh	r3, [r3, #24]
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0208 	orr.w	r2, r2, #8
 800786e:	b292      	uxth	r2, r2
 8007870:	831a      	strh	r2, [r3, #24]
}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800788a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007892:	2b22      	cmp	r3, #34	; 0x22
 8007894:	d168      	bne.n	8007968 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800789c:	81fb      	strh	r3, [r7, #14]
 800789e:	e03f      	b.n	8007920 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80078a6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078a8:	893b      	ldrh	r3, [r7, #8]
 80078aa:	b2d9      	uxtb	r1, r3
 80078ac:	89bb      	ldrh	r3, [r7, #12]
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b4:	400a      	ands	r2, r1
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d11b      	bne.n	800791a <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7f9 fe73 	bl	8001600 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800791a:	89fb      	ldrh	r3, [r7, #14]
 800791c:	3b01      	subs	r3, #1
 800791e:	81fb      	strh	r3, [r7, #14]
 8007920:	89fb      	ldrh	r3, [r7, #14]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1bc      	bne.n	80078a0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800792c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800792e:	897b      	ldrh	r3, [r7, #10]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d023      	beq.n	800797c <UART_RxISR_8BIT_FIFOEN+0x100>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800793a:	897a      	ldrh	r2, [r7, #10]
 800793c:	429a      	cmp	r2, r3
 800793e:	d21d      	bcs.n	800797c <UART_RxISR_8BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800794e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <UART_RxISR_8BIT_FIFOEN+0x108>)
 8007954:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0220 	orr.w	r2, r2, #32
 8007964:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007966:	e009      	b.n	800797c <UART_RxISR_8BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	8b1b      	ldrh	r3, [r3, #24]
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0208 	orr.w	r2, r2, #8
 8007978:	b292      	uxth	r2, r2
 800797a:	831a      	strh	r2, [r3, #24]
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	0800771f 	.word	0x0800771f

08007988 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007996:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799e:	2b22      	cmp	r3, #34	; 0x22
 80079a0:	d168      	bne.n	8007a74 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079a8:	82fb      	strh	r3, [r7, #22]
 80079aa:	e03f      	b.n	8007a2c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079b2:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b8:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80079ba:	8a3a      	ldrh	r2, [r7, #16]
 80079bc:	8abb      	ldrh	r3, [r7, #20]
 80079be:	4013      	ands	r3, r2
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	1c9a      	adds	r2, r3, #2
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d11b      	bne.n	8007a26 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6812      	ldr	r2, [r2, #0]
 8007a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7f9 fded 	bl	8001600 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007a26:	8afb      	ldrh	r3, [r7, #22]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	82fb      	strh	r3, [r7, #22]
 8007a2c:	8afb      	ldrh	r3, [r7, #22]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1bc      	bne.n	80079ac <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a38:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a3a:	8a7b      	ldrh	r3, [r7, #18]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d023      	beq.n	8007a88 <UART_RxISR_16BIT_FIFOEN+0x100>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a46:	8a7a      	ldrh	r2, [r7, #18]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d21d      	bcs.n	8007a88 <UART_RxISR_16BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007a5a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a0c      	ldr	r2, [pc, #48]	; (8007a90 <UART_RxISR_16BIT_FIFOEN+0x108>)
 8007a60:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0220 	orr.w	r2, r2, #32
 8007a70:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a72:	e009      	b.n	8007a88 <UART_RxISR_16BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	8b1b      	ldrh	r3, [r3, #24]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 0208 	orr.w	r2, r2, #8
 8007a84:	b292      	uxth	r2, r2
 8007a86:	831a      	strh	r2, [r3, #24]
}
 8007a88:	bf00      	nop
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	080077cd 	.word	0x080077cd

08007a94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d101      	bne.n	8007ae6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	e027      	b.n	8007b36 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2224      	movs	r2, #36	; 0x24
 8007af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0201 	bic.w	r2, r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d101      	bne.n	8007b5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b56:	2302      	movs	r3, #2
 8007b58:	e02d      	b.n	8007bb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2224      	movs	r2, #36	; 0x24
 8007b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f850 	bl	8007c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d101      	bne.n	8007bd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	e02d      	b.n	8007c32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2224      	movs	r2, #36	; 0x24
 8007be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0201 	bic.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f812 	bl	8007c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b089      	sub	sp, #36	; 0x24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007c44:	4a2f      	ldr	r2, [pc, #188]	; (8007d04 <UARTEx_SetNbDataToProcess+0xc8>)
 8007c46:	f107 0314 	add.w	r3, r7, #20
 8007c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c4e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007c52:	4a2d      	ldr	r2, [pc, #180]	; (8007d08 <UARTEx_SetNbDataToProcess+0xcc>)
 8007c54:	f107 030c 	add.w	r3, r7, #12
 8007c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c5c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d108      	bne.n	8007c7a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c78:	e03d      	b.n	8007cf6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c7e:	2308      	movs	r3, #8
 8007c80:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	0e5b      	lsrs	r3, r3, #25
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	0f5b      	lsrs	r3, r3, #29
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007ca2:	7fbb      	ldrb	r3, [r7, #30]
 8007ca4:	7f3a      	ldrb	r2, [r7, #28]
 8007ca6:	f107 0120 	add.w	r1, r7, #32
 8007caa:	440a      	add	r2, r1
 8007cac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007cb0:	fb02 f303 	mul.w	r3, r2, r3
 8007cb4:	7f3a      	ldrb	r2, [r7, #28]
 8007cb6:	f107 0120 	add.w	r1, r7, #32
 8007cba:	440a      	add	r2, r1
 8007cbc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007ccc:	7ffb      	ldrb	r3, [r7, #31]
 8007cce:	7f7a      	ldrb	r2, [r7, #29]
 8007cd0:	f107 0120 	add.w	r1, r7, #32
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	7f7a      	ldrb	r2, [r7, #29]
 8007ce0:	f107 0120 	add.w	r1, r7, #32
 8007ce4:	440a      	add	r2, r1
 8007ce6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007cea:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cf6:	bf00      	nop
 8007cf8:	3724      	adds	r7, #36	; 0x24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	08008278 	.word	0x08008278
 8007d08:	08008280 	.word	0x08008280

08007d0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	f107 001c 	add.w	r0, r7, #28
 8007d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d122      	bne.n	8007d6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d105      	bne.n	8007d5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa1e 	bl	80081a0 <USB_CoreReset>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]
 8007d68:	e01a      	b.n	8007da0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa12 	bl	80081a0 <USB_CoreReset>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38
 8007d92:	e005      	b.n	8007da0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dac:	b004      	add	sp, #16
 8007dae:	4770      	bx	lr

08007db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f023 0201 	bic.w	r2, r3, #1
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d106      	bne.n	8007dfe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60da      	str	r2, [r3, #12]
 8007dfc:	e00b      	b.n	8007e16 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d106      	bne.n	8007e12 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	e001      	b.n	8007e16 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e003      	b.n	8007e1e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e16:	2032      	movs	r0, #50	; 0x32
 8007e18:	f7fa fbf0 	bl	80025fc <HAL_Delay>

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e28:	b084      	sub	sp, #16
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
 8007e46:	e009      	b.n	8007e5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	3340      	adds	r3, #64	; 0x40
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2b0e      	cmp	r3, #14
 8007e60:	d9f2      	bls.n	8007e48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d112      	bne.n	8007e8e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e005      	b.n	8007e9a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eac:	4619      	mov	r1, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	680b      	ldr	r3, [r1, #0]
 8007eb8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007eba:	2103      	movs	r1, #3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f93d 	bl	800813c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ec2:	2110      	movs	r1, #16
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f8f1 	bl	80080ac <USB_FlushTxFifo>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f90f 	bl	80080f8 <USB_FlushRxFifo>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	461a      	mov	r2, r3
 8007eec:	2300      	movs	r3, #0
 8007eee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	2300      	movs	r3, #0
 8007efa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f02:	461a      	mov	r2, r3
 8007f04:	2300      	movs	r3, #0
 8007f06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	e043      	b.n	8007f96 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f24:	d118      	bne.n	8007f58 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	e013      	b.n	8007f6a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e008      	b.n	8007f6a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f64:	461a      	mov	r2, r3
 8007f66:	2300      	movs	r3, #0
 8007f68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	461a      	mov	r2, r3
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3301      	adds	r3, #1
 8007f94:	613b      	str	r3, [r7, #16]
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d3b7      	bcc.n	8007f0e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	e043      	b.n	800802c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fba:	d118      	bne.n	8007fee <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	e013      	b.n	8008000 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	e008      	b.n	8008000 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	461a      	mov	r2, r3
 800800e:	2300      	movs	r3, #0
 8008010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	461a      	mov	r2, r3
 8008020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3301      	adds	r3, #1
 800802a:	613b      	str	r3, [r7, #16]
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	d3b7      	bcc.n	8007fa4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008046:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008054:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f043 0210 	orr.w	r2, r3, #16
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699a      	ldr	r2, [r3, #24]
 8008066:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <USB_DevInit+0x280>)
 8008068:	4313      	orrs	r3, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800806e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	f043 0208 	orr.w	r2, r3, #8
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008082:	2b01      	cmp	r3, #1
 8008084:	d107      	bne.n	8008096 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800808e:	f043 0304 	orr.w	r3, r3, #4
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080a2:	b004      	add	sp, #16
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	803c3800 	.word	0x803c3800

080080ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	019b      	lsls	r3, r3, #6
 80080be:	f043 0220 	orr.w	r2, r3, #32
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a09      	ldr	r2, [pc, #36]	; (80080f4 <USB_FlushTxFifo+0x48>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d901      	bls.n	80080d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e006      	b.n	80080e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d0f0      	beq.n	80080c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	00030d40 	.word	0x00030d40

080080f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2210      	movs	r2, #16
 8008108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3301      	adds	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a09      	ldr	r2, [pc, #36]	; (8008138 <USB_FlushRxFifo+0x40>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d901      	bls.n	800811c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e006      	b.n	800812a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	2b10      	cmp	r3, #16
 8008126:	d0f0      	beq.n	800810a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	00030d40 	.word	0x00030d40

0800813c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800815c:	4313      	orrs	r3, r2
 800815e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008188:	f043 0302 	orr.w	r3, r3, #2
 800818c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800818e:	2003      	movs	r0, #3
 8008190:	f7fa fa34 	bl	80025fc <HAL_Delay>

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4a13      	ldr	r2, [pc, #76]	; (8008204 <USB_CoreReset+0x64>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d901      	bls.n	80081be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e01b      	b.n	80081f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	daf2      	bge.n	80081ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f043 0201 	orr.w	r2, r3, #1
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a09      	ldr	r2, [pc, #36]	; (8008204 <USB_CoreReset+0x64>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d901      	bls.n	80081e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e006      	b.n	80081f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d0f0      	beq.n	80081d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	00030d40 	.word	0x00030d40

08008208 <__libc_init_array>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	4e0d      	ldr	r6, [pc, #52]	; (8008240 <__libc_init_array+0x38>)
 800820c:	4c0d      	ldr	r4, [pc, #52]	; (8008244 <__libc_init_array+0x3c>)
 800820e:	1ba4      	subs	r4, r4, r6
 8008210:	10a4      	asrs	r4, r4, #2
 8008212:	2500      	movs	r5, #0
 8008214:	42a5      	cmp	r5, r4
 8008216:	d109      	bne.n	800822c <__libc_init_array+0x24>
 8008218:	4e0b      	ldr	r6, [pc, #44]	; (8008248 <__libc_init_array+0x40>)
 800821a:	4c0c      	ldr	r4, [pc, #48]	; (800824c <__libc_init_array+0x44>)
 800821c:	f000 f820 	bl	8008260 <_init>
 8008220:	1ba4      	subs	r4, r4, r6
 8008222:	10a4      	asrs	r4, r4, #2
 8008224:	2500      	movs	r5, #0
 8008226:	42a5      	cmp	r5, r4
 8008228:	d105      	bne.n	8008236 <__libc_init_array+0x2e>
 800822a:	bd70      	pop	{r4, r5, r6, pc}
 800822c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008230:	4798      	blx	r3
 8008232:	3501      	adds	r5, #1
 8008234:	e7ee      	b.n	8008214 <__libc_init_array+0xc>
 8008236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800823a:	4798      	blx	r3
 800823c:	3501      	adds	r5, #1
 800823e:	e7f2      	b.n	8008226 <__libc_init_array+0x1e>
 8008240:	080082d8 	.word	0x080082d8
 8008244:	080082d8 	.word	0x080082d8
 8008248:	080082d8 	.word	0x080082d8
 800824c:	080082dc 	.word	0x080082dc

08008250 <memset>:
 8008250:	4402      	add	r2, r0
 8008252:	4603      	mov	r3, r0
 8008254:	4293      	cmp	r3, r2
 8008256:	d100      	bne.n	800825a <memset+0xa>
 8008258:	4770      	bx	lr
 800825a:	f803 1b01 	strb.w	r1, [r3], #1
 800825e:	e7f9      	b.n	8008254 <memset+0x4>

08008260 <_init>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

0800826c <_fini>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr
